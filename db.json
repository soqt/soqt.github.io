{"meta":{"version":1,"warehouse":"3.0.1"},"models":{"Asset":[{"_id":"source/CNAME","path":"CNAME","modified":1,"renderable":0},{"_id":"themes/ocean/source/404.html","path":"404.html","modified":1,"renderable":1},{"_id":"themes/ocean/source/favicon.ico","path":"favicon.ico","modified":1,"renderable":1},{"_id":"themes/ocean/source/robots.txt","path":"robots.txt","modified":1,"renderable":1},{"_id":"themes/ocean/source/css/404.styl","path":"css/404.styl","modified":1,"renderable":1},{"_id":"themes/ocean/source/css/style.styl","path":"css/style.styl","modified":1,"renderable":1},{"_id":"themes/ocean/source/fancybox/jquery.fancybox.min.css","path":"fancybox/jquery.fancybox.min.css","modified":1,"renderable":1},{"_id":"themes/ocean/source/images/brand.svg","path":"images/brand.svg","modified":1,"renderable":1},{"_id":"themes/ocean/source/images/brand-inverted.svg","path":"images/brand-inverted.svg","modified":1,"renderable":1},{"_id":"themes/ocean/source/js/busuanzi-2.3.pure.min.js","path":"js/busuanzi-2.3.pure.min.js","modified":1,"renderable":1},{"_id":"themes/ocean/source/js/jquery.justifiedGallery.min.js","path":"js/jquery.justifiedGallery.min.js","modified":1,"renderable":1},{"_id":"themes/ocean/source/js/lazyload.min.js","path":"js/lazyload.min.js","modified":1,"renderable":1},{"_id":"themes/ocean/source/js/ocean.js","path":"js/ocean.js","modified":1,"renderable":1},{"_id":"themes/ocean/source/js/pace.min.js","path":"js/pace.min.js","modified":1,"renderable":1},{"_id":"themes/ocean/source/js/search.js","path":"js/search.js","modified":1,"renderable":1},{"_id":"themes/ocean/source/js/spinningLogo.js","path":"js/spinningLogo.js","modified":1,"renderable":1},{"_id":"themes/ocean/source/js/tocbot.min.js","path":"js/tocbot.min.js","modified":1,"renderable":1},{"_id":"source/images/hearts.jpeg","path":"images/hearts.jpeg","modified":1,"renderable":0},{"_id":"themes/ocean/source/fancybox/jquery.fancybox.min.js","path":"fancybox/jquery.fancybox.min.js","modified":1,"renderable":1},{"_id":"themes/ocean/source/js/jquery-2.0.3.min.js","path":"js/jquery-2.0.3.min.js","modified":1,"renderable":1},{"_id":"themes/ocean/source/css/feathericon/feathericon.woff","path":"css/feathericon/feathericon.woff","modified":1,"renderable":1},{"_id":"themes/ocean/source/css/feathericon/feathericon.ttf","path":"css/feathericon/feathericon.ttf","modified":1,"renderable":1},{"_id":"themes/ocean/source/css/feathericon/feathericon.eot","path":"css/feathericon/feathericon.eot","modified":1,"renderable":1},{"_id":"themes/ocean/source/css/feathericon/feathericon.woff2","path":"css/feathericon/feathericon.woff2","modified":1,"renderable":1},{"_id":"themes/ocean/source/images/ocean/overlay-hero.png","path":"images/ocean/overlay-hero.png","modified":1,"renderable":1},{"_id":"source/images/cherry_bloosom.jpeg","path":"images/cherry_bloosom.jpeg","modified":1,"renderable":0},{"_id":"themes/ocean/source/css/feathericon/feathericon.svg","path":"css/feathericon/feathericon.svg","modified":1,"renderable":1},{"_id":"themes/ocean/source/images/forrestgump.png","path":"images/forrestgump.png","modified":1,"renderable":1},{"_id":"themes/ocean/source/images/ocean/ocean.ogv","path":"images/ocean/ocean.ogv","modified":1,"renderable":1},{"_id":"source/images/the-tower-of-babel.jpg","path":"images/the-tower-of-babel.jpg","modified":1,"renderable":0},{"_id":"themes/ocean/source/images/ocean/ocean.png","path":"images/ocean/ocean.png","modified":1,"renderable":1},{"_id":"themes/ocean/source/images/ocean/ocean.webm","path":"images/ocean/ocean.webm","modified":1,"renderable":1},{"_id":"themes/ocean/source/images/ocean/ocean.mp4","path":"images/ocean/ocean.mp4","modified":1,"renderable":1}],"Cache":[{"_id":"source/.DS_Store","hash":"952e7d2d4e2cc75616fad01e89e089450a2703a2","modified":1575599620477},{"_id":"source/CNAME","hash":"95f58c13e0964c26d84310beb217a8cd44551e28","modified":1575709817568},{"_id":"themes/ocean/README.md","hash":"00819412fe8753136eccbc4802ebcb2609c355df","modified":1575599157244},{"_id":"themes/ocean/_config.yml","hash":"59fb151de4e84bed201eb623ec857b043de3bf60","modified":1575715657090},{"_id":"themes/ocean/package.json","hash":"b993176f8c35bc3ab9dbd8642ec6cd125fcb447e","modified":1575599157251},{"_id":"source/_posts/.DS_Store","hash":"32425292d7eacd0dda437970a431c5a8fc98802d","modified":1575603630479},{"_id":"source/_posts/2018-08-25-liquidity-contract.md","hash":"9c312ec0f59a556d8573b2fdf37f4715814fc886","modified":1575703215201},{"_id":"source/_posts/2018-08-28-liquidity-note.md","hash":"48ef041e77908439709167959eca792dc4da22e8","modified":1575703271005},{"_id":"source/_posts/2018-08-26-p3d-contract-analysis.md","hash":"e3bb12ac1f22925bc130129e2006481801175de5","modified":1575703312174},{"_id":"source/_posts/2018-08-26-nginx-config.md","hash":"33c1ce33e3ccb33119d2b7c1386cdd01df557060","modified":1575703215866},{"_id":"source/_posts/2018-10-04-docker-note.md","hash":"1098b9af209ad3161aabb8435ab2454ca7ddc2ea","modified":1575706284361},{"_id":"source/_posts/genesis-blog.md","hash":"a67003db825acacf19b48346cb9484509bd94099","modified":1576798520187},{"_id":"source/_posts/first-blog.md","hash":"a4cea6d82290271bf9ac0ea0610cc60ab1b688db","modified":1575708391220},{"_id":"source/_posts/docker-note.md","hash":"0a0e50baef5e66f718943ab0dce985ca72cec03f","modified":1575705661624},{"_id":"source/_posts/2018-11-25-python-spider-setup.md","hash":"ca9ab383782dec236a41d759f1e6638f94d45758","modified":1575703280055},{"_id":"source/_posts/happy-birthday-to-miemie.md","hash":"702bf8a7e707aa7b8ddee0043b1ecf265b999f8b","modified":1575709483399},{"_id":"source/about/index.md","hash":"a8209f3df7f8f22f102d6c438e39e8b3e664dd06","modified":1575717776590},{"_id":"source/_posts/腾讯云COS小程序开发指南.md","hash":"650b31193cf90051f9a21c50c59e9ce33055ade1","modified":1575703219408},{"_id":"themes/ocean/.git/HEAD","hash":"acbaef275e46a7f14c1ef456fff2c8bbe8c84724","modified":1575599157236},{"_id":"themes/ocean/.git/config","hash":"686588db57bb2d68a492446ce94aa90be25c28fa","modified":1575599157238},{"_id":"themes/ocean/.git/index","hash":"a29650b34a53cfb96a3b37f9e185ed14f7b099c7","modified":1575711772145},{"_id":"source/gallery/index.md","hash":"04264c895a564489f89beb81e4f7209bac1fab75","modified":1575714767904},{"_id":"themes/ocean/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1575599085783},{"_id":"themes/ocean/.git/packed-refs","hash":"23a3a838571501ccde569e40126353e6903ccdb4","modified":1575599157232},{"_id":"themes/ocean/languages/de.yml","hash":"3ebf0775abbee928c8d7bda943c191d166ded0d3","modified":1575599157245},{"_id":"themes/ocean/languages/default.yml","hash":"3083f319b352d21d80fc5e20113ddf27889c9d11","modified":1575599157245},{"_id":"themes/ocean/languages/es.yml","hash":"76edb1171b86532ef12cfd15f5f2c1ac3949f061","modified":1575599157245},{"_id":"themes/ocean/languages/fr.yml","hash":"415e1c580ced8e4ce20b3b0aeedc3610341c76fb","modified":1575599157245},{"_id":"themes/ocean/languages/ja.yml","hash":"a73e1b9c80fd6e930e2628b393bfe3fb716a21a9","modified":1575599157245},{"_id":"themes/ocean/languages/ko.yml","hash":"881d6a0a101706e0452af81c580218e0bfddd9cf","modified":1575599157245},{"_id":"themes/ocean/languages/nl.yml","hash":"12ed59faba1fc4e8cdd1d42ab55ef518dde8039c","modified":1575599157245},{"_id":"themes/ocean/languages/no.yml","hash":"965a171e70347215ec726952e63f5b47930931ef","modified":1575599157246},{"_id":"themes/ocean/languages/pt.yml","hash":"57d07b75d434fbfc33b0ddb543021cb5f53318a8","modified":1575599157246},{"_id":"themes/ocean/languages/ru.yml","hash":"4fda301bbd8b39f2c714e2c934eccc4b27c0a2b0","modified":1575599157246},{"_id":"themes/ocean/languages/zh-CN.yml","hash":"1ef52d096f074d88399ef1fa80d2f78a81d4b83c","modified":1575599157246},{"_id":"themes/ocean/languages/zh-TW.yml","hash":"53ce3000c5f767759c7d2c4efcaa9049788599c3","modified":1575599157246},{"_id":"themes/ocean/layout/categories.ejs","hash":"5c341e56c38f30e610ab25c9026b4a21fe1127c8","modified":1575599157250},{"_id":"themes/ocean/layout/archive.ejs","hash":"2703b07cc8ac64ae46d1d263f4653013c7e1666b","modified":1575599157250},{"_id":"themes/ocean/layout/index.ejs","hash":"dead30ea8014348cef977dcb44eea0ae0f0601c5","modified":1575711416009},{"_id":"themes/ocean/layout/page.ejs","hash":"a9a48ae63f5d68a36382951166fdd6e482b901f1","modified":1575599157250},{"_id":"themes/ocean/layout/layout.ejs","hash":"280514f9a3d5ba1f571062ec899627dbc06c7298","modified":1575599157250},{"_id":"themes/ocean/layout/post.ejs","hash":"a9a48ae63f5d68a36382951166fdd6e482b901f1","modified":1575599157251},{"_id":"themes/ocean/layout/tags.ejs","hash":"88b34dd8d7b1e64fa27aa6ed72af996cf6700809","modified":1575599157251},{"_id":"themes/ocean/source/404.html","hash":"788929fab7b99dd74575399f41cddae6f63ce1f4","modified":1575599157252},{"_id":"themes/ocean/source/favicon.ico","hash":"274756334d84ce79075e91dbdc92e7cecf9a5ee5","modified":1575712962278},{"_id":"themes/ocean/source/robots.txt","hash":"0a017f05351c30d5fcff0206cf19e85fd5c6a6e9","modified":1575599157301},{"_id":"themes/ocean/.git/hooks/applypatch-msg.sample","hash":"4de88eb95a5e93fd27e78b5fb3b5231a8d8917dd","modified":1575599085784},{"_id":"themes/ocean/.git/hooks/fsmonitor-watchman.sample","hash":"f7c0aa40cb0d620ff0bca3efe3521ec79e5d7156","modified":1575599085784},{"_id":"themes/ocean/.git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1575599085784},{"_id":"themes/ocean/.git/hooks/pre-applypatch.sample","hash":"f208287c1a92525de9f5462e905a9d31de1e2d75","modified":1575599085786},{"_id":"themes/ocean/.git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1575599085785},{"_id":"themes/ocean/.git/hooks/pre-commit.sample","hash":"33729ad4ce51acda35094e581e4088f3167a0af8","modified":1575599085784},{"_id":"themes/ocean/.git/hooks/pre-push.sample","hash":"5c8518bfd1d1d3d2c1a7194994c0a16d8a313a41","modified":1575599085786},{"_id":"themes/ocean/.git/hooks/pre-receive.sample","hash":"705a17d259e7896f0082fe2e9f2c0c3b127be5ac","modified":1575599085785},{"_id":"themes/ocean/.git/hooks/prepare-commit-msg.sample","hash":"2584806ba147152ae005cb675aa4f01d5d068456","modified":1575599085785},{"_id":"themes/ocean/.git/logs/HEAD","hash":"a7f7ccf491cee79b4914a4948654f56941e4fc13","modified":1575599157237},{"_id":"themes/ocean/.git/hooks/update.sample","hash":"e729cd61b27c128951d139de8e7c63d1a3758dde","modified":1575599085786},{"_id":"themes/ocean/.git/info/exclude","hash":"c879df015d97615050afa7b9641e3352a1e701ac","modified":1575599085783},{"_id":"themes/ocean/.git/hooks/pre-rebase.sample","hash":"288efdc0027db4cfd8b7c47c4aeddba09b6ded12","modified":1575599085784},{"_id":"themes/ocean/layout/_partial/after-footer.ejs","hash":"29ada5283d591a83f7a65e0aef053b92b8ff182c","modified":1575713118867},{"_id":"themes/ocean/layout/_partial/archive-post.ejs","hash":"9be7173badcca6582c1136204adb3aa432aada21","modified":1575599157247},{"_id":"themes/ocean/layout/_partial/archive.ejs","hash":"d7221ce7a6f5989ded47f7d9b0f40778f897deb6","modified":1575599157247},{"_id":"themes/ocean/layout/_partial/article.ejs","hash":"efaaff11ee03191bc15584c984d0869cba4918be","modified":1575703280476},{"_id":"themes/ocean/layout/_partial/footer.ejs","hash":"598591a03557d27b13d58cabbb4bb77099bf259f","modified":1575603564921},{"_id":"themes/ocean/layout/_partial/head.ejs","hash":"498b4cf5e94c50576d9362effe8d581e63142a62","modified":1575599157247},{"_id":"themes/ocean/layout/_partial/ocean.ejs","hash":"be76e0cbc4ecd9171972fabed6830cb592b5b343","modified":1575599157247},{"_id":"themes/ocean/layout/_partial/sidebar.ejs","hash":"26d1e716ebf794753f182e86600af7a8de5ab369","modified":1575703881380},{"_id":"themes/ocean/layout/_partial/totop.ejs","hash":"72b960315983ee95363fa9cabe82f52916ac9ae3","modified":1575599157250},{"_id":"themes/ocean/source/css/_extend.styl","hash":"deb6aca91c40516f5d638008a72f9def42e5d081","modified":1575599157253},{"_id":"themes/ocean/source/css/_mixins.styl","hash":"6959409df2dd0a1ca05be0c0e9b2a884efdfb82d","modified":1575599157253},{"_id":"themes/ocean/source/css/_feathericon.styl","hash":"8494f0e869411781264868f08eda62fd838e0cee","modified":1575599157253},{"_id":"themes/ocean/source/css/_normalize.styl","hash":"b3337320133b7a336db7033aa6bbe94b054c0b21","modified":1575599157253},{"_id":"themes/ocean/source/css/404.styl","hash":"14b2fec2da86081f0545732552aa5f07b545c19a","modified":1575599157252},{"_id":"themes/ocean/source/css/_variables.styl","hash":"68470eee12d812fcc51c1bd7a4578acae4613fa0","modified":1575599157258},{"_id":"themes/ocean/source/css/style.styl","hash":"b15d434deff447dc22601f325e66dee78a2d80f8","modified":1575599157260},{"_id":"themes/ocean/source/fancybox/jquery.fancybox.min.css","hash":"2e6a66987dbc7a57bbfd2655bce166739b4ba426","modified":1575599157260},{"_id":"themes/ocean/source/images/brand.svg","hash":"934d3f6c59d3e22ffa60498d63ec86ccc5ed8b78","modified":1575703686431},{"_id":"themes/ocean/source/images/brand-inverted.svg","hash":"934d3f6c59d3e22ffa60498d63ec86ccc5ed8b78","modified":1575703748026},{"_id":"themes/ocean/screenshots/hexo-theme-ocean.jpg","hash":"13b5045d2120cac2f68849757f5e0af08938b7c6","modified":1575599157252},{"_id":"themes/ocean/source/js/busuanzi-2.3.pure.min.js","hash":"6e41f31100ae7eb3a6f23f2c168f6dd56e7f7a9a","modified":1575599157299},{"_id":"themes/ocean/source/js/jquery.justifiedGallery.min.js","hash":"73b9373cd80bdbf77e711818095f3f120a019547","modified":1575599157300},{"_id":"themes/ocean/source/js/lazyload.min.js","hash":"b801b3946fb9b72e03512c0663458e140e1fa77b","modified":1575599157300},{"_id":"themes/ocean/source/js/ocean.js","hash":"acac20176cf22a84f889894d7482dc9207076f12","modified":1575599157300},{"_id":"themes/ocean/source/js/pace.min.js","hash":"d32ab818e0f97d3b0c80f5631fc23d8a0cb52795","modified":1575599157300},{"_id":"themes/ocean/source/js/search.js","hash":"118be0e0918532ac1225f62e1a0a6f0673e0b173","modified":1575599157301},{"_id":"themes/ocean/source/js/spinningLogo.js","hash":"0fdf20d872c404f190c80468b89b2fa8134a5518","modified":1575704037185},{"_id":"themes/ocean/source/js/tocbot.min.js","hash":"bae97e8a24a05a99335f8e725641c8ca9c50502a","modified":1575599157301},{"_id":"source/images/hearts.jpeg","hash":"a844bb9cf96cba5744011ac5700f79564358f463","modified":1575714749932},{"_id":"themes/ocean/source/fancybox/jquery.fancybox.min.js","hash":"b2b093d8f5ffeee250c8d0d3a2285a213318e4ea","modified":1575599157260},{"_id":"themes/ocean/source/js/jquery-2.0.3.min.js","hash":"800edb7787c30f4982bf38f2cb8f4f6fb61340e9","modified":1575599157300},{"_id":"themes/ocean/.git/refs/heads/master","hash":"77b13c47e9c38a7cf440256f20cf446eef180931","modified":1575599157237},{"_id":"themes/ocean/.git/objects/pack/pack-bebcc2afb6af67b25a6a91af12983d28e0c90d39.idx","hash":"1692b8ca372a5bbc37d684b2b1990d08ed423c89","modified":1575599157224},{"_id":"themes/ocean/layout/_partial/post/albums.ejs","hash":"acb6d9628b7a2de4f32a84c6f652ac7207d14517","modified":1575599157248},{"_id":"themes/ocean/layout/_partial/post/busuanzi.ejs","hash":"88462d160479cc3f0cc58efcd888fbaf22b0d4d8","modified":1575603822100},{"_id":"themes/ocean/layout/_partial/post/date.ejs","hash":"6197802873157656e3077c5099a7dda3d3b01c29","modified":1575599157248},{"_id":"themes/ocean/layout/_partial/post/gallery.ejs","hash":"5f8487fe7bed9a09001c6655244ff35f583cf1eb","modified":1575599157248},{"_id":"themes/ocean/layout/_partial/post/category.ejs","hash":"85f0ebeceee1c32623bfa1e4170dbe1e34442fea","modified":1575599157248},{"_id":"themes/ocean/layout/_partial/post/gitalk.ejs","hash":"e36d149ad83c3a52562dbef61a0083957eb24578","modified":1575599157248},{"_id":"themes/ocean/layout/_partial/post/justifiedGallery.ejs","hash":"17ccb9fc394d11412619a153997bb87650799c6e","modified":1575599157249},{"_id":"themes/ocean/layout/_partial/post/nav.ejs","hash":"e59198918e92ef92156aeefbf6023584ac1cae64","modified":1575599157249},{"_id":"themes/ocean/layout/_partial/post/search.ejs","hash":"2c9d19d1685e834aa2020998da2a2d259ce9b9ff","modified":1575599157249},{"_id":"themes/ocean/layout/_partial/post/tag.ejs","hash":"2fcb0bf9c8847a644167a27824c9bb19ac74dd14","modified":1575599157249},{"_id":"themes/ocean/layout/_partial/post/title.ejs","hash":"53ccbfc6f1c424fb4dd609c1a61ffb69841403cc","modified":1575599157249},{"_id":"themes/ocean/layout/_partial/post/tocbot.ejs","hash":"9898b0dd9237e21908ba40292a8a9f947bed44d2","modified":1575599157249},{"_id":"themes/ocean/layout/_partial/post/topping.ejs","hash":"bacd7e1d09397cfb32d97b5f3296f3ac538e57ea","modified":1575599157250},{"_id":"themes/ocean/source/css/_partial/albums.styl","hash":"0659d5f7469f24a415354ff767d949926465d515","modified":1575599157253},{"_id":"themes/ocean/source/css/_partial/apple.styl","hash":"e06dce604cc58ec39d677e4e59910c2725684901","modified":1575599157253},{"_id":"themes/ocean/source/css/_partial/archive.styl","hash":"8aefdcf2d542ad839018c2c58511e3318a38490d","modified":1575599157254},{"_id":"themes/ocean/source/css/_partial/article.styl","hash":"89be74d7c23366cad7ae1acf0db38bf0e7687a46","modified":1575599157254},{"_id":"themes/ocean/source/css/_partial/articles.styl","hash":"7bf289013d304505984b251be725b49165a694fd","modified":1575599157254},{"_id":"themes/ocean/source/css/_partial/categories.styl","hash":"f0c898823a5ddc37ae6bf76cc34ce8e50dd30885","modified":1575599157254},{"_id":"themes/ocean/source/css/_partial/float.styl","hash":"d888df89a172e4c8119cb8740fc1eae1a9539157","modified":1575599157254},{"_id":"themes/ocean/source/css/_partial/footer.styl","hash":"24779cbce1012d4f35ffc6b3ec0830cbc2ea3b3f","modified":1575599157254},{"_id":"themes/ocean/source/css/_partial/gallery.styl","hash":"7bdc2c9fb4971dbd7511c5cbb69bd611f20db591","modified":1575599157254},{"_id":"themes/ocean/source/css/_partial/gitalk.styl","hash":"3706eef2e0541493f1679a30241d279e29dfdc17","modified":1575599157255},{"_id":"themes/ocean/source/css/_partial/highlight.styl","hash":"c6e99fd23056fb01177aeefbc5dd4a8e88cf8f81","modified":1575599157255},{"_id":"themes/ocean/source/css/_partial/justifiedGallery.styl","hash":"e7b5784ffd501f98216a717f876f2adb23fa5cd9","modified":1575599157255},{"_id":"themes/ocean/source/css/_partial/layou.styl","hash":"afe74f664f413d48a18739e908b6768f59eb5443","modified":1575599157256},{"_id":"themes/ocean/source/css/_partial/lists.styl","hash":"6fd213c53027d42164bfc9f0e3b4ea02317bfb89","modified":1575599157256},{"_id":"themes/ocean/source/css/_partial/mobile.styl","hash":"adc83b19e793491b1c6ea0fd8b46cd9f32e592fc","modified":1575599157256},{"_id":"themes/ocean/source/css/_partial/navbar.styl","hash":"a25786f067d17645c8a066395d592dfb0527308c","modified":1575711389403},{"_id":"themes/ocean/source/css/_partial/ocean.styl","hash":"69ba351909c73eb1e04510facc9b35dd584198e0","modified":1575599157257},{"_id":"themes/ocean/source/css/_partial/pace.styl","hash":"e326918ba276ee332d0598d8193ccd8353e7d916","modified":1575599157257},{"_id":"themes/ocean/source/css/_partial/search.styl","hash":"011aaf21942dfff514ed4e98ce20142efbdd1b71","modified":1575599157257},{"_id":"themes/ocean/source/css/_partial/sidebar.styl","hash":"600c70f1de82da5223af290d47a583f9c379d188","modified":1575599157257},{"_id":"themes/ocean/source/css/_partial/tocbot.styl","hash":"da8560a8f9718d3afb9760956f9f8e4bb88b3dd8","modified":1575599157257},{"_id":"themes/ocean/source/css/_partial/tag.styl","hash":"925af8beede44ab53fe3cd0a5c472d2baa03baec","modified":1575599157257},{"_id":"themes/ocean/source/css/_partial/totop.styl","hash":"4bae031b6852384666cdf36e98c6bbbba1281453","modified":1575599157257},{"_id":"themes/ocean/source/css/feathericon/feathericon.woff","hash":"d22fe861e47afd92969ab46c7cbb7ea9c225aaf8","modified":1575599157259},{"_id":"themes/ocean/source/css/feathericon/feathericon.ttf","hash":"d0d80c3c960d7d45e6bd7fa428d8a6a8c8245b2d","modified":1575599157259},{"_id":"themes/ocean/source/css/feathericon/feathericon.eot","hash":"e2a01ae6f849841bc7a9fd21e5b7b450f1ded19b","modified":1575599157258},{"_id":"themes/ocean/source/css/feathericon/feathericon.woff2","hash":"2c11c45331d914ee38ad42ccf966132a508b5596","modified":1575599157259},{"_id":"themes/ocean/source/images/ocean/overlay-hero.png","hash":"92481a1848c35be96a693af11f77265323a7c189","modified":1575599157299},{"_id":"source/images/cherry_bloosom.jpeg","hash":"35e7f1c04c73a8650e49661eaca32269df3e94fd","modified":1575714688446},{"_id":"themes/ocean/source/css/feathericon/feathericon.svg","hash":"c113006c6822451802c8457128c352c0e4934453","modified":1575599157259},{"_id":"source/_posts/happy-birthday-to-miemie/sheep_cake.jpg","hash":"fb89ee270eb12d78de73a48a8277ef60b36a70bb","modified":1575708374458},{"_id":"themes/ocean/.git/logs/refs/heads/master","hash":"a7f7ccf491cee79b4914a4948654f56941e4fc13","modified":1575599157237},{"_id":"themes/ocean/.git/refs/remotes/origin/HEAD","hash":"d9427cda09aba1cdde5c69c2b13c905bddb0bc51","modified":1575599157236},{"_id":"themes/ocean/source/images/forrestgump.png","hash":"18ad6a8ba815878e36a0d5562136dc4fb8920c12","modified":1575599157262},{"_id":"themes/ocean/.git/logs/refs/remotes/origin/HEAD","hash":"a7f7ccf491cee79b4914a4948654f56941e4fc13","modified":1575599157236},{"_id":"themes/ocean/source/images/ocean/ocean.ogv","hash":"9c6b5d6b0544472cee39f5eafac2d5cbba5fd86b","modified":1575599157283},{"_id":"source/_posts/docker-note/docker-network.png","hash":"d1d1d62f2aa63df6bd39a80a5db6c3e319d0aa73","modified":1575705648358},{"_id":"source/images/the-tower-of-babel.jpg","hash":"26692946ab10a952a96d26af2c1e3bf6a57f93cb","modified":1576798258592},{"_id":"themes/ocean/source/images/ocean/ocean.png","hash":"8245d07f812625d19b48ad2d00f8191f2aa4d304","modified":1575599157287},{"_id":"themes/ocean/source/images/ocean/ocean.webm","hash":"65aa2b6483e0151611899e31571057334c60d9e4","modified":1575599157295},{"_id":"themes/ocean/source/images/ocean/ocean.mp4","hash":"1e89cac2d652005d9dafd3ecb4dd460a8ff6d6af","modified":1575599157274},{"_id":"themes/ocean/.git/objects/pack/pack-bebcc2afb6af67b25a6a91af12983d28e0c90d39.pack","hash":"22eb0dfd830f55824415047bb5fb443bcbbefd29","modified":1575599157224},{"_id":"public/about/index.html","hash":"7d1d97ae02b5d18dd967cac6d70d38b96b96a581","modified":1576799916867},{"_id":"public/gallery/index.html","hash":"ba7eb87950a069766fa3090c1e69c4b109db33fa","modified":1576799916867},{"_id":"public/2019/12/20/genesis-blog/index.html","hash":"9926732289faf301a837dae2df4162a83384611c","modified":1576799916867},{"_id":"public/2018/08/25/happy-birthday-to-miemie/index.html","hash":"23dbda6e3d21fa12279390ef49347570574da0ef","modified":1576799916867},{"_id":"public/2018/08/23/first-blog/index.html","hash":"e031bb2ffa2958b3b8c7155ccccdac582342eb29","modified":1576799916867},{"_id":"public/2018/08/28/2018-08-28-liquidity-note/index.html","hash":"ad28b3947f3106db677bceca7d32273df5b55759","modified":1576799916867},{"_id":"public/2018/08/25/2018-08-25-liquidity-contract/index.html","hash":"db2a05d41d9b2ff5a06693306e7b814b631f2e78","modified":1576799916867},{"_id":"public/archives/index.html","hash":"a58aa5d7ffd381189dbdbe0b5f3b42037c1cd06c","modified":1576799916867},{"_id":"public/archives/2018/index.html","hash":"008719e6c7e8cac2422594552a9e15385661ecc8","modified":1576799916867},{"_id":"public/archives/2018/08/index.html","hash":"307887b22df1a8cc7469ae9135961401b0c9b894","modified":1576799916867},{"_id":"public/archives/2019/index.html","hash":"3563d01947e01e94360530805f261d22f23f523f","modified":1576799916867},{"_id":"public/archives/2019/12/index.html","hash":"46e05850cf5ac72c658d883c1c3eb3be4935dc16","modified":1576799916867},{"_id":"public/index.html","hash":"0e9691bcbe53c77221369da7d2dbcca08cb47652","modified":1576799916867},{"_id":"public/categories/Blog/index.html","hash":"0b25f05aec12915cbacc568a216d436942867a43","modified":1576799916867},{"_id":"public/2019/12/06/腾讯云COS小程序开发指南/index.html","hash":"0508bf950701cfd26072d6a91fc71bb1219ead2b","modified":1576799916867},{"_id":"public/2018/11/25/2018-11-25-python-spider-setup/index.html","hash":"c4854b96f7b7824a7baffd7b6b8ad6fe3143b8e2","modified":1576799916867},{"_id":"public/2018/10/04/2018-10-04-docker-note/index.html","hash":"b9ae1b4e51ee67a213324a6f5a3229ba820b52c5","modified":1576799916867},{"_id":"public/2018/10/04/docker-note/index.html","hash":"0dd08335ce511203e30e5f6be7f299773c95c27d","modified":1576799916867},{"_id":"public/2018/08/26/2018-08-26-nginx-config/index.html","hash":"7487c241d80099a5f79e097d14ede3acc87bb883","modified":1576799916867},{"_id":"public/2018/08/26/2018-08-26-p3d-contract-analysis/index.html","hash":"fecb66502b2c21cde84bdc53c8957b9dfada9bd3","modified":1576799916867},{"_id":"public/CNAME","hash":"95f58c13e0964c26d84310beb217a8cd44551e28","modified":1576799916867},{"_id":"public/favicon.ico","hash":"274756334d84ce79075e91dbdc92e7cecf9a5ee5","modified":1576799916867},{"_id":"public/robots.txt","hash":"0a017f05351c30d5fcff0206cf19e85fd5c6a6e9","modified":1576799916867},{"_id":"public/images/brand.svg","hash":"934d3f6c59d3e22ffa60498d63ec86ccc5ed8b78","modified":1576799916867},{"_id":"public/images/brand-inverted.svg","hash":"934d3f6c59d3e22ffa60498d63ec86ccc5ed8b78","modified":1576799916867},{"_id":"public/css/feathericon/feathericon.woff","hash":"d22fe861e47afd92969ab46c7cbb7ea9c225aaf8","modified":1576799916867},{"_id":"public/css/feathericon/feathericon.ttf","hash":"d0d80c3c960d7d45e6bd7fa428d8a6a8c8245b2d","modified":1576799916867},{"_id":"public/css/feathericon/feathericon.eot","hash":"e2a01ae6f849841bc7a9fd21e5b7b450f1ded19b","modified":1576799916867},{"_id":"public/css/feathericon/feathericon.woff2","hash":"2c11c45331d914ee38ad42ccf966132a508b5596","modified":1576799916867},{"_id":"public/images/ocean/overlay-hero.png","hash":"92481a1848c35be96a693af11f77265323a7c189","modified":1576799916867},{"_id":"public/css/feathericon/feathericon.svg","hash":"c113006c6822451802c8457128c352c0e4934453","modified":1576799916867},{"_id":"public/css/404.css","hash":"952f9d1b869886a2940768fb7d1fd891ccea29fa","modified":1576799916867},{"_id":"public/js/busuanzi-2.3.pure.min.js","hash":"6e41f31100ae7eb3a6f23f2c168f6dd56e7f7a9a","modified":1576799916867},{"_id":"public/js/ocean.js","hash":"acac20176cf22a84f889894d7482dc9207076f12","modified":1576799916867},{"_id":"public/js/lazyload.min.js","hash":"b801b3946fb9b72e03512c0663458e140e1fa77b","modified":1576799916867},{"_id":"public/js/search.js","hash":"118be0e0918532ac1225f62e1a0a6f0673e0b173","modified":1576799916867},{"_id":"public/js/spinningLogo.js","hash":"0fdf20d872c404f190c80468b89b2fa8134a5518","modified":1576799916867},{"_id":"public/404.html","hash":"788929fab7b99dd74575399f41cddae6f63ce1f4","modified":1576799916867},{"_id":"public/css/style.css","hash":"cf30d74aded802ccf006150e4dd5e20b5e947356","modified":1576799916867},{"_id":"public/fancybox/jquery.fancybox.min.css","hash":"2e6a66987dbc7a57bbfd2655bce166739b4ba426","modified":1576799916867},{"_id":"public/js/pace.min.js","hash":"d32ab818e0f97d3b0c80f5631fc23d8a0cb52795","modified":1576799916867},{"_id":"public/js/tocbot.min.js","hash":"bae97e8a24a05a99335f8e725641c8ca9c50502a","modified":1576799916867},{"_id":"public/images/hearts.jpeg","hash":"a844bb9cf96cba5744011ac5700f79564358f463","modified":1576799916867},{"_id":"public/js/jquery.justifiedGallery.min.js","hash":"73b9373cd80bdbf77e711818095f3f120a019547","modified":1576799916867},{"_id":"public/images/forrestgump.png","hash":"18ad6a8ba815878e36a0d5562136dc4fb8920c12","modified":1576799916867},{"_id":"public/2018/08/25/happy-birthday-to-miemie/sheep_cake.jpg","hash":"fb89ee270eb12d78de73a48a8277ef60b36a70bb","modified":1576799916867},{"_id":"public/images/cherry_bloosom.jpeg","hash":"35e7f1c04c73a8650e49661eaca32269df3e94fd","modified":1576799916867},{"_id":"public/images/ocean/ocean.ogv","hash":"9c6b5d6b0544472cee39f5eafac2d5cbba5fd86b","modified":1576799916867},{"_id":"public/fancybox/jquery.fancybox.min.js","hash":"b2b093d8f5ffeee250c8d0d3a2285a213318e4ea","modified":1576799916867},{"_id":"public/js/jquery-2.0.3.min.js","hash":"800edb7787c30f4982bf38f2cb8f4f6fb61340e9","modified":1576799916867},{"_id":"public/2018/10/04/docker-note/docker-network.png","hash":"d1d1d62f2aa63df6bd39a80a5db6c3e319d0aa73","modified":1576799916867},{"_id":"public/images/ocean/ocean.png","hash":"8245d07f812625d19b48ad2d00f8191f2aa4d304","modified":1576799916867},{"_id":"public/images/the-tower-of-babel.jpg","hash":"26692946ab10a952a96d26af2c1e3bf6a57f93cb","modified":1576799916867},{"_id":"public/images/ocean/ocean.webm","hash":"65aa2b6483e0151611899e31571057334c60d9e4","modified":1576799916867},{"_id":"public/images/ocean/ocean.mp4","hash":"1e89cac2d652005d9dafd3ecb4dd460a8ff6d6af","modified":1576799916867}],"Category":[{"name":"liquidity","_id":"ck4ddyit20004phvphzo700nv"},{"name":"Liquidity","_id":"ck4ddyita0008phvpgfky77la"},{"name":"ethereum","_id":"ck4ddyitd000bphvpaeoqavoi"},{"name":"Nginx","_id":"ck4ddyitg000ephvpbr3o84rk"},{"name":"smart contract","parent":"ck4ddyit20004phvphzo700nv","_id":"ck4ddyith000fphvp7ltc14zk"},{"name":"Blog","_id":"ck4ddyith000hphvp07oi8338"},{"name":"Python","_id":"ck4ddyitk000lphvpaofe916y"},{"name":"Smart Contract","parent":"ck4ddyitd000bphvpaeoqavoi","_id":"ck4ddyitm000pphvp8vgz52ab"},{"name":"solidity","parent":"ck4ddyitm000pphvp8vgz52ab","_id":"ck4ddyitn000sphvpac8udrid"},{"name":"cloud","_id":"ck4ddyitz000xphvpgprrc49c"},{"name":"docker","_id":"ck4ddyiuh0013phvp8ysqehic"},{"name":"docker swarm","parent":"ck4ddyiuh0013phvp8ysqehic","_id":"ck4ddyiun0015phvp8k35eafr"}],"Data":[],"Page":[{"title":"About","description":"My stuff goes here","comments":1,"date":"2018-08-23T03:00:20.000Z","_content":"\n### My stuff goes here\n\n### Contact\n> Email: wym7230@gmail.com\n> Twitter: https://twitter.com/yvmengwang\n> Telegram: https://t.me/yvmeng","source":"about/index.md","raw":"---\ntitle: About\ndescription: My stuff goes here\ncomments: true\ndate: 2018-08-23 11:00:20\n---\n\n### My stuff goes here\n\n### Contact\n> Email: wym7230@gmail.com\n> Twitter: https://twitter.com/yvmengwang\n> Telegram: https://t.me/yvmeng","updated":"2019-12-07T11:22:56.590Z","path":"about/index.html","layout":"page","_id":"ck4ddyisw0001phvp0daf14g4","content":"<h3 id=\"my-stuff-goes-here\"><a class=\"markdownIt-Anchor\" href=\"#my-stuff-goes-here\"></a> My stuff goes here</h3>\n<h3 id=\"contact\"><a class=\"markdownIt-Anchor\" href=\"#contact\"></a> Contact</h3>\n<blockquote>\n<p>Email: <a href=\"mailto:wym7230@gmail.com\" target=\"_blank\" rel=\"noopener\">wym7230@gmail.com</a><br />\nTwitter: <a href=\"https://twitter.com/yvmengwang\" target=\"_blank\" rel=\"noopener\">https://twitter.com/yvmengwang</a><br />\nTelegram: <a href=\"https://t.me/yvmeng\" target=\"_blank\" rel=\"noopener\">https://t.me/yvmeng</a></p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"my-stuff-goes-here\"><a class=\"markdownIt-Anchor\" href=\"#my-stuff-goes-here\"></a> My stuff goes here</h3>\n<h3 id=\"contact\"><a class=\"markdownIt-Anchor\" href=\"#contact\"></a> Contact</h3>\n<blockquote>\n<p>Email: <a href=\"mailto:wym7230@gmail.com\" target=\"_blank\" rel=\"noopener\">wym7230@gmail.com</a><br />\nTwitter: <a href=\"https://twitter.com/yvmengwang\" target=\"_blank\" rel=\"noopener\">https://twitter.com/yvmengwang</a><br />\nTelegram: <a href=\"https://t.me/yvmeng\" target=\"_blank\" rel=\"noopener\">https://t.me/yvmeng</a></p>\n</blockquote>\n"},{"title":"Gallery","date":"2019-12-06T02:35:25.000Z","albums":[["/images/cherry_bloosom.jpeg","Cherry Bloosom, University of Washington, WA"],["/images/hearts.jpeg","Hearts"]],"_content":"","source":"gallery/index.md","raw":"---\ntitle: Gallery\ndate: 2019-12-06 10:35:25\nalbums: [\n    [\"/images/cherry_bloosom.jpeg\", \"Cherry Bloosom, University of Washington, WA\"],\n    [\"/images/hearts.jpeg\", \"Hearts\"]\n]\n---\n","updated":"2019-12-07T10:32:47.904Z","path":"gallery/index.html","comments":1,"layout":"page","_id":"ck4ddyit00003phvp4vvdfb0u","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"layout":"post","title":"liquidity learning note","description":"my note while learning liquidity","keywords":"tezos, smart contract, liquidity","date":"2018-08-27T16:00:00.000Z","hidden":true,"_content":"\n*上次更新于2018-08-28*\n\n<!-- more -->\n\nDoc\n----\n[Michelson](https://tezos.gitlab.io/zeronet/whitedoc/michelson.html)\n[Liquidity](http://www.liquidity-lang.org/doc/)\n\n\n语法\n---------\n\n智能合约接收两个参数，分别为`parameter`和`storage`, 每一个参数必须与智能合约接入点`main`中`parameter`和`storage`的type相符。\n例如下面的智能合约，`parameter`的type为`string`,`storage`的type为`map`,语法为`Map [(\"\", 0)]`\n\nliquidity demo code:\n```\n[%%version 0.3]\n\nlet%init storage (myname : string) =\n  Map.add myname 0 (Map [\"ocaml\", 0; \"pro\", 0])\n\nlet%entry main\n    (parameter : string)\n    (storage : (string, int) map) =\n\n  let amount = Current.amount() in\n\n  if amount < 5.00tz then\n    Current.failwith \"Not enough money, at least 5tz to vote\"\n  else\n    match Map.find parameter storage with\n    | None -> Current.failwith \"Bad vote\"\n    | Some x ->\n        let storage = Map.add parameter (x+1) storage in\n        ( ([] : operation list), storage )\n```\n上面这个智能合约是一个投票相关的只能合约，用户可以投票给storage中现有的队伍。\n`parameter`是队伍的名字，`storage`是初始智能合约所具有的队伍列表。\n当合约从`main`进入后，会用`Current.amount()`提取到当前用户呼叫此只能合约所携带的Tezos金额，当小于5个tezos时会判定失败跳错，反之进入else判定。\n\n`match Map.find parameter storage with` 这是一个liquidity的match语句，结合生成的Michelson，\n```\nDUUP @storage ;\nDUUP @parameter ;\nGET ;\n```\n我们发现`Map.find parameter storage`是在storage里面查找是否有parameter对应的这一项，在Michelson中是将storage和parameter分别复制在stack上然后用GET判定。如果找不到结果，则进入`None`状态，这个合约所执行的代码是挑错，并返回“Bad Vote”。可见None更像是try-catch语法中的catch，用于处理用户错误状态。\n如果判定成功，我们进入下一步。\n`let storage = Map.add parameter (x+1) storage in` 是将Map中拿到parameter的值并加1，然后赋值给storage。\n对应的Michelson代码:\n```\n{\nDUUUP @storage ;\nPUSH\n    int\n    1 ;\nDUUUP @x ;\nADD ;\nDUUUUP @parameter ;\nDIP\n    {\n    SOME ;\n    }\n    ;\nDIIIP\n    {\n    DROP ;\n    }\n    ;\nUPDATE @storage ;\nNIL\n    operation\n    ;\nPAIR ;\n}\n```\n首先复制整个storage入栈, 并把即将要变化的值push进栈(这里对应(x+1)中的1)。你可以试着更改(x+n)中n的值并编译成Michelson。发现这个值确实对应的是`PUSH int 1`这段代码。此时将@x复制入栈并相加。这里的@x对应的是 `Some x`的值，名称随意，x是用之前match语句取回的storage中对应parameter的值。然后将目前的值与1相加并赋值给storage。\n用一段话理解这段代码`let storage = Map.add parameter (x+1) storage in`：`拿到当前的storage并将parameter的键值更改并赋值到storage中`\n\n合约最后返回`( ([] : operation list), storage )`, 返回值为`([], [Map [(\"dsds\", 2)]])`。暂不明确最后一句返回的写法为什么这样写。\n\n\n\n*未完待续...*","source":"_posts/2018-08-28-liquidity-note.md","raw":"---\nlayout: post\ntitle: liquidity learning note\ncategories: [liquidity, smart contract]\ndescription: my note while learning liquidity\nkeywords: tezos, smart contract, liquidity \ndate: 2018-08-28 00:00:00\nhidden: true\n---\n\n*上次更新于2018-08-28*\n\n<!-- more -->\n\nDoc\n----\n[Michelson](https://tezos.gitlab.io/zeronet/whitedoc/michelson.html)\n[Liquidity](http://www.liquidity-lang.org/doc/)\n\n\n语法\n---------\n\n智能合约接收两个参数，分别为`parameter`和`storage`, 每一个参数必须与智能合约接入点`main`中`parameter`和`storage`的type相符。\n例如下面的智能合约，`parameter`的type为`string`,`storage`的type为`map`,语法为`Map [(\"\", 0)]`\n\nliquidity demo code:\n```\n[%%version 0.3]\n\nlet%init storage (myname : string) =\n  Map.add myname 0 (Map [\"ocaml\", 0; \"pro\", 0])\n\nlet%entry main\n    (parameter : string)\n    (storage : (string, int) map) =\n\n  let amount = Current.amount() in\n\n  if amount < 5.00tz then\n    Current.failwith \"Not enough money, at least 5tz to vote\"\n  else\n    match Map.find parameter storage with\n    | None -> Current.failwith \"Bad vote\"\n    | Some x ->\n        let storage = Map.add parameter (x+1) storage in\n        ( ([] : operation list), storage )\n```\n上面这个智能合约是一个投票相关的只能合约，用户可以投票给storage中现有的队伍。\n`parameter`是队伍的名字，`storage`是初始智能合约所具有的队伍列表。\n当合约从`main`进入后，会用`Current.amount()`提取到当前用户呼叫此只能合约所携带的Tezos金额，当小于5个tezos时会判定失败跳错，反之进入else判定。\n\n`match Map.find parameter storage with` 这是一个liquidity的match语句，结合生成的Michelson，\n```\nDUUP @storage ;\nDUUP @parameter ;\nGET ;\n```\n我们发现`Map.find parameter storage`是在storage里面查找是否有parameter对应的这一项，在Michelson中是将storage和parameter分别复制在stack上然后用GET判定。如果找不到结果，则进入`None`状态，这个合约所执行的代码是挑错，并返回“Bad Vote”。可见None更像是try-catch语法中的catch，用于处理用户错误状态。\n如果判定成功，我们进入下一步。\n`let storage = Map.add parameter (x+1) storage in` 是将Map中拿到parameter的值并加1，然后赋值给storage。\n对应的Michelson代码:\n```\n{\nDUUUP @storage ;\nPUSH\n    int\n    1 ;\nDUUUP @x ;\nADD ;\nDUUUUP @parameter ;\nDIP\n    {\n    SOME ;\n    }\n    ;\nDIIIP\n    {\n    DROP ;\n    }\n    ;\nUPDATE @storage ;\nNIL\n    operation\n    ;\nPAIR ;\n}\n```\n首先复制整个storage入栈, 并把即将要变化的值push进栈(这里对应(x+1)中的1)。你可以试着更改(x+n)中n的值并编译成Michelson。发现这个值确实对应的是`PUSH int 1`这段代码。此时将@x复制入栈并相加。这里的@x对应的是 `Some x`的值，名称随意，x是用之前match语句取回的storage中对应parameter的值。然后将目前的值与1相加并赋值给storage。\n用一段话理解这段代码`let storage = Map.add parameter (x+1) storage in`：`拿到当前的storage并将parameter的键值更改并赋值到storage中`\n\n合约最后返回`( ([] : operation list), storage )`, 返回值为`([], [Map [(\"dsds\", 2)]])`。暂不明确最后一句返回的写法为什么这样写。\n\n\n\n*未完待续...*","slug":"2018-08-28-liquidity-note","published":1,"updated":"2019-12-07T07:21:11.005Z","comments":1,"photos":[],"link":"","_id":"ck4ddyism0000phvpe2786d9p","content":"<p><em>上次更新于2018-08-28</em></p>\n<a id=\"more\"></a>\n<h2 id=\"doc\"><a class=\"markdownIt-Anchor\" href=\"#doc\"></a> Doc</h2>\n<p><a href=\"https://tezos.gitlab.io/zeronet/whitedoc/michelson.html\" target=\"_blank\" rel=\"noopener\">Michelson</a><br />\n<a href=\"http://www.liquidity-lang.org/doc/\" target=\"_blank\" rel=\"noopener\">Liquidity</a></p>\n<h2 id=\"语法\"><a class=\"markdownIt-Anchor\" href=\"#语法\"></a> 语法</h2>\n<p>智能合约接收两个参数，分别为<code>parameter</code>和<code>storage</code>, 每一个参数必须与智能合约接入点<code>main</code>中<code>parameter</code>和<code>storage</code>的type相符。<br />\n例如下面的智能合约，<code>parameter</code>的type为<code>string</code>,<code>storage</code>的type为<code>map</code>,语法为<code>Map [(&quot;&quot;, 0)]</code></p>\n<p>liquidity demo code:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\">[%%version 0.3]</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\">let%init storage (myname : string) &#x3D;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">4</span></pre></td><td class=\"code\"><pre><span class=\"line\">  Map.add myname 0 (Map [&quot;ocaml&quot;, 0; &quot;pro&quot;, 0])</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">5</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">6</span></pre></td><td class=\"code\"><pre><span class=\"line\">let%entry main</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">7</span></pre></td><td class=\"code\"><pre><span class=\"line\">    (parameter : string)</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">8</span></pre></td><td class=\"code\"><pre><span class=\"line\">    (storage : (string, int) map) &#x3D;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">9</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">10</span></pre></td><td class=\"code\"><pre><span class=\"line\">  let amount &#x3D; Current.amount() in</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">11</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">12</span></pre></td><td class=\"code\"><pre><span class=\"line\">  if amount &lt; 5.00tz then</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">13</span></pre></td><td class=\"code\"><pre><span class=\"line\">    Current.failwith &quot;Not enough money, at least 5tz to vote&quot;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">14</span></pre></td><td class=\"code\"><pre><span class=\"line\">  else</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">15</span></pre></td><td class=\"code\"><pre><span class=\"line\">    match Map.find parameter storage with</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">16</span></pre></td><td class=\"code\"><pre><span class=\"line\">    | None -&gt; Current.failwith &quot;Bad vote&quot;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">17</span></pre></td><td class=\"code\"><pre><span class=\"line\">    | Some x -&gt;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">18</span></pre></td><td class=\"code\"><pre><span class=\"line\">        let storage &#x3D; Map.add parameter (x+1) storage in</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">19</span></pre></td><td class=\"code\"><pre><span class=\"line\">        ( ([] : operation list), storage )</span></pre></td></tr></table></figure>\n<p>上面这个智能合约是一个投票相关的只能合约，用户可以投票给storage中现有的队伍。<br />\n<code>parameter</code>是队伍的名字，<code>storage</code>是初始智能合约所具有的队伍列表。<br />\n当合约从<code>main</code>进入后，会用<code>Current.amount()</code>提取到当前用户呼叫此只能合约所携带的Tezos金额，当小于5个tezos时会判定失败跳错，反之进入else判定。</p>\n<p><code>match Map.find parameter storage with</code> 这是一个liquidity的match语句，结合生成的Michelson，</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\">DUUP @storage ;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\">DUUP @parameter ;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\">GET ;</span></pre></td></tr></table></figure>\n<p>我们发现<code>Map.find parameter storage</code>是在storage里面查找是否有parameter对应的这一项，在Michelson中是将storage和parameter分别复制在stack上然后用GET判定。如果找不到结果，则进入<code>None</code>状态，这个合约所执行的代码是挑错，并返回“Bad Vote”。可见None更像是try-catch语法中的catch，用于处理用户错误状态。<br />\n如果判定成功，我们进入下一步。<br />\n<code>let storage = Map.add parameter (x+1) storage in</code> 是将Map中拿到parameter的值并加1，然后赋值给storage。<br />\n对应的Michelson代码:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\">DUUUP @storage ;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\">PUSH</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">4</span></pre></td><td class=\"code\"><pre><span class=\"line\">    int</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">5</span></pre></td><td class=\"code\"><pre><span class=\"line\">    1 ;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">6</span></pre></td><td class=\"code\"><pre><span class=\"line\">DUUUP @x ;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">7</span></pre></td><td class=\"code\"><pre><span class=\"line\">ADD ;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">8</span></pre></td><td class=\"code\"><pre><span class=\"line\">DUUUUP @parameter ;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">9</span></pre></td><td class=\"code\"><pre><span class=\"line\">DIP</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">10</span></pre></td><td class=\"code\"><pre><span class=\"line\">    &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">11</span></pre></td><td class=\"code\"><pre><span class=\"line\">    SOME ;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">12</span></pre></td><td class=\"code\"><pre><span class=\"line\">    &#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">13</span></pre></td><td class=\"code\"><pre><span class=\"line\">    ;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">14</span></pre></td><td class=\"code\"><pre><span class=\"line\">DIIIP</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">15</span></pre></td><td class=\"code\"><pre><span class=\"line\">    &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">16</span></pre></td><td class=\"code\"><pre><span class=\"line\">    DROP ;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">17</span></pre></td><td class=\"code\"><pre><span class=\"line\">    &#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">18</span></pre></td><td class=\"code\"><pre><span class=\"line\">    ;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">19</span></pre></td><td class=\"code\"><pre><span class=\"line\">UPDATE @storage ;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">20</span></pre></td><td class=\"code\"><pre><span class=\"line\">NIL</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">21</span></pre></td><td class=\"code\"><pre><span class=\"line\">    operation</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">22</span></pre></td><td class=\"code\"><pre><span class=\"line\">    ;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">23</span></pre></td><td class=\"code\"><pre><span class=\"line\">PAIR ;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">24</span></pre></td><td class=\"code\"><pre><span class=\"line\">&#125;</span></pre></td></tr></table></figure>\n<p>首先复制整个storage入栈, 并把即将要变化的值push进栈(这里对应(x+1)中的1)。你可以试着更改(x+n)中n的值并编译成Michelson。发现这个值确实对应的是<code>PUSH int 1</code>这段代码。此时将@x复制入栈并相加。这里的@x对应的是 <code>Some x</code>的值，名称随意，x是用之前match语句取回的storage中对应parameter的值。然后将目前的值与1相加并赋值给storage。<br />\n用一段话理解这段代码<code>let storage = Map.add parameter (x+1) storage in</code>：<code>拿到当前的storage并将parameter的键值更改并赋值到storage中</code></p>\n<p>合约最后返回<code>( ([] : operation list), storage )</code>, 返回值为<code>([], [Map [(&quot;dsds&quot;, 2)]])</code>。暂不明确最后一句返回的写法为什么这样写。</p>\n<p><em>未完待续…</em></p>\n<!-- flag of hidden posts -->","site":{"data":{}},"excerpt":"<p><em>上次更新于2018-08-28</em></p>","more":"<h2 id=\"doc\"><a class=\"markdownIt-Anchor\" href=\"#doc\"></a> Doc</h2>\n<p><a href=\"https://tezos.gitlab.io/zeronet/whitedoc/michelson.html\" target=\"_blank\" rel=\"noopener\">Michelson</a><br />\n<a href=\"http://www.liquidity-lang.org/doc/\" target=\"_blank\" rel=\"noopener\">Liquidity</a></p>\n<h2 id=\"语法\"><a class=\"markdownIt-Anchor\" href=\"#语法\"></a> 语法</h2>\n<p>智能合约接收两个参数，分别为<code>parameter</code>和<code>storage</code>, 每一个参数必须与智能合约接入点<code>main</code>中<code>parameter</code>和<code>storage</code>的type相符。<br />\n例如下面的智能合约，<code>parameter</code>的type为<code>string</code>,<code>storage</code>的type为<code>map</code>,语法为<code>Map [(&quot;&quot;, 0)]</code></p>\n<p>liquidity demo code:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\">[%%version 0.3]</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\">let%init storage (myname : string) &#x3D;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">4</span></pre></td><td class=\"code\"><pre><span class=\"line\">  Map.add myname 0 (Map [&quot;ocaml&quot;, 0; &quot;pro&quot;, 0])</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">5</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">6</span></pre></td><td class=\"code\"><pre><span class=\"line\">let%entry main</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">7</span></pre></td><td class=\"code\"><pre><span class=\"line\">    (parameter : string)</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">8</span></pre></td><td class=\"code\"><pre><span class=\"line\">    (storage : (string, int) map) &#x3D;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">9</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">10</span></pre></td><td class=\"code\"><pre><span class=\"line\">  let amount &#x3D; Current.amount() in</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">11</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">12</span></pre></td><td class=\"code\"><pre><span class=\"line\">  if amount &lt; 5.00tz then</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">13</span></pre></td><td class=\"code\"><pre><span class=\"line\">    Current.failwith &quot;Not enough money, at least 5tz to vote&quot;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">14</span></pre></td><td class=\"code\"><pre><span class=\"line\">  else</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">15</span></pre></td><td class=\"code\"><pre><span class=\"line\">    match Map.find parameter storage with</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">16</span></pre></td><td class=\"code\"><pre><span class=\"line\">    | None -&gt; Current.failwith &quot;Bad vote&quot;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">17</span></pre></td><td class=\"code\"><pre><span class=\"line\">    | Some x -&gt;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">18</span></pre></td><td class=\"code\"><pre><span class=\"line\">        let storage &#x3D; Map.add parameter (x+1) storage in</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">19</span></pre></td><td class=\"code\"><pre><span class=\"line\">        ( ([] : operation list), storage )</span></pre></td></tr></table></figure>\n<p>上面这个智能合约是一个投票相关的只能合约，用户可以投票给storage中现有的队伍。<br />\n<code>parameter</code>是队伍的名字，<code>storage</code>是初始智能合约所具有的队伍列表。<br />\n当合约从<code>main</code>进入后，会用<code>Current.amount()</code>提取到当前用户呼叫此只能合约所携带的Tezos金额，当小于5个tezos时会判定失败跳错，反之进入else判定。</p>\n<p><code>match Map.find parameter storage with</code> 这是一个liquidity的match语句，结合生成的Michelson，</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\">DUUP @storage ;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\">DUUP @parameter ;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\">GET ;</span></pre></td></tr></table></figure>\n<p>我们发现<code>Map.find parameter storage</code>是在storage里面查找是否有parameter对应的这一项，在Michelson中是将storage和parameter分别复制在stack上然后用GET判定。如果找不到结果，则进入<code>None</code>状态，这个合约所执行的代码是挑错，并返回“Bad Vote”。可见None更像是try-catch语法中的catch，用于处理用户错误状态。<br />\n如果判定成功，我们进入下一步。<br />\n<code>let storage = Map.add parameter (x+1) storage in</code> 是将Map中拿到parameter的值并加1，然后赋值给storage。<br />\n对应的Michelson代码:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\">DUUUP @storage ;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\">PUSH</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">4</span></pre></td><td class=\"code\"><pre><span class=\"line\">    int</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">5</span></pre></td><td class=\"code\"><pre><span class=\"line\">    1 ;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">6</span></pre></td><td class=\"code\"><pre><span class=\"line\">DUUUP @x ;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">7</span></pre></td><td class=\"code\"><pre><span class=\"line\">ADD ;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">8</span></pre></td><td class=\"code\"><pre><span class=\"line\">DUUUUP @parameter ;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">9</span></pre></td><td class=\"code\"><pre><span class=\"line\">DIP</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">10</span></pre></td><td class=\"code\"><pre><span class=\"line\">    &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">11</span></pre></td><td class=\"code\"><pre><span class=\"line\">    SOME ;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">12</span></pre></td><td class=\"code\"><pre><span class=\"line\">    &#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">13</span></pre></td><td class=\"code\"><pre><span class=\"line\">    ;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">14</span></pre></td><td class=\"code\"><pre><span class=\"line\">DIIIP</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">15</span></pre></td><td class=\"code\"><pre><span class=\"line\">    &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">16</span></pre></td><td class=\"code\"><pre><span class=\"line\">    DROP ;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">17</span></pre></td><td class=\"code\"><pre><span class=\"line\">    &#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">18</span></pre></td><td class=\"code\"><pre><span class=\"line\">    ;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">19</span></pre></td><td class=\"code\"><pre><span class=\"line\">UPDATE @storage ;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">20</span></pre></td><td class=\"code\"><pre><span class=\"line\">NIL</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">21</span></pre></td><td class=\"code\"><pre><span class=\"line\">    operation</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">22</span></pre></td><td class=\"code\"><pre><span class=\"line\">    ;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">23</span></pre></td><td class=\"code\"><pre><span class=\"line\">PAIR ;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">24</span></pre></td><td class=\"code\"><pre><span class=\"line\">&#125;</span></pre></td></tr></table></figure>\n<p>首先复制整个storage入栈, 并把即将要变化的值push进栈(这里对应(x+1)中的1)。你可以试着更改(x+n)中n的值并编译成Michelson。发现这个值确实对应的是<code>PUSH int 1</code>这段代码。此时将@x复制入栈并相加。这里的@x对应的是 <code>Some x</code>的值，名称随意，x是用之前match语句取回的storage中对应parameter的值。然后将目前的值与1相加并赋值给storage。<br />\n用一段话理解这段代码<code>let storage = Map.add parameter (x+1) storage in</code>：<code>拿到当前的storage并将parameter的键值更改并赋值到storage中</code></p>\n<p>合约最后返回<code>( ([] : operation list), storage )</code>, 返回值为<code>([], [Map [(&quot;dsds&quot;, 2)]])</code>。暂不明确最后一句返回的写法为什么这样写。</p>\n<p><em>未完待续…</em></p>"},{"layout":"post","title":"Liquidity对赌智能合约练习","description":null,"keywords":"liquidity, tezos, smart contract","date":"2018-08-24T16:00:00.000Z","hidden":true,"_content":"最近对于Tezos的智能合约比较感兴趣，但是他们用的语言非常多的坑。总结来说并不是一门面向开发者友好的语言。\n\n<!-- more -->\n\n[Liquidity编辑器](http://www.liquidity-lang.org/zeronet/)\n\n开始\n----\n合约最大的挑战是创造一个密码学安全的随机数，但由于随机数很难在链上创造出来，我们需要要求参与者每人提供一个数再结合起来。两个数结合起来的结果用于判定胜负。\n但这个方法显然有很大的缺点，因为判定算法是公开的，所以造成了第二个人能决定游戏的胜负。为了解决这个问题，我们要求游戏参与者根据自己的数字算一个哈希值，并且预先提交他们。所有人哈希值都提交后，再要求他们提交原本的数字，胜负就会被判定。\n因为哈希是单向的，所以输入的数字很难被算出，游戏参与者几乎不可能在提交自己数字之前算出对方已经提供的哈希值来影响结果。\n\n数据类型\n---------\n\n我们定义游戏参与者的数据类型如下，在Liquidity中，这个数据类型叫`record`, 非常像Go语言中的`struct`, 它包含一些数据字段。\n```\ntype player = {\n  k : key;\n  h : bytes;\n  po : nat option;\n}\n```\n\n变量包含所有可能变量类型的一种\n```\ntype p =\n  | Register of bytes\n  | Preimage of nat\n  | Resolve of unit\n```\n\n合约进入点\n```\nlet%entry main\n    (parameter : p)\n    (storage : s)\n  : operation list * s =\n  (* 合约代码在这里 *)\n```\n这里几个需要注意的点：\n1. parameter和storage的数据类型必须明确指明\n2. 返回的是一个tuple类型，包括一个内部操作的list和storage的数据类型\n\n参数的类型可以在函数外定义，但是需要在main函数之前被声明。当我们在写liquidity智能合约代码的时候，最好的方法是先不要用function，而是直接把逻辑关系用一整段代码表示出来。因为编译后的函数会占用很大的空间，尤其是当他们有很多参数的时候。\n\n\n###游戏数据存储\n\n```\ntype s = {\n  one : player option;\n  two : player option;\n}\n```\n因为合约的开始并没有参与者，所以要规定option type，play是我们上面自己定义的type。option type可以包括一个定义的数据(这里是`play`)或者`None`类型。我们可以通过`math`来确定当前的数据存储类型。\n\n```\n(* match statement *)\nbegin match storage.one with\n| None -> (* do something *)\n| Some x -> (* do something else *)\nend\n```\n\n我们之前定义了一个数据类型`p`,这个类型可以是 Rigister, Preimage, Resolve类型的一种。想一下我们的游戏进程。首先，游戏参与者进入游戏，并用一个哈希值注册进入，这是p的类型为Register; 当他公开自己的数字的时候，这时p的类型变为nat；最后当游戏胜负判定后，p的类型转变为Resolve。因为三种类型不可以同时存在，所以我们可以用一个变量类型代表所有的可能类型。\n\n变量会被编译器编译为Michelson中的 `or`. `record` 和 `tuple` 则是被编译为`pair`\n\n我们可以用Current.sender ()来辨别合约参与者。()这里是代表的unit类型，是一个占位符，用于我们不需要任何数据类型的时候(有些像别的语言中void的作用)。\n\nCurrent.sender gives us an address, which can be compared to other addresses. If we want to transfer to the contract at that address, we have to let the compiler know what parameter type it should expect with Contract.at. If the address contains a contract with another parameter type, we will get a runtime error.\n\n\n但两个参与者注册后，他们需要提供自己的数字。数字会被根据已提交的哈希值来确认是否正确并存入storage。我们可以用之前保存的地址来确定只有合约参与人可以查看他们提供的数字。\n\n\n写一下吧\n----------\n合约执行的时候，需要按照match来执行合约，如果match不到则会报错。如果操作正确，我们会保存玩家地址并且更新对应的storage数据。\n\nstorage可以被直接更改，或者可以新建一个storage然后跟着internal operations返回出去。\n\n我们用`xor`来合并两个数字。因为xor对于bytes无效，所以我们使用数字来判定胜负。我们把结果除以2然后查余。因为分母不能为0，当分母为0的时候，返回的operation type为`None`。当除法合规时，则会返回`Some (result, remainder)`。根据余数我们来分辨哪个游戏参与者获胜。完整代码在下方，可以用[Liquidity编辑器](http://www.liquidity-lang.org/zeronet/)编译。可以使用test或debug深入了解代码。\n\n\n部署智能合约到区块链\n--------------------\n部署Michelson合约时，我们需要init storage。\n```\nlet%init storage = {\n  one = (None : player option);\n  two = (None : player option);\n}\n```\n将合约编译为Michelson，你可以直接在Liquidity上面部署到区块链上面。\nspendable和delegatable两个选项决定这个合约里的钱是否能被合约创建人花费。如果设置了spendable，那么合约创建人则可以花费智能合约里的tezzies。如果你在写一个面向大众的智能合约的时候，你可能不希望将它设置为spendable，因为合约因为里面的钱可以随意花费而失去了公信力。delegatable为是否可以将合约里的钱委托给烘焙。\n\n当合约部署后。你可以在`Examine`里面查看合约的storage，并可以在`Call`里面呼叫合约.\n\n\n\n\n\n```\ntype p =\n  | Register of bytes\n  | Preimage of nat\n  | Resolve of unit\n```\n\n\n此练习参考Martin Pospech的[文章](https://martin.pospech.cz/post/getting_started_with_liquidity/)","source":"_posts/2018-08-25-liquidity-contract.md","raw":"---\nlayout: post\ntitle: Liquidity对赌智能合约练习\ncategories: Liquidity\ndescription: \nkeywords: liquidity, tezos, smart contract\ndate: 2018-08-25 00:00:00\nhidden: true\n---\n最近对于Tezos的智能合约比较感兴趣，但是他们用的语言非常多的坑。总结来说并不是一门面向开发者友好的语言。\n\n<!-- more -->\n\n[Liquidity编辑器](http://www.liquidity-lang.org/zeronet/)\n\n开始\n----\n合约最大的挑战是创造一个密码学安全的随机数，但由于随机数很难在链上创造出来，我们需要要求参与者每人提供一个数再结合起来。两个数结合起来的结果用于判定胜负。\n但这个方法显然有很大的缺点，因为判定算法是公开的，所以造成了第二个人能决定游戏的胜负。为了解决这个问题，我们要求游戏参与者根据自己的数字算一个哈希值，并且预先提交他们。所有人哈希值都提交后，再要求他们提交原本的数字，胜负就会被判定。\n因为哈希是单向的，所以输入的数字很难被算出，游戏参与者几乎不可能在提交自己数字之前算出对方已经提供的哈希值来影响结果。\n\n数据类型\n---------\n\n我们定义游戏参与者的数据类型如下，在Liquidity中，这个数据类型叫`record`, 非常像Go语言中的`struct`, 它包含一些数据字段。\n```\ntype player = {\n  k : key;\n  h : bytes;\n  po : nat option;\n}\n```\n\n变量包含所有可能变量类型的一种\n```\ntype p =\n  | Register of bytes\n  | Preimage of nat\n  | Resolve of unit\n```\n\n合约进入点\n```\nlet%entry main\n    (parameter : p)\n    (storage : s)\n  : operation list * s =\n  (* 合约代码在这里 *)\n```\n这里几个需要注意的点：\n1. parameter和storage的数据类型必须明确指明\n2. 返回的是一个tuple类型，包括一个内部操作的list和storage的数据类型\n\n参数的类型可以在函数外定义，但是需要在main函数之前被声明。当我们在写liquidity智能合约代码的时候，最好的方法是先不要用function，而是直接把逻辑关系用一整段代码表示出来。因为编译后的函数会占用很大的空间，尤其是当他们有很多参数的时候。\n\n\n###游戏数据存储\n\n```\ntype s = {\n  one : player option;\n  two : player option;\n}\n```\n因为合约的开始并没有参与者，所以要规定option type，play是我们上面自己定义的type。option type可以包括一个定义的数据(这里是`play`)或者`None`类型。我们可以通过`math`来确定当前的数据存储类型。\n\n```\n(* match statement *)\nbegin match storage.one with\n| None -> (* do something *)\n| Some x -> (* do something else *)\nend\n```\n\n我们之前定义了一个数据类型`p`,这个类型可以是 Rigister, Preimage, Resolve类型的一种。想一下我们的游戏进程。首先，游戏参与者进入游戏，并用一个哈希值注册进入，这是p的类型为Register; 当他公开自己的数字的时候，这时p的类型变为nat；最后当游戏胜负判定后，p的类型转变为Resolve。因为三种类型不可以同时存在，所以我们可以用一个变量类型代表所有的可能类型。\n\n变量会被编译器编译为Michelson中的 `or`. `record` 和 `tuple` 则是被编译为`pair`\n\n我们可以用Current.sender ()来辨别合约参与者。()这里是代表的unit类型，是一个占位符，用于我们不需要任何数据类型的时候(有些像别的语言中void的作用)。\n\nCurrent.sender gives us an address, which can be compared to other addresses. If we want to transfer to the contract at that address, we have to let the compiler know what parameter type it should expect with Contract.at. If the address contains a contract with another parameter type, we will get a runtime error.\n\n\n但两个参与者注册后，他们需要提供自己的数字。数字会被根据已提交的哈希值来确认是否正确并存入storage。我们可以用之前保存的地址来确定只有合约参与人可以查看他们提供的数字。\n\n\n写一下吧\n----------\n合约执行的时候，需要按照match来执行合约，如果match不到则会报错。如果操作正确，我们会保存玩家地址并且更新对应的storage数据。\n\nstorage可以被直接更改，或者可以新建一个storage然后跟着internal operations返回出去。\n\n我们用`xor`来合并两个数字。因为xor对于bytes无效，所以我们使用数字来判定胜负。我们把结果除以2然后查余。因为分母不能为0，当分母为0的时候，返回的operation type为`None`。当除法合规时，则会返回`Some (result, remainder)`。根据余数我们来分辨哪个游戏参与者获胜。完整代码在下方，可以用[Liquidity编辑器](http://www.liquidity-lang.org/zeronet/)编译。可以使用test或debug深入了解代码。\n\n\n部署智能合约到区块链\n--------------------\n部署Michelson合约时，我们需要init storage。\n```\nlet%init storage = {\n  one = (None : player option);\n  two = (None : player option);\n}\n```\n将合约编译为Michelson，你可以直接在Liquidity上面部署到区块链上面。\nspendable和delegatable两个选项决定这个合约里的钱是否能被合约创建人花费。如果设置了spendable，那么合约创建人则可以花费智能合约里的tezzies。如果你在写一个面向大众的智能合约的时候，你可能不希望将它设置为spendable，因为合约因为里面的钱可以随意花费而失去了公信力。delegatable为是否可以将合约里的钱委托给烘焙。\n\n当合约部署后。你可以在`Examine`里面查看合约的storage，并可以在`Call`里面呼叫合约.\n\n\n\n\n\n```\ntype p =\n  | Register of bytes\n  | Preimage of nat\n  | Resolve of unit\n```\n\n\n此练习参考Martin Pospech的[文章](https://martin.pospech.cz/post/getting_started_with_liquidity/)","slug":"2018-08-25-liquidity-contract","published":1,"updated":"2019-12-07T07:20:15.201Z","comments":1,"photos":[],"link":"","_id":"ck4ddyisy0002phvpb1erbaur","content":"<p>最近对于Tezos的智能合约比较感兴趣，但是他们用的语言非常多的坑。总结来说并不是一门面向开发者友好的语言。</p>\n<a id=\"more\"></a>\n<p><a href=\"http://www.liquidity-lang.org/zeronet/\" target=\"_blank\" rel=\"noopener\">Liquidity编辑器</a></p>\n<h2 id=\"开始\"><a class=\"markdownIt-Anchor\" href=\"#开始\"></a> 开始</h2>\n<p>合约最大的挑战是创造一个密码学安全的随机数，但由于随机数很难在链上创造出来，我们需要要求参与者每人提供一个数再结合起来。两个数结合起来的结果用于判定胜负。<br />\n但这个方法显然有很大的缺点，因为判定算法是公开的，所以造成了第二个人能决定游戏的胜负。为了解决这个问题，我们要求游戏参与者根据自己的数字算一个哈希值，并且预先提交他们。所有人哈希值都提交后，再要求他们提交原本的数字，胜负就会被判定。<br />\n因为哈希是单向的，所以输入的数字很难被算出，游戏参与者几乎不可能在提交自己数字之前算出对方已经提供的哈希值来影响结果。</p>\n<h2 id=\"数据类型\"><a class=\"markdownIt-Anchor\" href=\"#数据类型\"></a> 数据类型</h2>\n<p>我们定义游戏参与者的数据类型如下，在Liquidity中，这个数据类型叫<code>record</code>, 非常像Go语言中的<code>struct</code>, 它包含一些数据字段。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\">type player &#x3D; &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\">  k : key;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\">  h : bytes;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">4</span></pre></td><td class=\"code\"><pre><span class=\"line\">  po : nat option;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">5</span></pre></td><td class=\"code\"><pre><span class=\"line\">&#125;</span></pre></td></tr></table></figure>\n<p>变量包含所有可能变量类型的一种</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\">type p &#x3D;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\">  | Register of bytes</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\">  | Preimage of nat</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">4</span></pre></td><td class=\"code\"><pre><span class=\"line\">  | Resolve of unit</span></pre></td></tr></table></figure>\n<p>合约进入点</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\">let%entry main</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\">    (parameter : p)</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\">    (storage : s)</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">4</span></pre></td><td class=\"code\"><pre><span class=\"line\">  : operation list * s &#x3D;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">5</span></pre></td><td class=\"code\"><pre><span class=\"line\">  (* 合约代码在这里 *)</span></pre></td></tr></table></figure>\n<p>这里几个需要注意的点：</p>\n<ol>\n<li>parameter和storage的数据类型必须明确指明</li>\n<li>返回的是一个tuple类型，包括一个内部操作的list和storage的数据类型</li>\n</ol>\n<p>参数的类型可以在函数外定义，但是需要在main函数之前被声明。当我们在写liquidity智能合约代码的时候，最好的方法是先不要用function，而是直接把逻辑关系用一整段代码表示出来。因为编译后的函数会占用很大的空间，尤其是当他们有很多参数的时候。</p>\n<p>###游戏数据存储</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\">type s &#x3D; &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\">  one : player option;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\">  two : player option;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">4</span></pre></td><td class=\"code\"><pre><span class=\"line\">&#125;</span></pre></td></tr></table></figure>\n<p>因为合约的开始并没有参与者，所以要规定option type，play是我们上面自己定义的type。option type可以包括一个定义的数据(这里是<code>play</code>)或者<code>None</code>类型。我们可以通过<code>math</code>来确定当前的数据存储类型。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\">(* match statement *)</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\">begin match storage.one with</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\">| None -&gt; (* do something *)</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">4</span></pre></td><td class=\"code\"><pre><span class=\"line\">| Some x -&gt; (* do something else *)</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">5</span></pre></td><td class=\"code\"><pre><span class=\"line\">end</span></pre></td></tr></table></figure>\n<p>我们之前定义了一个数据类型<code>p</code>,这个类型可以是 Rigister, Preimage, Resolve类型的一种。想一下我们的游戏进程。首先，游戏参与者进入游戏，并用一个哈希值注册进入，这是p的类型为Register; 当他公开自己的数字的时候，这时p的类型变为nat；最后当游戏胜负判定后，p的类型转变为Resolve。因为三种类型不可以同时存在，所以我们可以用一个变量类型代表所有的可能类型。</p>\n<p>变量会被编译器编译为Michelson中的 <code>or</code>. <code>record</code> 和 <code>tuple</code> 则是被编译为<code>pair</code></p>\n<p>我们可以用Current.sender ()来辨别合约参与者。()这里是代表的unit类型，是一个占位符，用于我们不需要任何数据类型的时候(有些像别的语言中void的作用)。</p>\n<p>Current.sender gives us an address, which can be compared to other addresses. If we want to transfer to the contract at that address, we have to let the compiler know what parameter type it should expect with <a href=\"http://Contract.at\" target=\"_blank\" rel=\"noopener\">Contract.at</a>. If the address contains a contract with another parameter type, we will get a runtime error.</p>\n<p>但两个参与者注册后，他们需要提供自己的数字。数字会被根据已提交的哈希值来确认是否正确并存入storage。我们可以用之前保存的地址来确定只有合约参与人可以查看他们提供的数字。</p>\n<h2 id=\"写一下吧\"><a class=\"markdownIt-Anchor\" href=\"#写一下吧\"></a> 写一下吧</h2>\n<p>合约执行的时候，需要按照match来执行合约，如果match不到则会报错。如果操作正确，我们会保存玩家地址并且更新对应的storage数据。</p>\n<p>storage可以被直接更改，或者可以新建一个storage然后跟着internal operations返回出去。</p>\n<p>我们用<code>xor</code>来合并两个数字。因为xor对于bytes无效，所以我们使用数字来判定胜负。我们把结果除以2然后查余。因为分母不能为0，当分母为0的时候，返回的operation type为<code>None</code>。当除法合规时，则会返回<code>Some (result, remainder)</code>。根据余数我们来分辨哪个游戏参与者获胜。完整代码在下方，可以用<a href=\"http://www.liquidity-lang.org/zeronet/\" target=\"_blank\" rel=\"noopener\">Liquidity编辑器</a>编译。可以使用test或debug深入了解代码。</p>\n<h2 id=\"部署智能合约到区块链\"><a class=\"markdownIt-Anchor\" href=\"#部署智能合约到区块链\"></a> 部署智能合约到区块链</h2>\n<p>部署Michelson合约时，我们需要init storage。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\">let%init storage &#x3D; &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\">  one &#x3D; (None : player option);</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\">  two &#x3D; (None : player option);</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">4</span></pre></td><td class=\"code\"><pre><span class=\"line\">&#125;</span></pre></td></tr></table></figure>\n<p>将合约编译为Michelson，你可以直接在Liquidity上面部署到区块链上面。<br />\nspendable和delegatable两个选项决定这个合约里的钱是否能被合约创建人花费。如果设置了spendable，那么合约创建人则可以花费智能合约里的tezzies。如果你在写一个面向大众的智能合约的时候，你可能不希望将它设置为spendable，因为合约因为里面的钱可以随意花费而失去了公信力。delegatable为是否可以将合约里的钱委托给烘焙。</p>\n<p>当合约部署后。你可以在<code>Examine</code>里面查看合约的storage，并可以在<code>Call</code>里面呼叫合约.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\">type p &#x3D;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\">  | Register of bytes</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\">  | Preimage of nat</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">4</span></pre></td><td class=\"code\"><pre><span class=\"line\">  | Resolve of unit</span></pre></td></tr></table></figure>\n<p>此练习参考Martin Pospech的<a href=\"https://martin.pospech.cz/post/getting_started_with_liquidity/\" target=\"_blank\" rel=\"noopener\">文章</a></p>\n<!-- flag of hidden posts -->","site":{"data":{}},"excerpt":"<p>最近对于Tezos的智能合约比较感兴趣，但是他们用的语言非常多的坑。总结来说并不是一门面向开发者友好的语言。</p>","more":"<p><a href=\"http://www.liquidity-lang.org/zeronet/\" target=\"_blank\" rel=\"noopener\">Liquidity编辑器</a></p>\n<h2 id=\"开始\"><a class=\"markdownIt-Anchor\" href=\"#开始\"></a> 开始</h2>\n<p>合约最大的挑战是创造一个密码学安全的随机数，但由于随机数很难在链上创造出来，我们需要要求参与者每人提供一个数再结合起来。两个数结合起来的结果用于判定胜负。<br />\n但这个方法显然有很大的缺点，因为判定算法是公开的，所以造成了第二个人能决定游戏的胜负。为了解决这个问题，我们要求游戏参与者根据自己的数字算一个哈希值，并且预先提交他们。所有人哈希值都提交后，再要求他们提交原本的数字，胜负就会被判定。<br />\n因为哈希是单向的，所以输入的数字很难被算出，游戏参与者几乎不可能在提交自己数字之前算出对方已经提供的哈希值来影响结果。</p>\n<h2 id=\"数据类型\"><a class=\"markdownIt-Anchor\" href=\"#数据类型\"></a> 数据类型</h2>\n<p>我们定义游戏参与者的数据类型如下，在Liquidity中，这个数据类型叫<code>record</code>, 非常像Go语言中的<code>struct</code>, 它包含一些数据字段。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\">type player &#x3D; &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\">  k : key;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\">  h : bytes;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">4</span></pre></td><td class=\"code\"><pre><span class=\"line\">  po : nat option;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">5</span></pre></td><td class=\"code\"><pre><span class=\"line\">&#125;</span></pre></td></tr></table></figure>\n<p>变量包含所有可能变量类型的一种</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\">type p &#x3D;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\">  | Register of bytes</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\">  | Preimage of nat</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">4</span></pre></td><td class=\"code\"><pre><span class=\"line\">  | Resolve of unit</span></pre></td></tr></table></figure>\n<p>合约进入点</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\">let%entry main</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\">    (parameter : p)</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\">    (storage : s)</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">4</span></pre></td><td class=\"code\"><pre><span class=\"line\">  : operation list * s &#x3D;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">5</span></pre></td><td class=\"code\"><pre><span class=\"line\">  (* 合约代码在这里 *)</span></pre></td></tr></table></figure>\n<p>这里几个需要注意的点：</p>\n<ol>\n<li>parameter和storage的数据类型必须明确指明</li>\n<li>返回的是一个tuple类型，包括一个内部操作的list和storage的数据类型</li>\n</ol>\n<p>参数的类型可以在函数外定义，但是需要在main函数之前被声明。当我们在写liquidity智能合约代码的时候，最好的方法是先不要用function，而是直接把逻辑关系用一整段代码表示出来。因为编译后的函数会占用很大的空间，尤其是当他们有很多参数的时候。</p>\n<p>###游戏数据存储</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\">type s &#x3D; &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\">  one : player option;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\">  two : player option;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">4</span></pre></td><td class=\"code\"><pre><span class=\"line\">&#125;</span></pre></td></tr></table></figure>\n<p>因为合约的开始并没有参与者，所以要规定option type，play是我们上面自己定义的type。option type可以包括一个定义的数据(这里是<code>play</code>)或者<code>None</code>类型。我们可以通过<code>math</code>来确定当前的数据存储类型。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\">(* match statement *)</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\">begin match storage.one with</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\">| None -&gt; (* do something *)</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">4</span></pre></td><td class=\"code\"><pre><span class=\"line\">| Some x -&gt; (* do something else *)</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">5</span></pre></td><td class=\"code\"><pre><span class=\"line\">end</span></pre></td></tr></table></figure>\n<p>我们之前定义了一个数据类型<code>p</code>,这个类型可以是 Rigister, Preimage, Resolve类型的一种。想一下我们的游戏进程。首先，游戏参与者进入游戏，并用一个哈希值注册进入，这是p的类型为Register; 当他公开自己的数字的时候，这时p的类型变为nat；最后当游戏胜负判定后，p的类型转变为Resolve。因为三种类型不可以同时存在，所以我们可以用一个变量类型代表所有的可能类型。</p>\n<p>变量会被编译器编译为Michelson中的 <code>or</code>. <code>record</code> 和 <code>tuple</code> 则是被编译为<code>pair</code></p>\n<p>我们可以用Current.sender ()来辨别合约参与者。()这里是代表的unit类型，是一个占位符，用于我们不需要任何数据类型的时候(有些像别的语言中void的作用)。</p>\n<p>Current.sender gives us an address, which can be compared to other addresses. If we want to transfer to the contract at that address, we have to let the compiler know what parameter type it should expect with <a href=\"http://Contract.at\" target=\"_blank\" rel=\"noopener\">Contract.at</a>. If the address contains a contract with another parameter type, we will get a runtime error.</p>\n<p>但两个参与者注册后，他们需要提供自己的数字。数字会被根据已提交的哈希值来确认是否正确并存入storage。我们可以用之前保存的地址来确定只有合约参与人可以查看他们提供的数字。</p>\n<h2 id=\"写一下吧\"><a class=\"markdownIt-Anchor\" href=\"#写一下吧\"></a> 写一下吧</h2>\n<p>合约执行的时候，需要按照match来执行合约，如果match不到则会报错。如果操作正确，我们会保存玩家地址并且更新对应的storage数据。</p>\n<p>storage可以被直接更改，或者可以新建一个storage然后跟着internal operations返回出去。</p>\n<p>我们用<code>xor</code>来合并两个数字。因为xor对于bytes无效，所以我们使用数字来判定胜负。我们把结果除以2然后查余。因为分母不能为0，当分母为0的时候，返回的operation type为<code>None</code>。当除法合规时，则会返回<code>Some (result, remainder)</code>。根据余数我们来分辨哪个游戏参与者获胜。完整代码在下方，可以用<a href=\"http://www.liquidity-lang.org/zeronet/\" target=\"_blank\" rel=\"noopener\">Liquidity编辑器</a>编译。可以使用test或debug深入了解代码。</p>\n<h2 id=\"部署智能合约到区块链\"><a class=\"markdownIt-Anchor\" href=\"#部署智能合约到区块链\"></a> 部署智能合约到区块链</h2>\n<p>部署Michelson合约时，我们需要init storage。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\">let%init storage &#x3D; &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\">  one &#x3D; (None : player option);</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\">  two &#x3D; (None : player option);</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">4</span></pre></td><td class=\"code\"><pre><span class=\"line\">&#125;</span></pre></td></tr></table></figure>\n<p>将合约编译为Michelson，你可以直接在Liquidity上面部署到区块链上面。<br />\nspendable和delegatable两个选项决定这个合约里的钱是否能被合约创建人花费。如果设置了spendable，那么合约创建人则可以花费智能合约里的tezzies。如果你在写一个面向大众的智能合约的时候，你可能不希望将它设置为spendable，因为合约因为里面的钱可以随意花费而失去了公信力。delegatable为是否可以将合约里的钱委托给烘焙。</p>\n<p>当合约部署后。你可以在<code>Examine</code>里面查看合约的storage，并可以在<code>Call</code>里面呼叫合约.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\">type p &#x3D;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\">  | Register of bytes</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\">  | Preimage of nat</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">4</span></pre></td><td class=\"code\"><pre><span class=\"line\">  | Resolve of unit</span></pre></td></tr></table></figure>\n<p>此练习参考Martin Pospech的<a href=\"https://martin.pospech.cz/post/getting_started_with_liquidity/\" target=\"_blank\" rel=\"noopener\">文章</a></p>"},{"layout":"post","title":"P3D合约代码分析","description":"p3d smart contract code breakdown","keywords":"p3d, fomo3d, solidity","date":"2018-08-25T16:00:00.000Z","hidden":true,"_content":"\n前一阵大热的Fomo3D开创了智能合约庞氏骗局的先河，开创性的玩法让大量资金疯狂涌入这个游戏。F3D的头奖现已开出，结局是一名黑客利用区块内Gas限量的特性堵塞区块从而不让其他交易写入区块，最后成功拿走千万大奖。黑客技术分析改天再谈, 今天我们来深入分析一下P3D这个用户股份合约的内容。\n\n<!-- more -->\n\n合约结构\n-------\n\n```\ncontract Hourglass {\n    modifier onlyBagholders()\n    modifier onlyStronghands()\n    modifier onlyAdministrator()\n\n    modifier antiEarlyWhale(uint256 _amountOfEthereum)\n\n    /*=====================================\n    =            CONFIGURABLES            =\n    =====================================*/\n    string public name = \"PowH3D\";\n    string public symbol = \"P3D\";\n    uint8 constant public decimals = 18;\n    uint8 constant internal dividendFee_ = 10;\n    uint256 constant internal tokenPriceInitial_ = 0.0000001 ether;\n    uint256 constant internal tokenPriceIncremental_ = 0.00000001 ether;\n    uint256 constant internal magnitude = 2**64;\n    \n    // proof of stake (defaults at 100 tokens)\n    uint256 public stakingRequirement = 100e18;\n    \n    // ambassador program\n    mapping(address => bool) internal ambassadors_;\n    uint256 constant internal ambassadorMaxPurchase_ = 1 ether;\n    uint256 constant internal ambassadorQuota_ = 20 ether;\n    \n\n    /*================================\n    =            DATASETS            =\n    ================================*/\n    // amount of shares for each address (scaled number)\n    mapping(address => uint256) internal tokenBalanceLedger_;\n    mapping(address => uint256) internal referralBalance_;\n    mapping(address => int256) internal payoutsTo_;\n    mapping(address => uint256) internal ambassadorAccumulatedQuota_;\n    uint256 internal tokenSupply_ = 0;\n    uint256 internal profitPerShare_;\n    \n    // administrator list (see above on what they can do)\n    mapping(bytes32 => bool) public administrators;\n    \n    // when this is set to true, only ambassadors can purchase tokens (this prevents a whale premine, it ensures a fairly distributed upper pyramid)\n    bool public onlyAmbassadors = true;\n    \n    /*=======================================\n    =            PUBLIC FUNCTIONS            =\n    =======================================*/\n    // 合约进入点\n    function Hourglass() public\n\n    function buy(address _referredBy) public payable returns(uint256)\n    // fallback\n    function() payable public\n    function reinvest() onlyStronghands() public\n    function exit() public\n    function withdraw() onlyStronghands() public\n\n    function sell(uint256 _amountOfTokens) onlyBagholders() public\n    function transfer(address _toAddress, uint256 _amountOfTokens) onlyBagholders() public returns(bool)\n\n\n    function totalEthereumBalance() public view\n    function totalSupply() public view returns(uint256)\n    function myTokens() public view returns(uint256)\n\n    function myDividends(bool _includeReferralBonus) public view returns(uint256)\n    function balanceOf(address _customerAddress) view public returns(uint256)\n    function dividendsOf(address _customerAddress) view public returns(uint256)\n    function sellPrice() public view returns(uint256)\n    function buyPrice() public view returns(uint256)\n    function calculateTokensReceived(uint256 _ethereumToSpend) public view returns(uint256)\n    function calculateEthereumReceived(uint256 _tokensToSell) public view returns(uint256)\n\n    /*==========================================\n    =            INTERNAL FUNCTIONS            =\n    ==========================================*/\n    function purchaseTokens(uint256 _incomingEthereum, address _referredBy) antiEarlyWhale(_incomingEthereum) internal returns(uint256)\n    function ethereumToTokens_(uint256 _ethereum) internal view returns(uint256)\n    function tokensToEthereum_(uint256 _tokens) internal view returns(uint256)\n}\n```\n通过函数名称可以大概看出每个函数负责的操作，我们先走一遍流程。\n假设你要购买1 eth价值的P3D代币，这时你需要调用buy()函数，并携带邀请人地址`_referredBy`, 如没有调用则进入fall back 函数。h","source":"_posts/2018-08-26-p3d-contract-analysis.md","raw":"---\nlayout: post\ntitle: P3D合约代码分析\ncategories: [ethereum, Smart Contract, solidity]\ndescription: p3d smart contract code breakdown\nkeywords: p3d, fomo3d, solidity\ndate: 2018-08-26 00:00:00\nhidden: true\n---\n\n前一阵大热的Fomo3D开创了智能合约庞氏骗局的先河，开创性的玩法让大量资金疯狂涌入这个游戏。F3D的头奖现已开出，结局是一名黑客利用区块内Gas限量的特性堵塞区块从而不让其他交易写入区块，最后成功拿走千万大奖。黑客技术分析改天再谈, 今天我们来深入分析一下P3D这个用户股份合约的内容。\n\n<!-- more -->\n\n合约结构\n-------\n\n```\ncontract Hourglass {\n    modifier onlyBagholders()\n    modifier onlyStronghands()\n    modifier onlyAdministrator()\n\n    modifier antiEarlyWhale(uint256 _amountOfEthereum)\n\n    /*=====================================\n    =            CONFIGURABLES            =\n    =====================================*/\n    string public name = \"PowH3D\";\n    string public symbol = \"P3D\";\n    uint8 constant public decimals = 18;\n    uint8 constant internal dividendFee_ = 10;\n    uint256 constant internal tokenPriceInitial_ = 0.0000001 ether;\n    uint256 constant internal tokenPriceIncremental_ = 0.00000001 ether;\n    uint256 constant internal magnitude = 2**64;\n    \n    // proof of stake (defaults at 100 tokens)\n    uint256 public stakingRequirement = 100e18;\n    \n    // ambassador program\n    mapping(address => bool) internal ambassadors_;\n    uint256 constant internal ambassadorMaxPurchase_ = 1 ether;\n    uint256 constant internal ambassadorQuota_ = 20 ether;\n    \n\n    /*================================\n    =            DATASETS            =\n    ================================*/\n    // amount of shares for each address (scaled number)\n    mapping(address => uint256) internal tokenBalanceLedger_;\n    mapping(address => uint256) internal referralBalance_;\n    mapping(address => int256) internal payoutsTo_;\n    mapping(address => uint256) internal ambassadorAccumulatedQuota_;\n    uint256 internal tokenSupply_ = 0;\n    uint256 internal profitPerShare_;\n    \n    // administrator list (see above on what they can do)\n    mapping(bytes32 => bool) public administrators;\n    \n    // when this is set to true, only ambassadors can purchase tokens (this prevents a whale premine, it ensures a fairly distributed upper pyramid)\n    bool public onlyAmbassadors = true;\n    \n    /*=======================================\n    =            PUBLIC FUNCTIONS            =\n    =======================================*/\n    // 合约进入点\n    function Hourglass() public\n\n    function buy(address _referredBy) public payable returns(uint256)\n    // fallback\n    function() payable public\n    function reinvest() onlyStronghands() public\n    function exit() public\n    function withdraw() onlyStronghands() public\n\n    function sell(uint256 _amountOfTokens) onlyBagholders() public\n    function transfer(address _toAddress, uint256 _amountOfTokens) onlyBagholders() public returns(bool)\n\n\n    function totalEthereumBalance() public view\n    function totalSupply() public view returns(uint256)\n    function myTokens() public view returns(uint256)\n\n    function myDividends(bool _includeReferralBonus) public view returns(uint256)\n    function balanceOf(address _customerAddress) view public returns(uint256)\n    function dividendsOf(address _customerAddress) view public returns(uint256)\n    function sellPrice() public view returns(uint256)\n    function buyPrice() public view returns(uint256)\n    function calculateTokensReceived(uint256 _ethereumToSpend) public view returns(uint256)\n    function calculateEthereumReceived(uint256 _tokensToSell) public view returns(uint256)\n\n    /*==========================================\n    =            INTERNAL FUNCTIONS            =\n    ==========================================*/\n    function purchaseTokens(uint256 _incomingEthereum, address _referredBy) antiEarlyWhale(_incomingEthereum) internal returns(uint256)\n    function ethereumToTokens_(uint256 _ethereum) internal view returns(uint256)\n    function tokensToEthereum_(uint256 _tokens) internal view returns(uint256)\n}\n```\n通过函数名称可以大概看出每个函数负责的操作，我们先走一遍流程。\n假设你要购买1 eth价值的P3D代币，这时你需要调用buy()函数，并携带邀请人地址`_referredBy`, 如没有调用则进入fall back 函数。h","slug":"2018-08-26-p3d-contract-analysis","published":1,"updated":"2019-12-07T07:21:52.174Z","comments":1,"photos":[],"link":"","_id":"ck4ddyit30005phvpairohwf0","content":"<p>前一阵大热的Fomo3D开创了智能合约庞氏骗局的先河，开创性的玩法让大量资金疯狂涌入这个游戏。F3D的头奖现已开出，结局是一名黑客利用区块内Gas限量的特性堵塞区块从而不让其他交易写入区块，最后成功拿走千万大奖。黑客技术分析改天再谈, 今天我们来深入分析一下P3D这个用户股份合约的内容。</p>\n<a id=\"more\"></a>\n<h2 id=\"合约结构\"><a class=\"markdownIt-Anchor\" href=\"#合约结构\"></a> 合约结构</h2>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\">contract Hourglass &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\">    modifier onlyBagholders()</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\">    modifier onlyStronghands()</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">4</span></pre></td><td class=\"code\"><pre><span class=\"line\">    modifier onlyAdministrator()</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">5</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">6</span></pre></td><td class=\"code\"><pre><span class=\"line\">    modifier antiEarlyWhale(uint256 _amountOfEthereum)</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">7</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">8</span></pre></td><td class=\"code\"><pre><span class=\"line\">    &#x2F;*&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">9</span></pre></td><td class=\"code\"><pre><span class=\"line\">    &#x3D;            CONFIGURABLES            &#x3D;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">10</span></pre></td><td class=\"code\"><pre><span class=\"line\">    &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;*&#x2F;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">11</span></pre></td><td class=\"code\"><pre><span class=\"line\">    string public name &#x3D; &quot;PowH3D&quot;;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">12</span></pre></td><td class=\"code\"><pre><span class=\"line\">    string public symbol &#x3D; &quot;P3D&quot;;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">13</span></pre></td><td class=\"code\"><pre><span class=\"line\">    uint8 constant public decimals &#x3D; 18;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">14</span></pre></td><td class=\"code\"><pre><span class=\"line\">    uint8 constant internal dividendFee_ &#x3D; 10;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">15</span></pre></td><td class=\"code\"><pre><span class=\"line\">    uint256 constant internal tokenPriceInitial_ &#x3D; 0.0000001 ether;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">16</span></pre></td><td class=\"code\"><pre><span class=\"line\">    uint256 constant internal tokenPriceIncremental_ &#x3D; 0.00000001 ether;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">17</span></pre></td><td class=\"code\"><pre><span class=\"line\">    uint256 constant internal magnitude &#x3D; 2**64;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">18</span></pre></td><td class=\"code\"><pre><span class=\"line\">    </span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">19</span></pre></td><td class=\"code\"><pre><span class=\"line\">    &#x2F;&#x2F; proof of stake (defaults at 100 tokens)</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">20</span></pre></td><td class=\"code\"><pre><span class=\"line\">    uint256 public stakingRequirement &#x3D; 100e18;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">21</span></pre></td><td class=\"code\"><pre><span class=\"line\">    </span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">22</span></pre></td><td class=\"code\"><pre><span class=\"line\">    &#x2F;&#x2F; ambassador program</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">23</span></pre></td><td class=\"code\"><pre><span class=\"line\">    mapping(address &#x3D;&gt; bool) internal ambassadors_;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">24</span></pre></td><td class=\"code\"><pre><span class=\"line\">    uint256 constant internal ambassadorMaxPurchase_ &#x3D; 1 ether;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">25</span></pre></td><td class=\"code\"><pre><span class=\"line\">    uint256 constant internal ambassadorQuota_ &#x3D; 20 ether;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">26</span></pre></td><td class=\"code\"><pre><span class=\"line\">    </span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">27</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">28</span></pre></td><td class=\"code\"><pre><span class=\"line\">    &#x2F;*&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">29</span></pre></td><td class=\"code\"><pre><span class=\"line\">    &#x3D;            DATASETS            &#x3D;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">30</span></pre></td><td class=\"code\"><pre><span class=\"line\">    &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;*&#x2F;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">31</span></pre></td><td class=\"code\"><pre><span class=\"line\">    &#x2F;&#x2F; amount of shares for each address (scaled number)</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">32</span></pre></td><td class=\"code\"><pre><span class=\"line\">    mapping(address &#x3D;&gt; uint256) internal tokenBalanceLedger_;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">33</span></pre></td><td class=\"code\"><pre><span class=\"line\">    mapping(address &#x3D;&gt; uint256) internal referralBalance_;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">34</span></pre></td><td class=\"code\"><pre><span class=\"line\">    mapping(address &#x3D;&gt; int256) internal payoutsTo_;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">35</span></pre></td><td class=\"code\"><pre><span class=\"line\">    mapping(address &#x3D;&gt; uint256) internal ambassadorAccumulatedQuota_;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">36</span></pre></td><td class=\"code\"><pre><span class=\"line\">    uint256 internal tokenSupply_ &#x3D; 0;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">37</span></pre></td><td class=\"code\"><pre><span class=\"line\">    uint256 internal profitPerShare_;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">38</span></pre></td><td class=\"code\"><pre><span class=\"line\">    </span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">39</span></pre></td><td class=\"code\"><pre><span class=\"line\">    &#x2F;&#x2F; administrator list (see above on what they can do)</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">40</span></pre></td><td class=\"code\"><pre><span class=\"line\">    mapping(bytes32 &#x3D;&gt; bool) public administrators;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">41</span></pre></td><td class=\"code\"><pre><span class=\"line\">    </span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">42</span></pre></td><td class=\"code\"><pre><span class=\"line\">    &#x2F;&#x2F; when this is set to true, only ambassadors can purchase tokens (this prevents a whale premine, it ensures a fairly distributed upper pyramid)</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">43</span></pre></td><td class=\"code\"><pre><span class=\"line\">    bool public onlyAmbassadors &#x3D; true;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">44</span></pre></td><td class=\"code\"><pre><span class=\"line\">    </span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">45</span></pre></td><td class=\"code\"><pre><span class=\"line\">    &#x2F;*&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">46</span></pre></td><td class=\"code\"><pre><span class=\"line\">    &#x3D;            PUBLIC FUNCTIONS            &#x3D;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">47</span></pre></td><td class=\"code\"><pre><span class=\"line\">    &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;*&#x2F;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">48</span></pre></td><td class=\"code\"><pre><span class=\"line\">    &#x2F;&#x2F; 合约进入点</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">49</span></pre></td><td class=\"code\"><pre><span class=\"line\">    function Hourglass() public</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">50</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">51</span></pre></td><td class=\"code\"><pre><span class=\"line\">    function buy(address _referredBy) public payable returns(uint256)</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">52</span></pre></td><td class=\"code\"><pre><span class=\"line\">    &#x2F;&#x2F; fallback</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">53</span></pre></td><td class=\"code\"><pre><span class=\"line\">    function() payable public</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">54</span></pre></td><td class=\"code\"><pre><span class=\"line\">    function reinvest() onlyStronghands() public</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">55</span></pre></td><td class=\"code\"><pre><span class=\"line\">    function exit() public</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">56</span></pre></td><td class=\"code\"><pre><span class=\"line\">    function withdraw() onlyStronghands() public</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">57</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">58</span></pre></td><td class=\"code\"><pre><span class=\"line\">    function sell(uint256 _amountOfTokens) onlyBagholders() public</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">59</span></pre></td><td class=\"code\"><pre><span class=\"line\">    function transfer(address _toAddress, uint256 _amountOfTokens) onlyBagholders() public returns(bool)</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">60</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">61</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">62</span></pre></td><td class=\"code\"><pre><span class=\"line\">    function totalEthereumBalance() public view</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">63</span></pre></td><td class=\"code\"><pre><span class=\"line\">    function totalSupply() public view returns(uint256)</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">64</span></pre></td><td class=\"code\"><pre><span class=\"line\">    function myTokens() public view returns(uint256)</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">65</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">66</span></pre></td><td class=\"code\"><pre><span class=\"line\">    function myDividends(bool _includeReferralBonus) public view returns(uint256)</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">67</span></pre></td><td class=\"code\"><pre><span class=\"line\">    function balanceOf(address _customerAddress) view public returns(uint256)</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">68</span></pre></td><td class=\"code\"><pre><span class=\"line\">    function dividendsOf(address _customerAddress) view public returns(uint256)</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">69</span></pre></td><td class=\"code\"><pre><span class=\"line\">    function sellPrice() public view returns(uint256)</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">70</span></pre></td><td class=\"code\"><pre><span class=\"line\">    function buyPrice() public view returns(uint256)</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">71</span></pre></td><td class=\"code\"><pre><span class=\"line\">    function calculateTokensReceived(uint256 _ethereumToSpend) public view returns(uint256)</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">72</span></pre></td><td class=\"code\"><pre><span class=\"line\">    function calculateEthereumReceived(uint256 _tokensToSell) public view returns(uint256)</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">73</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">74</span></pre></td><td class=\"code\"><pre><span class=\"line\">    &#x2F;*&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">75</span></pre></td><td class=\"code\"><pre><span class=\"line\">    &#x3D;            INTERNAL FUNCTIONS            &#x3D;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">76</span></pre></td><td class=\"code\"><pre><span class=\"line\">    &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;*&#x2F;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">77</span></pre></td><td class=\"code\"><pre><span class=\"line\">    function purchaseTokens(uint256 _incomingEthereum, address _referredBy) antiEarlyWhale(_incomingEthereum) internal returns(uint256)</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">78</span></pre></td><td class=\"code\"><pre><span class=\"line\">    function ethereumToTokens_(uint256 _ethereum) internal view returns(uint256)</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">79</span></pre></td><td class=\"code\"><pre><span class=\"line\">    function tokensToEthereum_(uint256 _tokens) internal view returns(uint256)</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">80</span></pre></td><td class=\"code\"><pre><span class=\"line\">&#125;</span></pre></td></tr></table></figure>\n<p>通过函数名称可以大概看出每个函数负责的操作，我们先走一遍流程。<br />\n假设你要购买1 eth价值的P3D代币，这时你需要调用buy()函数，并携带邀请人地址<code>_referredBy</code>, 如没有调用则进入fall back 函数。h</p>\n<!-- flag of hidden posts -->","site":{"data":{}},"excerpt":"<p>前一阵大热的Fomo3D开创了智能合约庞氏骗局的先河，开创性的玩法让大量资金疯狂涌入这个游戏。F3D的头奖现已开出，结局是一名黑客利用区块内Gas限量的特性堵塞区块从而不让其他交易写入区块，最后成功拿走千万大奖。黑客技术分析改天再谈, 今天我们来深入分析一下P3D这个用户股份合约的内容。</p>","more":"<h2 id=\"合约结构\"><a class=\"markdownIt-Anchor\" href=\"#合约结构\"></a> 合约结构</h2>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\">contract Hourglass &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\">    modifier onlyBagholders()</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\">    modifier onlyStronghands()</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">4</span></pre></td><td class=\"code\"><pre><span class=\"line\">    modifier onlyAdministrator()</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">5</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">6</span></pre></td><td class=\"code\"><pre><span class=\"line\">    modifier antiEarlyWhale(uint256 _amountOfEthereum)</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">7</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">8</span></pre></td><td class=\"code\"><pre><span class=\"line\">    &#x2F;*&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">9</span></pre></td><td class=\"code\"><pre><span class=\"line\">    &#x3D;            CONFIGURABLES            &#x3D;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">10</span></pre></td><td class=\"code\"><pre><span class=\"line\">    &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;*&#x2F;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">11</span></pre></td><td class=\"code\"><pre><span class=\"line\">    string public name &#x3D; &quot;PowH3D&quot;;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">12</span></pre></td><td class=\"code\"><pre><span class=\"line\">    string public symbol &#x3D; &quot;P3D&quot;;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">13</span></pre></td><td class=\"code\"><pre><span class=\"line\">    uint8 constant public decimals &#x3D; 18;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">14</span></pre></td><td class=\"code\"><pre><span class=\"line\">    uint8 constant internal dividendFee_ &#x3D; 10;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">15</span></pre></td><td class=\"code\"><pre><span class=\"line\">    uint256 constant internal tokenPriceInitial_ &#x3D; 0.0000001 ether;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">16</span></pre></td><td class=\"code\"><pre><span class=\"line\">    uint256 constant internal tokenPriceIncremental_ &#x3D; 0.00000001 ether;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">17</span></pre></td><td class=\"code\"><pre><span class=\"line\">    uint256 constant internal magnitude &#x3D; 2**64;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">18</span></pre></td><td class=\"code\"><pre><span class=\"line\">    </span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">19</span></pre></td><td class=\"code\"><pre><span class=\"line\">    &#x2F;&#x2F; proof of stake (defaults at 100 tokens)</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">20</span></pre></td><td class=\"code\"><pre><span class=\"line\">    uint256 public stakingRequirement &#x3D; 100e18;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">21</span></pre></td><td class=\"code\"><pre><span class=\"line\">    </span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">22</span></pre></td><td class=\"code\"><pre><span class=\"line\">    &#x2F;&#x2F; ambassador program</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">23</span></pre></td><td class=\"code\"><pre><span class=\"line\">    mapping(address &#x3D;&gt; bool) internal ambassadors_;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">24</span></pre></td><td class=\"code\"><pre><span class=\"line\">    uint256 constant internal ambassadorMaxPurchase_ &#x3D; 1 ether;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">25</span></pre></td><td class=\"code\"><pre><span class=\"line\">    uint256 constant internal ambassadorQuota_ &#x3D; 20 ether;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">26</span></pre></td><td class=\"code\"><pre><span class=\"line\">    </span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">27</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">28</span></pre></td><td class=\"code\"><pre><span class=\"line\">    &#x2F;*&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">29</span></pre></td><td class=\"code\"><pre><span class=\"line\">    &#x3D;            DATASETS            &#x3D;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">30</span></pre></td><td class=\"code\"><pre><span class=\"line\">    &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;*&#x2F;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">31</span></pre></td><td class=\"code\"><pre><span class=\"line\">    &#x2F;&#x2F; amount of shares for each address (scaled number)</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">32</span></pre></td><td class=\"code\"><pre><span class=\"line\">    mapping(address &#x3D;&gt; uint256) internal tokenBalanceLedger_;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">33</span></pre></td><td class=\"code\"><pre><span class=\"line\">    mapping(address &#x3D;&gt; uint256) internal referralBalance_;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">34</span></pre></td><td class=\"code\"><pre><span class=\"line\">    mapping(address &#x3D;&gt; int256) internal payoutsTo_;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">35</span></pre></td><td class=\"code\"><pre><span class=\"line\">    mapping(address &#x3D;&gt; uint256) internal ambassadorAccumulatedQuota_;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">36</span></pre></td><td class=\"code\"><pre><span class=\"line\">    uint256 internal tokenSupply_ &#x3D; 0;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">37</span></pre></td><td class=\"code\"><pre><span class=\"line\">    uint256 internal profitPerShare_;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">38</span></pre></td><td class=\"code\"><pre><span class=\"line\">    </span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">39</span></pre></td><td class=\"code\"><pre><span class=\"line\">    &#x2F;&#x2F; administrator list (see above on what they can do)</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">40</span></pre></td><td class=\"code\"><pre><span class=\"line\">    mapping(bytes32 &#x3D;&gt; bool) public administrators;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">41</span></pre></td><td class=\"code\"><pre><span class=\"line\">    </span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">42</span></pre></td><td class=\"code\"><pre><span class=\"line\">    &#x2F;&#x2F; when this is set to true, only ambassadors can purchase tokens (this prevents a whale premine, it ensures a fairly distributed upper pyramid)</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">43</span></pre></td><td class=\"code\"><pre><span class=\"line\">    bool public onlyAmbassadors &#x3D; true;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">44</span></pre></td><td class=\"code\"><pre><span class=\"line\">    </span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">45</span></pre></td><td class=\"code\"><pre><span class=\"line\">    &#x2F;*&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">46</span></pre></td><td class=\"code\"><pre><span class=\"line\">    &#x3D;            PUBLIC FUNCTIONS            &#x3D;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">47</span></pre></td><td class=\"code\"><pre><span class=\"line\">    &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;*&#x2F;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">48</span></pre></td><td class=\"code\"><pre><span class=\"line\">    &#x2F;&#x2F; 合约进入点</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">49</span></pre></td><td class=\"code\"><pre><span class=\"line\">    function Hourglass() public</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">50</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">51</span></pre></td><td class=\"code\"><pre><span class=\"line\">    function buy(address _referredBy) public payable returns(uint256)</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">52</span></pre></td><td class=\"code\"><pre><span class=\"line\">    &#x2F;&#x2F; fallback</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">53</span></pre></td><td class=\"code\"><pre><span class=\"line\">    function() payable public</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">54</span></pre></td><td class=\"code\"><pre><span class=\"line\">    function reinvest() onlyStronghands() public</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">55</span></pre></td><td class=\"code\"><pre><span class=\"line\">    function exit() public</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">56</span></pre></td><td class=\"code\"><pre><span class=\"line\">    function withdraw() onlyStronghands() public</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">57</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">58</span></pre></td><td class=\"code\"><pre><span class=\"line\">    function sell(uint256 _amountOfTokens) onlyBagholders() public</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">59</span></pre></td><td class=\"code\"><pre><span class=\"line\">    function transfer(address _toAddress, uint256 _amountOfTokens) onlyBagholders() public returns(bool)</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">60</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">61</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">62</span></pre></td><td class=\"code\"><pre><span class=\"line\">    function totalEthereumBalance() public view</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">63</span></pre></td><td class=\"code\"><pre><span class=\"line\">    function totalSupply() public view returns(uint256)</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">64</span></pre></td><td class=\"code\"><pre><span class=\"line\">    function myTokens() public view returns(uint256)</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">65</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">66</span></pre></td><td class=\"code\"><pre><span class=\"line\">    function myDividends(bool _includeReferralBonus) public view returns(uint256)</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">67</span></pre></td><td class=\"code\"><pre><span class=\"line\">    function balanceOf(address _customerAddress) view public returns(uint256)</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">68</span></pre></td><td class=\"code\"><pre><span class=\"line\">    function dividendsOf(address _customerAddress) view public returns(uint256)</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">69</span></pre></td><td class=\"code\"><pre><span class=\"line\">    function sellPrice() public view returns(uint256)</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">70</span></pre></td><td class=\"code\"><pre><span class=\"line\">    function buyPrice() public view returns(uint256)</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">71</span></pre></td><td class=\"code\"><pre><span class=\"line\">    function calculateTokensReceived(uint256 _ethereumToSpend) public view returns(uint256)</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">72</span></pre></td><td class=\"code\"><pre><span class=\"line\">    function calculateEthereumReceived(uint256 _tokensToSell) public view returns(uint256)</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">73</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">74</span></pre></td><td class=\"code\"><pre><span class=\"line\">    &#x2F;*&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">75</span></pre></td><td class=\"code\"><pre><span class=\"line\">    &#x3D;            INTERNAL FUNCTIONS            &#x3D;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">76</span></pre></td><td class=\"code\"><pre><span class=\"line\">    &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;*&#x2F;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">77</span></pre></td><td class=\"code\"><pre><span class=\"line\">    function purchaseTokens(uint256 _incomingEthereum, address _referredBy) antiEarlyWhale(_incomingEthereum) internal returns(uint256)</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">78</span></pre></td><td class=\"code\"><pre><span class=\"line\">    function ethereumToTokens_(uint256 _ethereum) internal view returns(uint256)</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">79</span></pre></td><td class=\"code\"><pre><span class=\"line\">    function tokensToEthereum_(uint256 _tokens) internal view returns(uint256)</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">80</span></pre></td><td class=\"code\"><pre><span class=\"line\">&#125;</span></pre></td></tr></table></figure>\n<p>通过函数名称可以大概看出每个函数负责的操作，我们先走一遍流程。<br />\n假设你要购买1 eth价值的P3D代币，这时你需要调用buy()函数，并携带邀请人地址<code>_referredBy</code>, 如没有调用则进入fall back 函数。h</p>"},{"layout":"post","title":"Nginx设置参考","description":"Nginx config for my reference","keywords":"keyword1, keyword2","date":"2018-08-26T02:43:00.000Z","hidden":true,"_content":"\nNginx配置笔记\n\n<!-- more -->\n\n> 上次更新于2018/10/07\n\n准备工作\n---------------\n### Ubuntu\n```\nsudo apt-get update & sudo apt-get upgrade -y\nsudo apt-get install build-essential libpcre3 libpcre3-dev zlib1g zlib1g-dev libssl-dev libgeoip-dev libgd-dev -y\n```\n> apt-get install apache2-utils 如果想用basic auth\n### Centos\n```\nsudo yum groupinstall \"Development Tools\" -y\nsudo yum install epel-release pcre pcre-devel zlib zlib-devel openssl openssl-devel gd-devel GeoIP GeoIP-devel GeoIP-data -y\n```\n> yum install httpd-tool 如果想用basic auth\n\n### Centos\n\n### 通用\n```\nmkdir ~/nginx_compile && cd ~/nginx_compile\nwget -c https://nginx.org/download/nginx-1.15.5.tar.gz && \ntar -zxvf nginx-1.15.5.tar.gz && rm nginx-1.15.5.tar.gz **\nrm nginx-1.15.5.tar.gz\n```\n\n安装依赖包\n-----------------------------\n### openSSL 1.1.1-pre2\n```\ncd ~/nginx_compile\nwget -c https://www.openssl.org/source/openssl-1.1.1.tar.gz && \ntar zxf openssl-1.1.1.tar.gz && \nrm openssl-1.1.1.tar.gz\n```\n\n### ngx_brotli\nBrotli是由Google的工程師所開發的一項壓縮演算法專案，目前運用在資料壓縮，當然主要是為了加快網頁的傳輸速度。目前Brotli已被各大主流瀏覽器支援，包含Chrome、Firefox、Edge與Safari等等。\n```\ngit clone https://github.com/google/ngx_brotli.git\npushd ngx_brotli\ngit submodule update --init\npopd\n```\n\n### Purge Cache\n\nhttp://labs.frickle.com/nginx_ngx_cache_purge/\n```\nwget http://labs.frickle.com/files/ngx_cache_purge-2.3.tar.gz && tar -zxvf ngx_cache_purge-2.3.tar.gz && rm ngx_cache_purge-2.3.tar.gz\n```\n\nConfig Nginx与安装\n-----------------------------\n```\n ./configure\n --sbin-path=/usr/bin/nginx\n --pid-path=/run/nginx.pid\n --conf-path=/etc/nginx/nginx.conf \n --error-log-path=/var/log/nginx/error.log \n --http-log-path=/var/log/nginx/access.log \n --with-pcre \n --with-http_image_filter_module=dynamic \n --modules-path=/etc/nginx/modules \n --with-http_v2_module \n --with-http_ssl_module \n --with-http_gzip_static_module \n --without-http_autoindex_module\n --with-http_geoip_module\n --with-openssl=../openssl-1.1.1\n --add-module=../ngx_brotli\n --add-module=../ngx_cache_purge-2.3\n --with-http_realip_module\n```\n--sbin-path nginx安装位置  \n--conf-path config文件位置  \n--with-pcre 用pcre library(regex)  \n--pid-path=/var/run/nginx.pid  pid位置  \n``` \nsudo make \nsudo make install  \nsudo nginx\n``` \n \nSystemd Settings:\n-----------------------------\n```\nsudo nginx -s stop\n```\ngo to https://www.nginx.com/resources/wiki/start/topics/examples/systemd/\n\ncreate systemd file and copy paste. Remember to modify the path to the correct path we configured.\n```\nsudo touch /lib/systemd/system/nginx.service\nsudo vim /lib/systemd/system/nginx.service\n```\n```\n[Unit]\nDescription=The NGINX HTTP and reverse proxy server\nAfter=syslog.target network.target remote-fs.target nss-lookup.target\n\n[Service]\nType=forking\nPIDFile=/run/nginx.pid\nExecStartPre=/usr/bin/nginx -t\nExecStart=/usr/bin/nginx\nExecReload=/usr/bin/nginx -s reload\nExecStop=/bin/kill -s QUIT $MAINPID\nPrivateTmp=true\n\n[Install]\nWantedBy=multi-user.target\n```\n```\nsudo systemctl start nginx\nsudo systemctl enable nginx    //enable nginx restart when reboot\n```\n\nCertbot  (尽量别用，因为会修改nginx的configure，腾讯云有一年免费SSL证书)\n----------------------------------------------------------\n去官网安装certbot\n修改 nginx.conf 中 http > server > server_name example.com\n**安装过程中全部enter跳过**\n\n```\n# Server\nlocation ^~ /.well-known/acme-challenge/ {\n   default_type \"text/plain\";\n   root     /usr/share/nginx/html;\n}\n\nlocation = /.well-known/acme-challenge/ {\n   return 404;\n}\n```\n\nsudo service nginx reload\n```\nsudo certbot certonly --webroot -w /usr/share/nginx/html/ -d your.domain.com\n```\nrenew:\n```\nsudo crontab -e\n```\n```\n@daily sudo certbot renew\n```\n\n添加 Brotli\n-----------------------------\n```\ngzip on;\n    # ... （Gzip壓縮格式的其他設定。）\n## brotli Compression.\nbrotli on;\nbrotli_comp_level 6;\n#『brotli_types』的值僅作參考，請依你的環境去做設定。\nbrotli_types text/plain text/css application/json application/javascript text/xml application/xml application/xml+rss text/javascript image/x-icon application/vnd.ms-fontobject font/opentype application/x-font-ttf;\n```\n\n安全\n----------------------------\n安装Diffie-Hellman \n```\nsudo openssl dhparam -out /etc/ssl/certs/dhparam.pem 2048\n```","source":"_posts/2018-08-26-nginx-config.md","raw":"---\nlayout: post\ntitle: Nginx设置参考\ncategories: Nginx\ndescription: Nginx config for my reference\nkeywords: keyword1, keyword2\ndate: 2018-08-26 10:43:00\nhidden: true\n---\n\nNginx配置笔记\n\n<!-- more -->\n\n> 上次更新于2018/10/07\n\n准备工作\n---------------\n### Ubuntu\n```\nsudo apt-get update & sudo apt-get upgrade -y\nsudo apt-get install build-essential libpcre3 libpcre3-dev zlib1g zlib1g-dev libssl-dev libgeoip-dev libgd-dev -y\n```\n> apt-get install apache2-utils 如果想用basic auth\n### Centos\n```\nsudo yum groupinstall \"Development Tools\" -y\nsudo yum install epel-release pcre pcre-devel zlib zlib-devel openssl openssl-devel gd-devel GeoIP GeoIP-devel GeoIP-data -y\n```\n> yum install httpd-tool 如果想用basic auth\n\n### Centos\n\n### 通用\n```\nmkdir ~/nginx_compile && cd ~/nginx_compile\nwget -c https://nginx.org/download/nginx-1.15.5.tar.gz && \ntar -zxvf nginx-1.15.5.tar.gz && rm nginx-1.15.5.tar.gz **\nrm nginx-1.15.5.tar.gz\n```\n\n安装依赖包\n-----------------------------\n### openSSL 1.1.1-pre2\n```\ncd ~/nginx_compile\nwget -c https://www.openssl.org/source/openssl-1.1.1.tar.gz && \ntar zxf openssl-1.1.1.tar.gz && \nrm openssl-1.1.1.tar.gz\n```\n\n### ngx_brotli\nBrotli是由Google的工程師所開發的一項壓縮演算法專案，目前運用在資料壓縮，當然主要是為了加快網頁的傳輸速度。目前Brotli已被各大主流瀏覽器支援，包含Chrome、Firefox、Edge與Safari等等。\n```\ngit clone https://github.com/google/ngx_brotli.git\npushd ngx_brotli\ngit submodule update --init\npopd\n```\n\n### Purge Cache\n\nhttp://labs.frickle.com/nginx_ngx_cache_purge/\n```\nwget http://labs.frickle.com/files/ngx_cache_purge-2.3.tar.gz && tar -zxvf ngx_cache_purge-2.3.tar.gz && rm ngx_cache_purge-2.3.tar.gz\n```\n\nConfig Nginx与安装\n-----------------------------\n```\n ./configure\n --sbin-path=/usr/bin/nginx\n --pid-path=/run/nginx.pid\n --conf-path=/etc/nginx/nginx.conf \n --error-log-path=/var/log/nginx/error.log \n --http-log-path=/var/log/nginx/access.log \n --with-pcre \n --with-http_image_filter_module=dynamic \n --modules-path=/etc/nginx/modules \n --with-http_v2_module \n --with-http_ssl_module \n --with-http_gzip_static_module \n --without-http_autoindex_module\n --with-http_geoip_module\n --with-openssl=../openssl-1.1.1\n --add-module=../ngx_brotli\n --add-module=../ngx_cache_purge-2.3\n --with-http_realip_module\n```\n--sbin-path nginx安装位置  \n--conf-path config文件位置  \n--with-pcre 用pcre library(regex)  \n--pid-path=/var/run/nginx.pid  pid位置  \n``` \nsudo make \nsudo make install  \nsudo nginx\n``` \n \nSystemd Settings:\n-----------------------------\n```\nsudo nginx -s stop\n```\ngo to https://www.nginx.com/resources/wiki/start/topics/examples/systemd/\n\ncreate systemd file and copy paste. Remember to modify the path to the correct path we configured.\n```\nsudo touch /lib/systemd/system/nginx.service\nsudo vim /lib/systemd/system/nginx.service\n```\n```\n[Unit]\nDescription=The NGINX HTTP and reverse proxy server\nAfter=syslog.target network.target remote-fs.target nss-lookup.target\n\n[Service]\nType=forking\nPIDFile=/run/nginx.pid\nExecStartPre=/usr/bin/nginx -t\nExecStart=/usr/bin/nginx\nExecReload=/usr/bin/nginx -s reload\nExecStop=/bin/kill -s QUIT $MAINPID\nPrivateTmp=true\n\n[Install]\nWantedBy=multi-user.target\n```\n```\nsudo systemctl start nginx\nsudo systemctl enable nginx    //enable nginx restart when reboot\n```\n\nCertbot  (尽量别用，因为会修改nginx的configure，腾讯云有一年免费SSL证书)\n----------------------------------------------------------\n去官网安装certbot\n修改 nginx.conf 中 http > server > server_name example.com\n**安装过程中全部enter跳过**\n\n```\n# Server\nlocation ^~ /.well-known/acme-challenge/ {\n   default_type \"text/plain\";\n   root     /usr/share/nginx/html;\n}\n\nlocation = /.well-known/acme-challenge/ {\n   return 404;\n}\n```\n\nsudo service nginx reload\n```\nsudo certbot certonly --webroot -w /usr/share/nginx/html/ -d your.domain.com\n```\nrenew:\n```\nsudo crontab -e\n```\n```\n@daily sudo certbot renew\n```\n\n添加 Brotli\n-----------------------------\n```\ngzip on;\n    # ... （Gzip壓縮格式的其他設定。）\n## brotli Compression.\nbrotli on;\nbrotli_comp_level 6;\n#『brotli_types』的值僅作參考，請依你的環境去做設定。\nbrotli_types text/plain text/css application/json application/javascript text/xml application/xml application/xml+rss text/javascript image/x-icon application/vnd.ms-fontobject font/opentype application/x-font-ttf;\n```\n\n安全\n----------------------------\n安装Diffie-Hellman \n```\nsudo openssl dhparam -out /etc/ssl/certs/dhparam.pem 2048\n```","slug":"2018-08-26-nginx-config","published":1,"updated":"2019-12-07T07:20:15.866Z","comments":1,"photos":[],"link":"","_id":"ck4ddyit50006phvp8zx72kju","content":"<p>Nginx配置笔记</p>\n<a id=\"more\"></a>\n<blockquote>\n<p>上次更新于2018/10/07</p>\n</blockquote>\n<h2 id=\"准备工作\"><a class=\"markdownIt-Anchor\" href=\"#准备工作\"></a> 准备工作</h2>\n<h3 id=\"ubuntu\"><a class=\"markdownIt-Anchor\" href=\"#ubuntu\"></a> Ubuntu</h3>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get update &amp; sudo apt-get upgrade -y</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get install build-essential libpcre3 libpcre3-dev zlib1g zlib1g-dev libssl-dev libgeoip-dev libgd-dev -y</span></pre></td></tr></table></figure>\n<blockquote>\n<p>apt-get install apache2-utils 如果想用basic auth</p>\n</blockquote>\n<h3 id=\"centos\"><a class=\"markdownIt-Anchor\" href=\"#centos\"></a> Centos</h3>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\">sudo yum groupinstall &quot;Development Tools&quot; -y</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\">sudo yum install epel-release pcre pcre-devel zlib zlib-devel openssl openssl-devel gd-devel GeoIP GeoIP-devel GeoIP-data -y</span></pre></td></tr></table></figure>\n<blockquote>\n<p>yum install httpd-tool 如果想用basic auth</p>\n</blockquote>\n<h3 id=\"centos-2\"><a class=\"markdownIt-Anchor\" href=\"#centos-2\"></a> Centos</h3>\n<h3 id=\"通用\"><a class=\"markdownIt-Anchor\" href=\"#通用\"></a> 通用</h3>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\">mkdir ~&#x2F;nginx_compile &amp;&amp; cd ~&#x2F;nginx_compile</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\">wget -c https:&#x2F;&#x2F;nginx.org&#x2F;download&#x2F;nginx-1.15.5.tar.gz &amp;&amp; </span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\">tar -zxvf nginx-1.15.5.tar.gz &amp;&amp; rm nginx-1.15.5.tar.gz **</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">4</span></pre></td><td class=\"code\"><pre><span class=\"line\">rm nginx-1.15.5.tar.gz</span></pre></td></tr></table></figure>\n<h2 id=\"安装依赖包\"><a class=\"markdownIt-Anchor\" href=\"#安装依赖包\"></a> 安装依赖包</h2>\n<h3 id=\"openssl-111-pre2\"><a class=\"markdownIt-Anchor\" href=\"#openssl-111-pre2\"></a> openSSL 1.1.1-pre2</h3>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\">cd ~&#x2F;nginx_compile</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\">wget -c https:&#x2F;&#x2F;www.openssl.org&#x2F;source&#x2F;openssl-1.1.1.tar.gz &amp;&amp; </span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\">tar zxf openssl-1.1.1.tar.gz &amp;&amp; </span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">4</span></pre></td><td class=\"code\"><pre><span class=\"line\">rm openssl-1.1.1.tar.gz</span></pre></td></tr></table></figure>\n<h3 id=\"ngx_brotli\"><a class=\"markdownIt-Anchor\" href=\"#ngx_brotli\"></a> ngx_brotli</h3>\n<p>Brotli是由Google的工程師所開發的一項壓縮演算法專案，目前運用在資料壓縮，當然主要是為了加快網頁的傳輸速度。目前Brotli已被各大主流瀏覽器支援，包含Chrome、Firefox、Edge與Safari等等。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\">git clone https:&#x2F;&#x2F;github.com&#x2F;google&#x2F;ngx_brotli.git</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\">pushd ngx_brotli</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\">git submodule update --init</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">4</span></pre></td><td class=\"code\"><pre><span class=\"line\">popd</span></pre></td></tr></table></figure>\n<h3 id=\"purge-cache\"><a class=\"markdownIt-Anchor\" href=\"#purge-cache\"></a> Purge Cache</h3>\n<p><a href=\"http://labs.frickle.com/nginx_ngx_cache_purge/\" target=\"_blank\" rel=\"noopener\">http://labs.frickle.com/nginx_ngx_cache_purge/</a></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\">wget http:&#x2F;&#x2F;labs.frickle.com&#x2F;files&#x2F;ngx_cache_purge-2.3.tar.gz &amp;&amp; tar -zxvf ngx_cache_purge-2.3.tar.gz &amp;&amp; rm ngx_cache_purge-2.3.tar.gz</span></pre></td></tr></table></figure>\n<h2 id=\"config-nginx与安装\"><a class=\"markdownIt-Anchor\" href=\"#config-nginx与安装\"></a> Config Nginx与安装</h2>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\">.&#x2F;configure</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\">--sbin-path&#x3D;&#x2F;usr&#x2F;bin&#x2F;nginx</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\">--pid-path&#x3D;&#x2F;run&#x2F;nginx.pid</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">4</span></pre></td><td class=\"code\"><pre><span class=\"line\">--conf-path&#x3D;&#x2F;etc&#x2F;nginx&#x2F;nginx.conf </span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">5</span></pre></td><td class=\"code\"><pre><span class=\"line\">--error-log-path&#x3D;&#x2F;var&#x2F;log&#x2F;nginx&#x2F;error.log </span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">6</span></pre></td><td class=\"code\"><pre><span class=\"line\">--http-log-path&#x3D;&#x2F;var&#x2F;log&#x2F;nginx&#x2F;access.log </span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">7</span></pre></td><td class=\"code\"><pre><span class=\"line\">--with-pcre </span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">8</span></pre></td><td class=\"code\"><pre><span class=\"line\">--with-http_image_filter_module&#x3D;dynamic </span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">9</span></pre></td><td class=\"code\"><pre><span class=\"line\">--modules-path&#x3D;&#x2F;etc&#x2F;nginx&#x2F;modules </span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">10</span></pre></td><td class=\"code\"><pre><span class=\"line\">--with-http_v2_module </span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">11</span></pre></td><td class=\"code\"><pre><span class=\"line\">--with-http_ssl_module </span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">12</span></pre></td><td class=\"code\"><pre><span class=\"line\">--with-http_gzip_static_module </span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">13</span></pre></td><td class=\"code\"><pre><span class=\"line\">--without-http_autoindex_module</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">14</span></pre></td><td class=\"code\"><pre><span class=\"line\">--with-http_geoip_module</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">15</span></pre></td><td class=\"code\"><pre><span class=\"line\">--with-openssl&#x3D;..&#x2F;openssl-1.1.1</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">16</span></pre></td><td class=\"code\"><pre><span class=\"line\">--add-module&#x3D;..&#x2F;ngx_brotli</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">17</span></pre></td><td class=\"code\"><pre><span class=\"line\">--add-module&#x3D;..&#x2F;ngx_cache_purge-2.3</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">18</span></pre></td><td class=\"code\"><pre><span class=\"line\">--with-http_realip_module</span></pre></td></tr></table></figure>\n<p>–sbin-path nginx安装位置<br />\n–conf-path config文件位置<br />\n–with-pcre 用pcre library(regex)<br />\n–pid-path=/var/run/nginx.pid  pid位置</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\">sudo make </span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\">sudo make install  </span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\">sudo nginx</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">4</span></pre></td><td class=\"code\"><pre><span class=\"line\">&#96;&#96;&#96; </span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">5</span></pre></td><td class=\"code\"><pre><span class=\"line\"> </span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">6</span></pre></td><td class=\"code\"><pre><span class=\"line\">Systemd Settings:</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">7</span></pre></td><td class=\"code\"><pre><span class=\"line\">-----------------------------</span></pre></td></tr></table></figure>\n<p>sudo nginx -s stop</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\">go to https:&#x2F;&#x2F;www.nginx.com&#x2F;resources&#x2F;wiki&#x2F;start&#x2F;topics&#x2F;examples&#x2F;systemd&#x2F;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\">create systemd file and copy paste. Remember to modify the path to the correct path we configured.</span></pre></td></tr></table></figure>\n<p>sudo touch /lib/systemd/system/nginx.service<br />\nsudo vim /lib/systemd/system/nginx.service</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\">&#96;&#96;&#96;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\">[Unit]</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\">Description&#x3D;The NGINX HTTP and reverse proxy server</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">4</span></pre></td><td class=\"code\"><pre><span class=\"line\">After&#x3D;syslog.target network.target remote-fs.target nss-lookup.target</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">5</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">6</span></pre></td><td class=\"code\"><pre><span class=\"line\">[Service]</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">7</span></pre></td><td class=\"code\"><pre><span class=\"line\">Type&#x3D;forking</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">8</span></pre></td><td class=\"code\"><pre><span class=\"line\">PIDFile&#x3D;&#x2F;run&#x2F;nginx.pid</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">9</span></pre></td><td class=\"code\"><pre><span class=\"line\">ExecStartPre&#x3D;&#x2F;usr&#x2F;bin&#x2F;nginx -t</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">10</span></pre></td><td class=\"code\"><pre><span class=\"line\">ExecStart&#x3D;&#x2F;usr&#x2F;bin&#x2F;nginx</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">11</span></pre></td><td class=\"code\"><pre><span class=\"line\">ExecReload&#x3D;&#x2F;usr&#x2F;bin&#x2F;nginx -s reload</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">12</span></pre></td><td class=\"code\"><pre><span class=\"line\">ExecStop&#x3D;&#x2F;bin&#x2F;kill -s QUIT $MAINPID</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">13</span></pre></td><td class=\"code\"><pre><span class=\"line\">PrivateTmp&#x3D;true</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">14</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">15</span></pre></td><td class=\"code\"><pre><span class=\"line\">[Install]</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">16</span></pre></td><td class=\"code\"><pre><span class=\"line\">WantedBy&#x3D;multi-user.target</span></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\">sudo systemctl start nginx</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\">sudo systemctl enable nginx    &#x2F;&#x2F;enable nginx restart when reboot</span></pre></td></tr></table></figure>\n<h2 id=\"certbot-尽量别用因为会修改nginx的configure腾讯云有一年免费ssl证书\"><a class=\"markdownIt-Anchor\" href=\"#certbot-尽量别用因为会修改nginx的configure腾讯云有一年免费ssl证书\"></a> Certbot  (尽量别用，因为会修改nginx的configure，腾讯云有一年免费SSL证书)</h2>\n<p>去官网安装certbot<br />\n修改 nginx.conf 中 http &gt; server &gt; server_name <a href=\"http://example.com\" target=\"_blank\" rel=\"noopener\">example.com</a><br />\n<strong>安装过程中全部enter跳过</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\"># Server</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\">location ^~ &#x2F;.well-known&#x2F;acme-challenge&#x2F; &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\">   default_type &quot;text&#x2F;plain&quot;;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">4</span></pre></td><td class=\"code\"><pre><span class=\"line\">   root     &#x2F;usr&#x2F;share&#x2F;nginx&#x2F;html;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">5</span></pre></td><td class=\"code\"><pre><span class=\"line\">&#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">6</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">7</span></pre></td><td class=\"code\"><pre><span class=\"line\">location &#x3D; &#x2F;.well-known&#x2F;acme-challenge&#x2F; &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">8</span></pre></td><td class=\"code\"><pre><span class=\"line\">   return 404;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">9</span></pre></td><td class=\"code\"><pre><span class=\"line\">&#125;</span></pre></td></tr></table></figure>\n<p>sudo service nginx reload</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\">sudo certbot certonly --webroot -w &#x2F;usr&#x2F;share&#x2F;nginx&#x2F;html&#x2F; -d your.domain.com</span></pre></td></tr></table></figure>\n<p>renew:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\">sudo crontab -e</span></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\">@daily sudo certbot renew</span></pre></td></tr></table></figure>\n<h2 id=\"添加-brotli\"><a class=\"markdownIt-Anchor\" href=\"#添加-brotli\"></a> 添加 Brotli</h2>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\">gzip on;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\">    # ... （Gzip壓縮格式的其他設定。）</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\">## brotli Compression.</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">4</span></pre></td><td class=\"code\"><pre><span class=\"line\">brotli on;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">5</span></pre></td><td class=\"code\"><pre><span class=\"line\">brotli_comp_level 6;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">6</span></pre></td><td class=\"code\"><pre><span class=\"line\">#『brotli_types』的值僅作參考，請依你的環境去做設定。</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">7</span></pre></td><td class=\"code\"><pre><span class=\"line\">brotli_types text&#x2F;plain text&#x2F;css application&#x2F;json application&#x2F;javascript text&#x2F;xml application&#x2F;xml application&#x2F;xml+rss text&#x2F;javascript image&#x2F;x-icon application&#x2F;vnd.ms-fontobject font&#x2F;opentype application&#x2F;x-font-ttf;</span></pre></td></tr></table></figure>\n<h2 id=\"安全\"><a class=\"markdownIt-Anchor\" href=\"#安全\"></a> 安全</h2>\n<p>安装Diffie-Hellman</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\">sudo openssl dhparam -out &#x2F;etc&#x2F;ssl&#x2F;certs&#x2F;dhparam.pem 2048</span></pre></td></tr></table></figure><!-- flag of hidden posts -->","site":{"data":{}},"excerpt":"<p>Nginx配置笔记</p>","more":"<blockquote>\n<p>上次更新于2018/10/07</p>\n</blockquote>\n<h2 id=\"准备工作\"><a class=\"markdownIt-Anchor\" href=\"#准备工作\"></a> 准备工作</h2>\n<h3 id=\"ubuntu\"><a class=\"markdownIt-Anchor\" href=\"#ubuntu\"></a> Ubuntu</h3>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get update &amp; sudo apt-get upgrade -y</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get install build-essential libpcre3 libpcre3-dev zlib1g zlib1g-dev libssl-dev libgeoip-dev libgd-dev -y</span></pre></td></tr></table></figure>\n<blockquote>\n<p>apt-get install apache2-utils 如果想用basic auth</p>\n</blockquote>\n<h3 id=\"centos\"><a class=\"markdownIt-Anchor\" href=\"#centos\"></a> Centos</h3>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\">sudo yum groupinstall &quot;Development Tools&quot; -y</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\">sudo yum install epel-release pcre pcre-devel zlib zlib-devel openssl openssl-devel gd-devel GeoIP GeoIP-devel GeoIP-data -y</span></pre></td></tr></table></figure>\n<blockquote>\n<p>yum install httpd-tool 如果想用basic auth</p>\n</blockquote>\n<h3 id=\"centos-2\"><a class=\"markdownIt-Anchor\" href=\"#centos-2\"></a> Centos</h3>\n<h3 id=\"通用\"><a class=\"markdownIt-Anchor\" href=\"#通用\"></a> 通用</h3>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\">mkdir ~&#x2F;nginx_compile &amp;&amp; cd ~&#x2F;nginx_compile</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\">wget -c https:&#x2F;&#x2F;nginx.org&#x2F;download&#x2F;nginx-1.15.5.tar.gz &amp;&amp; </span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\">tar -zxvf nginx-1.15.5.tar.gz &amp;&amp; rm nginx-1.15.5.tar.gz **</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">4</span></pre></td><td class=\"code\"><pre><span class=\"line\">rm nginx-1.15.5.tar.gz</span></pre></td></tr></table></figure>\n<h2 id=\"安装依赖包\"><a class=\"markdownIt-Anchor\" href=\"#安装依赖包\"></a> 安装依赖包</h2>\n<h3 id=\"openssl-111-pre2\"><a class=\"markdownIt-Anchor\" href=\"#openssl-111-pre2\"></a> openSSL 1.1.1-pre2</h3>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\">cd ~&#x2F;nginx_compile</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\">wget -c https:&#x2F;&#x2F;www.openssl.org&#x2F;source&#x2F;openssl-1.1.1.tar.gz &amp;&amp; </span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\">tar zxf openssl-1.1.1.tar.gz &amp;&amp; </span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">4</span></pre></td><td class=\"code\"><pre><span class=\"line\">rm openssl-1.1.1.tar.gz</span></pre></td></tr></table></figure>\n<h3 id=\"ngx_brotli\"><a class=\"markdownIt-Anchor\" href=\"#ngx_brotli\"></a> ngx_brotli</h3>\n<p>Brotli是由Google的工程師所開發的一項壓縮演算法專案，目前運用在資料壓縮，當然主要是為了加快網頁的傳輸速度。目前Brotli已被各大主流瀏覽器支援，包含Chrome、Firefox、Edge與Safari等等。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\">git clone https:&#x2F;&#x2F;github.com&#x2F;google&#x2F;ngx_brotli.git</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\">pushd ngx_brotli</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\">git submodule update --init</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">4</span></pre></td><td class=\"code\"><pre><span class=\"line\">popd</span></pre></td></tr></table></figure>\n<h3 id=\"purge-cache\"><a class=\"markdownIt-Anchor\" href=\"#purge-cache\"></a> Purge Cache</h3>\n<p><a href=\"http://labs.frickle.com/nginx_ngx_cache_purge/\" target=\"_blank\" rel=\"noopener\">http://labs.frickle.com/nginx_ngx_cache_purge/</a></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\">wget http:&#x2F;&#x2F;labs.frickle.com&#x2F;files&#x2F;ngx_cache_purge-2.3.tar.gz &amp;&amp; tar -zxvf ngx_cache_purge-2.3.tar.gz &amp;&amp; rm ngx_cache_purge-2.3.tar.gz</span></pre></td></tr></table></figure>\n<h2 id=\"config-nginx与安装\"><a class=\"markdownIt-Anchor\" href=\"#config-nginx与安装\"></a> Config Nginx与安装</h2>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\">.&#x2F;configure</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\">--sbin-path&#x3D;&#x2F;usr&#x2F;bin&#x2F;nginx</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\">--pid-path&#x3D;&#x2F;run&#x2F;nginx.pid</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">4</span></pre></td><td class=\"code\"><pre><span class=\"line\">--conf-path&#x3D;&#x2F;etc&#x2F;nginx&#x2F;nginx.conf </span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">5</span></pre></td><td class=\"code\"><pre><span class=\"line\">--error-log-path&#x3D;&#x2F;var&#x2F;log&#x2F;nginx&#x2F;error.log </span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">6</span></pre></td><td class=\"code\"><pre><span class=\"line\">--http-log-path&#x3D;&#x2F;var&#x2F;log&#x2F;nginx&#x2F;access.log </span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">7</span></pre></td><td class=\"code\"><pre><span class=\"line\">--with-pcre </span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">8</span></pre></td><td class=\"code\"><pre><span class=\"line\">--with-http_image_filter_module&#x3D;dynamic </span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">9</span></pre></td><td class=\"code\"><pre><span class=\"line\">--modules-path&#x3D;&#x2F;etc&#x2F;nginx&#x2F;modules </span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">10</span></pre></td><td class=\"code\"><pre><span class=\"line\">--with-http_v2_module </span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">11</span></pre></td><td class=\"code\"><pre><span class=\"line\">--with-http_ssl_module </span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">12</span></pre></td><td class=\"code\"><pre><span class=\"line\">--with-http_gzip_static_module </span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">13</span></pre></td><td class=\"code\"><pre><span class=\"line\">--without-http_autoindex_module</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">14</span></pre></td><td class=\"code\"><pre><span class=\"line\">--with-http_geoip_module</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">15</span></pre></td><td class=\"code\"><pre><span class=\"line\">--with-openssl&#x3D;..&#x2F;openssl-1.1.1</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">16</span></pre></td><td class=\"code\"><pre><span class=\"line\">--add-module&#x3D;..&#x2F;ngx_brotli</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">17</span></pre></td><td class=\"code\"><pre><span class=\"line\">--add-module&#x3D;..&#x2F;ngx_cache_purge-2.3</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">18</span></pre></td><td class=\"code\"><pre><span class=\"line\">--with-http_realip_module</span></pre></td></tr></table></figure>\n<p>–sbin-path nginx安装位置<br />\n–conf-path config文件位置<br />\n–with-pcre 用pcre library(regex)<br />\n–pid-path=/var/run/nginx.pid  pid位置</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\">sudo make </span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\">sudo make install  </span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\">sudo nginx</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">4</span></pre></td><td class=\"code\"><pre><span class=\"line\">&#96;&#96;&#96; </span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">5</span></pre></td><td class=\"code\"><pre><span class=\"line\"> </span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">6</span></pre></td><td class=\"code\"><pre><span class=\"line\">Systemd Settings:</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">7</span></pre></td><td class=\"code\"><pre><span class=\"line\">-----------------------------</span></pre></td></tr></table></figure>\n<p>sudo nginx -s stop</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\">go to https:&#x2F;&#x2F;www.nginx.com&#x2F;resources&#x2F;wiki&#x2F;start&#x2F;topics&#x2F;examples&#x2F;systemd&#x2F;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\">create systemd file and copy paste. Remember to modify the path to the correct path we configured.</span></pre></td></tr></table></figure>\n<p>sudo touch /lib/systemd/system/nginx.service<br />\nsudo vim /lib/systemd/system/nginx.service</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\">&#96;&#96;&#96;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\">[Unit]</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\">Description&#x3D;The NGINX HTTP and reverse proxy server</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">4</span></pre></td><td class=\"code\"><pre><span class=\"line\">After&#x3D;syslog.target network.target remote-fs.target nss-lookup.target</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">5</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">6</span></pre></td><td class=\"code\"><pre><span class=\"line\">[Service]</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">7</span></pre></td><td class=\"code\"><pre><span class=\"line\">Type&#x3D;forking</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">8</span></pre></td><td class=\"code\"><pre><span class=\"line\">PIDFile&#x3D;&#x2F;run&#x2F;nginx.pid</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">9</span></pre></td><td class=\"code\"><pre><span class=\"line\">ExecStartPre&#x3D;&#x2F;usr&#x2F;bin&#x2F;nginx -t</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">10</span></pre></td><td class=\"code\"><pre><span class=\"line\">ExecStart&#x3D;&#x2F;usr&#x2F;bin&#x2F;nginx</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">11</span></pre></td><td class=\"code\"><pre><span class=\"line\">ExecReload&#x3D;&#x2F;usr&#x2F;bin&#x2F;nginx -s reload</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">12</span></pre></td><td class=\"code\"><pre><span class=\"line\">ExecStop&#x3D;&#x2F;bin&#x2F;kill -s QUIT $MAINPID</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">13</span></pre></td><td class=\"code\"><pre><span class=\"line\">PrivateTmp&#x3D;true</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">14</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">15</span></pre></td><td class=\"code\"><pre><span class=\"line\">[Install]</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">16</span></pre></td><td class=\"code\"><pre><span class=\"line\">WantedBy&#x3D;multi-user.target</span></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\">sudo systemctl start nginx</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\">sudo systemctl enable nginx    &#x2F;&#x2F;enable nginx restart when reboot</span></pre></td></tr></table></figure>\n<h2 id=\"certbot-尽量别用因为会修改nginx的configure腾讯云有一年免费ssl证书\"><a class=\"markdownIt-Anchor\" href=\"#certbot-尽量别用因为会修改nginx的configure腾讯云有一年免费ssl证书\"></a> Certbot  (尽量别用，因为会修改nginx的configure，腾讯云有一年免费SSL证书)</h2>\n<p>去官网安装certbot<br />\n修改 nginx.conf 中 http &gt; server &gt; server_name <a href=\"http://example.com\" target=\"_blank\" rel=\"noopener\">example.com</a><br />\n<strong>安装过程中全部enter跳过</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\"># Server</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\">location ^~ &#x2F;.well-known&#x2F;acme-challenge&#x2F; &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\">   default_type &quot;text&#x2F;plain&quot;;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">4</span></pre></td><td class=\"code\"><pre><span class=\"line\">   root     &#x2F;usr&#x2F;share&#x2F;nginx&#x2F;html;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">5</span></pre></td><td class=\"code\"><pre><span class=\"line\">&#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">6</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">7</span></pre></td><td class=\"code\"><pre><span class=\"line\">location &#x3D; &#x2F;.well-known&#x2F;acme-challenge&#x2F; &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">8</span></pre></td><td class=\"code\"><pre><span class=\"line\">   return 404;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">9</span></pre></td><td class=\"code\"><pre><span class=\"line\">&#125;</span></pre></td></tr></table></figure>\n<p>sudo service nginx reload</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\">sudo certbot certonly --webroot -w &#x2F;usr&#x2F;share&#x2F;nginx&#x2F;html&#x2F; -d your.domain.com</span></pre></td></tr></table></figure>\n<p>renew:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\">sudo crontab -e</span></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\">@daily sudo certbot renew</span></pre></td></tr></table></figure>\n<h2 id=\"添加-brotli\"><a class=\"markdownIt-Anchor\" href=\"#添加-brotli\"></a> 添加 Brotli</h2>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\">gzip on;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\">    # ... （Gzip壓縮格式的其他設定。）</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\">## brotli Compression.</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">4</span></pre></td><td class=\"code\"><pre><span class=\"line\">brotli on;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">5</span></pre></td><td class=\"code\"><pre><span class=\"line\">brotli_comp_level 6;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">6</span></pre></td><td class=\"code\"><pre><span class=\"line\">#『brotli_types』的值僅作參考，請依你的環境去做設定。</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">7</span></pre></td><td class=\"code\"><pre><span class=\"line\">brotli_types text&#x2F;plain text&#x2F;css application&#x2F;json application&#x2F;javascript text&#x2F;xml application&#x2F;xml application&#x2F;xml+rss text&#x2F;javascript image&#x2F;x-icon application&#x2F;vnd.ms-fontobject font&#x2F;opentype application&#x2F;x-font-ttf;</span></pre></td></tr></table></figure>\n<h2 id=\"安全\"><a class=\"markdownIt-Anchor\" href=\"#安全\"></a> 安全</h2>\n<p>安装Diffie-Hellman</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\">sudo openssl dhparam -out &#x2F;etc&#x2F;ssl&#x2F;certs&#x2F;dhparam.pem 2048</span></pre></td></tr></table></figure>"},{"layout":"post","title":"博客创世篇","description":"博客起死回生","keywords":"Blog","photos":["../images/the-tower-of-babel.jpg"],"date":"2019-12-19T23:11:00.000Z","_content":"重新激活了我的个人博客，写一些有价值的内容。\n<!-- more -->\n\n## 前世今生\n其实在2018年就已经开始打算写一些东西了，看过国内各位大佬的Blog基本都是以技术作为主要内容，所以也随波逐流拿Jekyll架了个网站开始写点技术相关的东西。但是后来实在是不太喜欢Jekyll这玩意（主要因为懒），就没有继续更新。马上就要2020年了， 我的20s的上半场也快要结束了，回头想想还算精彩，先花了两年从大学的数学系毕业，又恰好赶上了区块链的爆发期，曾经资产在几天内翻过十倍，也曾跌至谷底一天赔的精光。毕业后机缘巧合又遇见了很重要的她，花了两年做过几个不成功的产品。瞎折腾的这几年让我学习了很多，也意识到了除了技术外思考的重要性。所以打算重新开启博客，开始记录一下我的20s的下半场。\n\n## 博客定位\n我本身是搞技术的，但我的博客内容不会以技术作为导向。一是认为我的水平在众多技术大牛们面前实属无地自容，二是此类的博客在圈子里实在是太多，几乎全部的技术实现google一下都可以找得到。我发现身边绝大多数人都有困在自己专业圈子里的趋势，比如搞技术的每天都在敲代码，但是其他领域的很多人更是一行代码都不会敲。并不是说这样不好，毕竟术业有专攻，但是如果被自己的圈子困的太深而不从社会整个大背景分析问题，很难对社会发展的本质规律形成有效的见解。比如像这篇文章[People Who Have “Too Many Interests” Are More Likely To Be Successful According To Research](https://medium.com/accelerated-intelligence/modern-polymath-81f882ce52db) 也阐述了现代人了解多个领域的重要性。\n我将我的博客主题会定位于深度思考，范围包括但不限于科技、金融、投资、经济、哲学。我会分享我近期在思考的一些事情，尽量全面客观的阐述事物的本质，在思考中发现机会，从本质了解社会的发展规律。\n当然我还年轻，对事情的看法一定是不完全的。我也在用写作的方式来锻炼我思考的能力，因为写作时可以静下心来仔细思考其中的逻辑，思考的广度和深度也会有所加强。如果你读到哪些不合你的口味观点，非常欢迎指出。\n\n## 关于命名\n我将博客名起名为“Think Fundamental”， 借鉴于苹果著名的“Think Different”。虽然我认为“Think Different”有其价值，但是我认为在“Think Fundamental”是“Think Different”的前提，因为在不了解本质的前提下很难打破框架从不同的角度思考。思考是很花费时间和精力的一件事情，所以我也希望这个名字可以鞭策我多进行深度思考。\n\n## 结尾\n说了这么多，希望这个站在我的30s之前还依旧存活。","source":"_posts/genesis-blog.md","raw":"---\nlayout: post\ntitle: 博客创世篇\ncategories: Blog\ndescription: 博客起死回生\nkeywords: Blog\nphotos: [\n  [\"../images/the-tower-of-babel.jpg\"]\n]\ndate: 2019-12-20 07:11:00\n---\n重新激活了我的个人博客，写一些有价值的内容。\n<!-- more -->\n\n## 前世今生\n其实在2018年就已经开始打算写一些东西了，看过国内各位大佬的Blog基本都是以技术作为主要内容，所以也随波逐流拿Jekyll架了个网站开始写点技术相关的东西。但是后来实在是不太喜欢Jekyll这玩意（主要因为懒），就没有继续更新。马上就要2020年了， 我的20s的上半场也快要结束了，回头想想还算精彩，先花了两年从大学的数学系毕业，又恰好赶上了区块链的爆发期，曾经资产在几天内翻过十倍，也曾跌至谷底一天赔的精光。毕业后机缘巧合又遇见了很重要的她，花了两年做过几个不成功的产品。瞎折腾的这几年让我学习了很多，也意识到了除了技术外思考的重要性。所以打算重新开启博客，开始记录一下我的20s的下半场。\n\n## 博客定位\n我本身是搞技术的，但我的博客内容不会以技术作为导向。一是认为我的水平在众多技术大牛们面前实属无地自容，二是此类的博客在圈子里实在是太多，几乎全部的技术实现google一下都可以找得到。我发现身边绝大多数人都有困在自己专业圈子里的趋势，比如搞技术的每天都在敲代码，但是其他领域的很多人更是一行代码都不会敲。并不是说这样不好，毕竟术业有专攻，但是如果被自己的圈子困的太深而不从社会整个大背景分析问题，很难对社会发展的本质规律形成有效的见解。比如像这篇文章[People Who Have “Too Many Interests” Are More Likely To Be Successful According To Research](https://medium.com/accelerated-intelligence/modern-polymath-81f882ce52db) 也阐述了现代人了解多个领域的重要性。\n我将我的博客主题会定位于深度思考，范围包括但不限于科技、金融、投资、经济、哲学。我会分享我近期在思考的一些事情，尽量全面客观的阐述事物的本质，在思考中发现机会，从本质了解社会的发展规律。\n当然我还年轻，对事情的看法一定是不完全的。我也在用写作的方式来锻炼我思考的能力，因为写作时可以静下心来仔细思考其中的逻辑，思考的广度和深度也会有所加强。如果你读到哪些不合你的口味观点，非常欢迎指出。\n\n## 关于命名\n我将博客名起名为“Think Fundamental”， 借鉴于苹果著名的“Think Different”。虽然我认为“Think Different”有其价值，但是我认为在“Think Fundamental”是“Think Different”的前提，因为在不了解本质的前提下很难打破框架从不同的角度思考。思考是很花费时间和精力的一件事情，所以我也希望这个名字可以鞭策我多进行深度思考。\n\n## 结尾\n说了这么多，希望这个站在我的30s之前还依旧存活。","slug":"genesis-blog","published":1,"updated":"2019-12-19T23:35:20.187Z","comments":1,"link":"","_id":"ck4ddyit80007phvpa2es5oev","content":"<p>重新激活了我的个人博客，写一些有价值的内容。</p>\n<a id=\"more\"></a>\n<h2 id=\"前世今生\"><a class=\"markdownIt-Anchor\" href=\"#前世今生\"></a> 前世今生</h2>\n<p>其实在2018年就已经开始打算写一些东西了，看过国内各位大佬的Blog基本都是以技术作为主要内容，所以也随波逐流拿Jekyll架了个网站开始写点技术相关的东西。但是后来实在是不太喜欢Jekyll这玩意（主要因为懒），就没有继续更新。马上就要2020年了， 我的20s的上半场也快要结束了，回头想想还算精彩，先花了两年从大学的数学系毕业，又恰好赶上了区块链的爆发期，曾经资产在几天内翻过十倍，也曾跌至谷底一天赔的精光。毕业后机缘巧合又遇见了很重要的她，花了两年做过几个不成功的产品。瞎折腾的这几年让我学习了很多，也意识到了除了技术外思考的重要性。所以打算重新开启博客，开始记录一下我的20s的下半场。</p>\n<h2 id=\"博客定位\"><a class=\"markdownIt-Anchor\" href=\"#博客定位\"></a> 博客定位</h2>\n<p>我本身是搞技术的，但我的博客内容不会以技术作为导向。一是认为我的水平在众多技术大牛们面前实属无地自容，二是此类的博客在圈子里实在是太多，几乎全部的技术实现google一下都可以找得到。我发现身边绝大多数人都有困在自己专业圈子里的趋势，比如搞技术的每天都在敲代码，但是其他领域的很多人更是一行代码都不会敲。并不是说这样不好，毕竟术业有专攻，但是如果被自己的圈子困的太深而不从社会整个大背景分析问题，很难对社会发展的本质规律形成有效的见解。比如像这篇文章<a href=\"https://medium.com/accelerated-intelligence/modern-polymath-81f882ce52db\" target=\"_blank\" rel=\"noopener\">People Who Have “Too Many Interests” Are More Likely To Be Successful According To Research</a> 也阐述了现代人了解多个领域的重要性。<br />\n我将我的博客主题会定位于深度思考，范围包括但不限于科技、金融、投资、经济、哲学。我会分享我近期在思考的一些事情，尽量全面客观的阐述事物的本质，在思考中发现机会，从本质了解社会的发展规律。<br />\n当然我还年轻，对事情的看法一定是不完全的。我也在用写作的方式来锻炼我思考的能力，因为写作时可以静下心来仔细思考其中的逻辑，思考的广度和深度也会有所加强。如果你读到哪些不合你的口味观点，非常欢迎指出。</p>\n<h2 id=\"关于命名\"><a class=\"markdownIt-Anchor\" href=\"#关于命名\"></a> 关于命名</h2>\n<p>我将博客名起名为“Think Fundamental”， 借鉴于苹果著名的“Think Different”。虽然我认为“Think Different”有其价值，但是我认为在“Think Fundamental”是“Think Different”的前提，因为在不了解本质的前提下很难打破框架从不同的角度思考。思考是很花费时间和精力的一件事情，所以我也希望这个名字可以鞭策我多进行深度思考。</p>\n<h2 id=\"结尾\"><a class=\"markdownIt-Anchor\" href=\"#结尾\"></a> 结尾</h2>\n<p>说了这么多，希望这个站在我的30s之前还依旧存活。</p>\n","site":{"data":{}},"excerpt":"<p>重新激活了我的个人博客，写一些有价值的内容。</p>","more":"<h2 id=\"前世今生\"><a class=\"markdownIt-Anchor\" href=\"#前世今生\"></a> 前世今生</h2>\n<p>其实在2018年就已经开始打算写一些东西了，看过国内各位大佬的Blog基本都是以技术作为主要内容，所以也随波逐流拿Jekyll架了个网站开始写点技术相关的东西。但是后来实在是不太喜欢Jekyll这玩意（主要因为懒），就没有继续更新。马上就要2020年了， 我的20s的上半场也快要结束了，回头想想还算精彩，先花了两年从大学的数学系毕业，又恰好赶上了区块链的爆发期，曾经资产在几天内翻过十倍，也曾跌至谷底一天赔的精光。毕业后机缘巧合又遇见了很重要的她，花了两年做过几个不成功的产品。瞎折腾的这几年让我学习了很多，也意识到了除了技术外思考的重要性。所以打算重新开启博客，开始记录一下我的20s的下半场。</p>\n<h2 id=\"博客定位\"><a class=\"markdownIt-Anchor\" href=\"#博客定位\"></a> 博客定位</h2>\n<p>我本身是搞技术的，但我的博客内容不会以技术作为导向。一是认为我的水平在众多技术大牛们面前实属无地自容，二是此类的博客在圈子里实在是太多，几乎全部的技术实现google一下都可以找得到。我发现身边绝大多数人都有困在自己专业圈子里的趋势，比如搞技术的每天都在敲代码，但是其他领域的很多人更是一行代码都不会敲。并不是说这样不好，毕竟术业有专攻，但是如果被自己的圈子困的太深而不从社会整个大背景分析问题，很难对社会发展的本质规律形成有效的见解。比如像这篇文章<a href=\"https://medium.com/accelerated-intelligence/modern-polymath-81f882ce52db\" target=\"_blank\" rel=\"noopener\">People Who Have “Too Many Interests” Are More Likely To Be Successful According To Research</a> 也阐述了现代人了解多个领域的重要性。<br />\n我将我的博客主题会定位于深度思考，范围包括但不限于科技、金融、投资、经济、哲学。我会分享我近期在思考的一些事情，尽量全面客观的阐述事物的本质，在思考中发现机会，从本质了解社会的发展规律。<br />\n当然我还年轻，对事情的看法一定是不完全的。我也在用写作的方式来锻炼我思考的能力，因为写作时可以静下心来仔细思考其中的逻辑，思考的广度和深度也会有所加强。如果你读到哪些不合你的口味观点，非常欢迎指出。</p>\n<h2 id=\"关于命名\"><a class=\"markdownIt-Anchor\" href=\"#关于命名\"></a> 关于命名</h2>\n<p>我将博客名起名为“Think Fundamental”， 借鉴于苹果著名的“Think Different”。虽然我认为“Think Different”有其价值，但是我认为在“Think Fundamental”是“Think Different”的前提，因为在不了解本质的前提下很难打破框架从不同的角度思考。思考是很花费时间和精力的一件事情，所以我也希望这个名字可以鞭策我多进行深度思考。</p>\n<h2 id=\"结尾\"><a class=\"markdownIt-Anchor\" href=\"#结尾\"></a> 结尾</h2>\n<p>说了这么多，希望这个站在我的30s之前还依旧存活。</p>"},{"layout":"post","title":"第一篇文章","description":"啥也没写","keywords":"Blog","date":"2018-08-22T16:00:00.000Z","_content":"\n写点啥呢\n\n小羊咩咩咩","source":"_posts/first-blog.md","raw":"---\nlayout: post\ntitle: 第一篇文章\ncategories: Blog\ndescription: 啥也没写\nkeywords: Blog\ndate: 2018-08-23 00:00:00\n---\n\n写点啥呢\n\n小羊咩咩咩","slug":"first-blog","published":1,"updated":"2019-12-07T08:46:31.220Z","comments":1,"photos":[],"link":"","_id":"ck4ddyitb0009phvp5ae4ajw9","content":"<p>写点啥呢</p>\n<p>小羊咩咩咩</p>\n","site":{"data":{}},"excerpt":"","more":"<p>写点啥呢</p>\n<p>小羊咩咩咩</p>\n"},{"layout":"post","title":"Python3 + pip3 + chrome + chromedriver 在centos上设置","description":"Python config for my reference","keywords":"keyword1, keyword2","date":"2018-11-24T16:00:00.000Z","hidden":true,"_content":"爬虫学习笔记\n\n<!-- more -->\n\n准备工作\n---------------\n### python3\n```\nsudo apt-get update & sudo apt-get upgrade -y\nsudo apt-get install build-essential libpcre3 libpcre3-dev zlib1g zlib1g-dev libssl-dev libgeoip-dev libgd-dev -y\n```\n> apt-get install apache2-utils 如果想用basic auth\n### Chrome\n\n安装chrome:\n```\ncurl https://intoli.com/install-google-chrome.sh | bash\n\nldd /opt/google/chrome/chrome | grep \"not found\"\n```\n\n测试一下对百度拍一个snapshot：\n```\ngoogle-chrome-stable --no-sandbox --headless --disable-gpu --screenshot https://www.baidu.com/\n```\n\n### Chromedriver\n在Chromedriver的官网下载最新版本，移动到/opt/目录，不要移动到/opt/google目录，会报错，原因未知，然后link到/usr/local/bin中 `sudo ln -fs /opt/chromedriver /usr/local/bin/chromedriver`\n\n在code里要关闭屏幕设置，代码如下\n```\nfrom selenium import webdriver\nfrom selenium.webdriver.chrome.options import Options\n\nCHROMEDRIVER_PATH = '/opt/chromedriver'\nWINDOW_SIZE = \"1920,1080\"\n\nchrome_options = Options()\nchrome_options.add_argument(\"--headless\")\nchrome_options.add_argument('--no-sandbox')\nchrome_options.add_argument(\"--window-size=%s\" % WINDOW_SIZE)\n\ndriver = webdriver.Chrome(executable_path=CHROMEDRIVER_PATH,\n                        options=chrome_options\n                        )\n\n```\n\n### 通用\n```\nmkdir ~/nginx_compile && cd ~/nginx_compile\nwget -c https://nginx.org/download/nginx-1.15.5.tar.gz && \ntar -zxvf nginx-1.15.5.tar.gz && rm nginx-1.15.5.tar.gz **\nrm nginx-1.15.5.tar.gz\n```\n\n安装依赖包\n-----------------------------\n### openSSL 1.1.1-pre2\n```\ncd ~/nginx_compile\nwget -c https://www.openssl.org/source/openssl-1.1.1.tar.gz && \ntar zxf openssl-1.1.1.tar.gz && \nrm openssl-1.1.1.tar.gz\n```\n\n### ngx_brotli\nBrotli是由Google的工程師所開發的一項壓縮演算法專案，目前運用在資料壓縮，當然主要是為了加快網頁的傳輸速度。目前Brotli已被各大主流瀏覽器支援，包含Chrome、Firefox、Edge與Safari等等。\n```\ngit clone https://github.com/google/ngx_brotli.git\npushd ngx_brotli\ngit submodule update --init\npopd\n```\n\n### Purge Cache\n\nhttp://labs.frickle.com/nginx_ngx_cache_purge/\n```\nwget http://labs.frickle.com/files/ngx_cache_purge-2.3.tar.gz && tar -zxvf ngx_cache_purge-2.3.tar.gz && rm ngx_cache_purge-2.3.tar.gz\n```\n\nConfig Nginx与安装\n-----------------------------\n```\n ./configure\n --sbin-path=/usr/bin/nginx\n --pid-path=/run/nginx.pid\n --conf-path=/etc/nginx/nginx.conf \n --error-log-path=/var/log/nginx/error.log \n --http-log-path=/var/log/nginx/access.log \n --with-pcre \n --with-http_image_filter_module=dynamic \n --modules-path=/etc/nginx/modules \n --with-http_v2_module \n --with-http_ssl_module \n --with-http_gzip_static_module \n --without-http_autoindex_module\n --with-http_geoip_module\n --with-openssl=../openssl-1.1.1\n --add-module=../ngx_brotli\n --add-module=../ngx_cache_purge-2.3\n --with-http_realip_module\n```\n--sbin-path nginx安装位置  \n--conf-path config文件位置  \n--with-pcre 用pcre library(regex)  \n--pid-path=/var/run/nginx.pid  pid位置  \n``` \nsudo make \nsudo make install  \nsudo nginx\n``` \n \nSystemd Settings:\n-----------------------------\n```\nsudo nginx -s stop\n```\ngo to https://www.nginx.com/resources/wiki/start/topics/examples/systemd/\n\ncreate systemd file and copy paste. Remember to modify the path to the correct path we configured.\n```\nsudo touch /lib/systemd/system/nginx.service\nsudo vim /lib/systemd/system/nginx.service\n```\n```\n[Unit]\nDescription=The NGINX HTTP and reverse proxy server\nAfter=syslog.target network.target remote-fs.target nss-lookup.target\n\n[Service]\nType=forking\nPIDFile=/run/nginx.pid\nExecStartPre=/usr/bin/nginx -t\nExecStart=/usr/bin/nginx\nExecReload=/usr/bin/nginx -s reload\nExecStop=/bin/kill -s QUIT $MAINPID\nPrivateTmp=true\n\n[Install]\nWantedBy=multi-user.target\n```\n```\nsudo systemctl start nginx\nsudo systemctl enable nginx    //enable nginx restart when reboot\n```\n\nCertbot  (尽量别用，因为会修改nginx的configure，腾讯云有一年免费SSL证书)\n----------------------------------------------------------\n去官网安装certbot\n修改 nginx.conf 中 http > server > server_name example.com\n**安装过程中全部enter跳过**\n\n```\n# Server\nlocation ^~ /.well-known/acme-challenge/ {\n   default_type \"text/plain\";\n   root     /usr/share/nginx/html;\n}\n\nlocation = /.well-known/acme-challenge/ {\n   return 404;\n}\n```\n\nsudo service nginx reload\n```\nsudo certbot certonly --webroot -w /usr/share/nginx/html/ -d your.domain.com\n```\nrenew:\n```\nsudo crontab -e\n```\n```\n@daily sudo certbot renew\n```\n\n添加 Brotli\n-----------------------------\n```\ngzip on;\n    # ... （Gzip壓縮格式的其他設定。）\n## brotli Compression.\nbrotli on;\nbrotli_comp_level 6;\n#『brotli_types』的值僅作參考，請依你的環境去做設定。\nbrotli_types text/plain text/css application/json application/javascript text/xml application/xml application/xml+rss text/javascript image/x-icon application/vnd.ms-fontobject font/opentype application/x-font-ttf;\n```\n\n安全\n----------------------------\n安装Diffie-Hellman \n```\nsudo openssl dhparam -out /etc/ssl/certs/dhparam.pem 2048\n```","source":"_posts/2018-11-25-python-spider-setup.md","raw":"---\nlayout: post\ntitle: Python3 + pip3 + chrome + chromedriver 在centos上设置\ncategories: Python\ndescription: Python config for my reference\nkeywords: keyword1, keyword2\ndate: 2018-11-25 00:00:00\nhidden: true\n---\n爬虫学习笔记\n\n<!-- more -->\n\n准备工作\n---------------\n### python3\n```\nsudo apt-get update & sudo apt-get upgrade -y\nsudo apt-get install build-essential libpcre3 libpcre3-dev zlib1g zlib1g-dev libssl-dev libgeoip-dev libgd-dev -y\n```\n> apt-get install apache2-utils 如果想用basic auth\n### Chrome\n\n安装chrome:\n```\ncurl https://intoli.com/install-google-chrome.sh | bash\n\nldd /opt/google/chrome/chrome | grep \"not found\"\n```\n\n测试一下对百度拍一个snapshot：\n```\ngoogle-chrome-stable --no-sandbox --headless --disable-gpu --screenshot https://www.baidu.com/\n```\n\n### Chromedriver\n在Chromedriver的官网下载最新版本，移动到/opt/目录，不要移动到/opt/google目录，会报错，原因未知，然后link到/usr/local/bin中 `sudo ln -fs /opt/chromedriver /usr/local/bin/chromedriver`\n\n在code里要关闭屏幕设置，代码如下\n```\nfrom selenium import webdriver\nfrom selenium.webdriver.chrome.options import Options\n\nCHROMEDRIVER_PATH = '/opt/chromedriver'\nWINDOW_SIZE = \"1920,1080\"\n\nchrome_options = Options()\nchrome_options.add_argument(\"--headless\")\nchrome_options.add_argument('--no-sandbox')\nchrome_options.add_argument(\"--window-size=%s\" % WINDOW_SIZE)\n\ndriver = webdriver.Chrome(executable_path=CHROMEDRIVER_PATH,\n                        options=chrome_options\n                        )\n\n```\n\n### 通用\n```\nmkdir ~/nginx_compile && cd ~/nginx_compile\nwget -c https://nginx.org/download/nginx-1.15.5.tar.gz && \ntar -zxvf nginx-1.15.5.tar.gz && rm nginx-1.15.5.tar.gz **\nrm nginx-1.15.5.tar.gz\n```\n\n安装依赖包\n-----------------------------\n### openSSL 1.1.1-pre2\n```\ncd ~/nginx_compile\nwget -c https://www.openssl.org/source/openssl-1.1.1.tar.gz && \ntar zxf openssl-1.1.1.tar.gz && \nrm openssl-1.1.1.tar.gz\n```\n\n### ngx_brotli\nBrotli是由Google的工程師所開發的一項壓縮演算法專案，目前運用在資料壓縮，當然主要是為了加快網頁的傳輸速度。目前Brotli已被各大主流瀏覽器支援，包含Chrome、Firefox、Edge與Safari等等。\n```\ngit clone https://github.com/google/ngx_brotli.git\npushd ngx_brotli\ngit submodule update --init\npopd\n```\n\n### Purge Cache\n\nhttp://labs.frickle.com/nginx_ngx_cache_purge/\n```\nwget http://labs.frickle.com/files/ngx_cache_purge-2.3.tar.gz && tar -zxvf ngx_cache_purge-2.3.tar.gz && rm ngx_cache_purge-2.3.tar.gz\n```\n\nConfig Nginx与安装\n-----------------------------\n```\n ./configure\n --sbin-path=/usr/bin/nginx\n --pid-path=/run/nginx.pid\n --conf-path=/etc/nginx/nginx.conf \n --error-log-path=/var/log/nginx/error.log \n --http-log-path=/var/log/nginx/access.log \n --with-pcre \n --with-http_image_filter_module=dynamic \n --modules-path=/etc/nginx/modules \n --with-http_v2_module \n --with-http_ssl_module \n --with-http_gzip_static_module \n --without-http_autoindex_module\n --with-http_geoip_module\n --with-openssl=../openssl-1.1.1\n --add-module=../ngx_brotli\n --add-module=../ngx_cache_purge-2.3\n --with-http_realip_module\n```\n--sbin-path nginx安装位置  \n--conf-path config文件位置  \n--with-pcre 用pcre library(regex)  \n--pid-path=/var/run/nginx.pid  pid位置  \n``` \nsudo make \nsudo make install  \nsudo nginx\n``` \n \nSystemd Settings:\n-----------------------------\n```\nsudo nginx -s stop\n```\ngo to https://www.nginx.com/resources/wiki/start/topics/examples/systemd/\n\ncreate systemd file and copy paste. Remember to modify the path to the correct path we configured.\n```\nsudo touch /lib/systemd/system/nginx.service\nsudo vim /lib/systemd/system/nginx.service\n```\n```\n[Unit]\nDescription=The NGINX HTTP and reverse proxy server\nAfter=syslog.target network.target remote-fs.target nss-lookup.target\n\n[Service]\nType=forking\nPIDFile=/run/nginx.pid\nExecStartPre=/usr/bin/nginx -t\nExecStart=/usr/bin/nginx\nExecReload=/usr/bin/nginx -s reload\nExecStop=/bin/kill -s QUIT $MAINPID\nPrivateTmp=true\n\n[Install]\nWantedBy=multi-user.target\n```\n```\nsudo systemctl start nginx\nsudo systemctl enable nginx    //enable nginx restart when reboot\n```\n\nCertbot  (尽量别用，因为会修改nginx的configure，腾讯云有一年免费SSL证书)\n----------------------------------------------------------\n去官网安装certbot\n修改 nginx.conf 中 http > server > server_name example.com\n**安装过程中全部enter跳过**\n\n```\n# Server\nlocation ^~ /.well-known/acme-challenge/ {\n   default_type \"text/plain\";\n   root     /usr/share/nginx/html;\n}\n\nlocation = /.well-known/acme-challenge/ {\n   return 404;\n}\n```\n\nsudo service nginx reload\n```\nsudo certbot certonly --webroot -w /usr/share/nginx/html/ -d your.domain.com\n```\nrenew:\n```\nsudo crontab -e\n```\n```\n@daily sudo certbot renew\n```\n\n添加 Brotli\n-----------------------------\n```\ngzip on;\n    # ... （Gzip壓縮格式的其他設定。）\n## brotli Compression.\nbrotli on;\nbrotli_comp_level 6;\n#『brotli_types』的值僅作參考，請依你的環境去做設定。\nbrotli_types text/plain text/css application/json application/javascript text/xml application/xml application/xml+rss text/javascript image/x-icon application/vnd.ms-fontobject font/opentype application/x-font-ttf;\n```\n\n安全\n----------------------------\n安装Diffie-Hellman \n```\nsudo openssl dhparam -out /etc/ssl/certs/dhparam.pem 2048\n```","slug":"2018-11-25-python-spider-setup","published":1,"updated":"2019-12-07T07:21:20.055Z","comments":1,"photos":[],"link":"","_id":"ck4ddyitc000aphvp517vbkg3","content":"<p>爬虫学习笔记</p>\n<a id=\"more\"></a>\n<h2 id=\"准备工作\"><a class=\"markdownIt-Anchor\" href=\"#准备工作\"></a> 准备工作</h2>\n<h3 id=\"python3\"><a class=\"markdownIt-Anchor\" href=\"#python3\"></a> python3</h3>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get update &amp; sudo apt-get upgrade -y</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get install build-essential libpcre3 libpcre3-dev zlib1g zlib1g-dev libssl-dev libgeoip-dev libgd-dev -y</span></pre></td></tr></table></figure>\n<blockquote>\n<p>apt-get install apache2-utils 如果想用basic auth</p>\n</blockquote>\n<h3 id=\"chrome\"><a class=\"markdownIt-Anchor\" href=\"#chrome\"></a> Chrome</h3>\n<p>安装chrome:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\">curl https:&#x2F;&#x2F;intoli.com&#x2F;install-google-chrome.sh | bash</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\">ldd &#x2F;opt&#x2F;google&#x2F;chrome&#x2F;chrome | grep &quot;not found&quot;</span></pre></td></tr></table></figure>\n<p>测试一下对百度拍一个snapshot：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\">google-chrome-stable --no-sandbox --headless --disable-gpu --screenshot https:&#x2F;&#x2F;www.baidu.com&#x2F;</span></pre></td></tr></table></figure>\n<h3 id=\"chromedriver\"><a class=\"markdownIt-Anchor\" href=\"#chromedriver\"></a> Chromedriver</h3>\n<p>在Chromedriver的官网下载最新版本，移动到/opt/目录，不要移动到/opt/google目录，会报错，原因未知，然后link到/usr/local/bin中 <code>sudo ln -fs /opt/chromedriver /usr/local/bin/chromedriver</code></p>\n<p>在code里要关闭屏幕设置，代码如下</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\">from selenium import webdriver</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\">from selenium.webdriver.chrome.options import Options</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">4</span></pre></td><td class=\"code\"><pre><span class=\"line\">CHROMEDRIVER_PATH &#x3D; &#39;&#x2F;opt&#x2F;chromedriver&#39;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">5</span></pre></td><td class=\"code\"><pre><span class=\"line\">WINDOW_SIZE &#x3D; &quot;1920,1080&quot;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">6</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">7</span></pre></td><td class=\"code\"><pre><span class=\"line\">chrome_options &#x3D; Options()</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">8</span></pre></td><td class=\"code\"><pre><span class=\"line\">chrome_options.add_argument(&quot;--headless&quot;)</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">9</span></pre></td><td class=\"code\"><pre><span class=\"line\">chrome_options.add_argument(&#39;--no-sandbox&#39;)</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">10</span></pre></td><td class=\"code\"><pre><span class=\"line\">chrome_options.add_argument(&quot;--window-size&#x3D;%s&quot; % WINDOW_SIZE)</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">11</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">12</span></pre></td><td class=\"code\"><pre><span class=\"line\">driver &#x3D; webdriver.Chrome(executable_path&#x3D;CHROMEDRIVER_PATH,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">13</span></pre></td><td class=\"code\"><pre><span class=\"line\">                        options&#x3D;chrome_options</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">14</span></pre></td><td class=\"code\"><pre><span class=\"line\">                        )</span></pre></td></tr></table></figure>\n<h3 id=\"通用\"><a class=\"markdownIt-Anchor\" href=\"#通用\"></a> 通用</h3>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\">mkdir ~&#x2F;nginx_compile &amp;&amp; cd ~&#x2F;nginx_compile</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\">wget -c https:&#x2F;&#x2F;nginx.org&#x2F;download&#x2F;nginx-1.15.5.tar.gz &amp;&amp; </span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\">tar -zxvf nginx-1.15.5.tar.gz &amp;&amp; rm nginx-1.15.5.tar.gz **</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">4</span></pre></td><td class=\"code\"><pre><span class=\"line\">rm nginx-1.15.5.tar.gz</span></pre></td></tr></table></figure>\n<h2 id=\"安装依赖包\"><a class=\"markdownIt-Anchor\" href=\"#安装依赖包\"></a> 安装依赖包</h2>\n<h3 id=\"openssl-111-pre2\"><a class=\"markdownIt-Anchor\" href=\"#openssl-111-pre2\"></a> openSSL 1.1.1-pre2</h3>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\">cd ~&#x2F;nginx_compile</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\">wget -c https:&#x2F;&#x2F;www.openssl.org&#x2F;source&#x2F;openssl-1.1.1.tar.gz &amp;&amp; </span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\">tar zxf openssl-1.1.1.tar.gz &amp;&amp; </span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">4</span></pre></td><td class=\"code\"><pre><span class=\"line\">rm openssl-1.1.1.tar.gz</span></pre></td></tr></table></figure>\n<h3 id=\"ngx_brotli\"><a class=\"markdownIt-Anchor\" href=\"#ngx_brotli\"></a> ngx_brotli</h3>\n<p>Brotli是由Google的工程師所開發的一項壓縮演算法專案，目前運用在資料壓縮，當然主要是為了加快網頁的傳輸速度。目前Brotli已被各大主流瀏覽器支援，包含Chrome、Firefox、Edge與Safari等等。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\">git clone https:&#x2F;&#x2F;github.com&#x2F;google&#x2F;ngx_brotli.git</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\">pushd ngx_brotli</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\">git submodule update --init</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">4</span></pre></td><td class=\"code\"><pre><span class=\"line\">popd</span></pre></td></tr></table></figure>\n<h3 id=\"purge-cache\"><a class=\"markdownIt-Anchor\" href=\"#purge-cache\"></a> Purge Cache</h3>\n<p><a href=\"http://labs.frickle.com/nginx_ngx_cache_purge/\" target=\"_blank\" rel=\"noopener\">http://labs.frickle.com/nginx_ngx_cache_purge/</a></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\">wget http:&#x2F;&#x2F;labs.frickle.com&#x2F;files&#x2F;ngx_cache_purge-2.3.tar.gz &amp;&amp; tar -zxvf ngx_cache_purge-2.3.tar.gz &amp;&amp; rm ngx_cache_purge-2.3.tar.gz</span></pre></td></tr></table></figure>\n<h2 id=\"config-nginx与安装\"><a class=\"markdownIt-Anchor\" href=\"#config-nginx与安装\"></a> Config Nginx与安装</h2>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\">.&#x2F;configure</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\">--sbin-path&#x3D;&#x2F;usr&#x2F;bin&#x2F;nginx</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\">--pid-path&#x3D;&#x2F;run&#x2F;nginx.pid</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">4</span></pre></td><td class=\"code\"><pre><span class=\"line\">--conf-path&#x3D;&#x2F;etc&#x2F;nginx&#x2F;nginx.conf </span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">5</span></pre></td><td class=\"code\"><pre><span class=\"line\">--error-log-path&#x3D;&#x2F;var&#x2F;log&#x2F;nginx&#x2F;error.log </span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">6</span></pre></td><td class=\"code\"><pre><span class=\"line\">--http-log-path&#x3D;&#x2F;var&#x2F;log&#x2F;nginx&#x2F;access.log </span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">7</span></pre></td><td class=\"code\"><pre><span class=\"line\">--with-pcre </span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">8</span></pre></td><td class=\"code\"><pre><span class=\"line\">--with-http_image_filter_module&#x3D;dynamic </span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">9</span></pre></td><td class=\"code\"><pre><span class=\"line\">--modules-path&#x3D;&#x2F;etc&#x2F;nginx&#x2F;modules </span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">10</span></pre></td><td class=\"code\"><pre><span class=\"line\">--with-http_v2_module </span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">11</span></pre></td><td class=\"code\"><pre><span class=\"line\">--with-http_ssl_module </span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">12</span></pre></td><td class=\"code\"><pre><span class=\"line\">--with-http_gzip_static_module </span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">13</span></pre></td><td class=\"code\"><pre><span class=\"line\">--without-http_autoindex_module</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">14</span></pre></td><td class=\"code\"><pre><span class=\"line\">--with-http_geoip_module</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">15</span></pre></td><td class=\"code\"><pre><span class=\"line\">--with-openssl&#x3D;..&#x2F;openssl-1.1.1</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">16</span></pre></td><td class=\"code\"><pre><span class=\"line\">--add-module&#x3D;..&#x2F;ngx_brotli</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">17</span></pre></td><td class=\"code\"><pre><span class=\"line\">--add-module&#x3D;..&#x2F;ngx_cache_purge-2.3</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">18</span></pre></td><td class=\"code\"><pre><span class=\"line\">--with-http_realip_module</span></pre></td></tr></table></figure>\n<p>–sbin-path nginx安装位置<br />\n–conf-path config文件位置<br />\n–with-pcre 用pcre library(regex)<br />\n–pid-path=/var/run/nginx.pid  pid位置</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\">sudo make </span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\">sudo make install  </span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\">sudo nginx</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">4</span></pre></td><td class=\"code\"><pre><span class=\"line\">&#96;&#96;&#96; </span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">5</span></pre></td><td class=\"code\"><pre><span class=\"line\"> </span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">6</span></pre></td><td class=\"code\"><pre><span class=\"line\">Systemd Settings:</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">7</span></pre></td><td class=\"code\"><pre><span class=\"line\">-----------------------------</span></pre></td></tr></table></figure>\n<p>sudo nginx -s stop</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\">go to https:&#x2F;&#x2F;www.nginx.com&#x2F;resources&#x2F;wiki&#x2F;start&#x2F;topics&#x2F;examples&#x2F;systemd&#x2F;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\">create systemd file and copy paste. Remember to modify the path to the correct path we configured.</span></pre></td></tr></table></figure>\n<p>sudo touch /lib/systemd/system/nginx.service<br />\nsudo vim /lib/systemd/system/nginx.service</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\">&#96;&#96;&#96;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\">[Unit]</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\">Description&#x3D;The NGINX HTTP and reverse proxy server</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">4</span></pre></td><td class=\"code\"><pre><span class=\"line\">After&#x3D;syslog.target network.target remote-fs.target nss-lookup.target</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">5</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">6</span></pre></td><td class=\"code\"><pre><span class=\"line\">[Service]</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">7</span></pre></td><td class=\"code\"><pre><span class=\"line\">Type&#x3D;forking</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">8</span></pre></td><td class=\"code\"><pre><span class=\"line\">PIDFile&#x3D;&#x2F;run&#x2F;nginx.pid</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">9</span></pre></td><td class=\"code\"><pre><span class=\"line\">ExecStartPre&#x3D;&#x2F;usr&#x2F;bin&#x2F;nginx -t</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">10</span></pre></td><td class=\"code\"><pre><span class=\"line\">ExecStart&#x3D;&#x2F;usr&#x2F;bin&#x2F;nginx</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">11</span></pre></td><td class=\"code\"><pre><span class=\"line\">ExecReload&#x3D;&#x2F;usr&#x2F;bin&#x2F;nginx -s reload</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">12</span></pre></td><td class=\"code\"><pre><span class=\"line\">ExecStop&#x3D;&#x2F;bin&#x2F;kill -s QUIT $MAINPID</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">13</span></pre></td><td class=\"code\"><pre><span class=\"line\">PrivateTmp&#x3D;true</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">14</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">15</span></pre></td><td class=\"code\"><pre><span class=\"line\">[Install]</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">16</span></pre></td><td class=\"code\"><pre><span class=\"line\">WantedBy&#x3D;multi-user.target</span></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\">sudo systemctl start nginx</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\">sudo systemctl enable nginx    &#x2F;&#x2F;enable nginx restart when reboot</span></pre></td></tr></table></figure>\n<h2 id=\"certbot-尽量别用因为会修改nginx的configure腾讯云有一年免费ssl证书\"><a class=\"markdownIt-Anchor\" href=\"#certbot-尽量别用因为会修改nginx的configure腾讯云有一年免费ssl证书\"></a> Certbot  (尽量别用，因为会修改nginx的configure，腾讯云有一年免费SSL证书)</h2>\n<p>去官网安装certbot<br />\n修改 nginx.conf 中 http &gt; server &gt; server_name <a href=\"http://example.com\" target=\"_blank\" rel=\"noopener\">example.com</a><br />\n<strong>安装过程中全部enter跳过</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\"># Server</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\">location ^~ &#x2F;.well-known&#x2F;acme-challenge&#x2F; &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\">   default_type &quot;text&#x2F;plain&quot;;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">4</span></pre></td><td class=\"code\"><pre><span class=\"line\">   root     &#x2F;usr&#x2F;share&#x2F;nginx&#x2F;html;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">5</span></pre></td><td class=\"code\"><pre><span class=\"line\">&#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">6</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">7</span></pre></td><td class=\"code\"><pre><span class=\"line\">location &#x3D; &#x2F;.well-known&#x2F;acme-challenge&#x2F; &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">8</span></pre></td><td class=\"code\"><pre><span class=\"line\">   return 404;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">9</span></pre></td><td class=\"code\"><pre><span class=\"line\">&#125;</span></pre></td></tr></table></figure>\n<p>sudo service nginx reload</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\">sudo certbot certonly --webroot -w &#x2F;usr&#x2F;share&#x2F;nginx&#x2F;html&#x2F; -d your.domain.com</span></pre></td></tr></table></figure>\n<p>renew:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\">sudo crontab -e</span></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\">@daily sudo certbot renew</span></pre></td></tr></table></figure>\n<h2 id=\"添加-brotli\"><a class=\"markdownIt-Anchor\" href=\"#添加-brotli\"></a> 添加 Brotli</h2>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\">gzip on;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\">    # ... （Gzip壓縮格式的其他設定。）</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\">## brotli Compression.</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">4</span></pre></td><td class=\"code\"><pre><span class=\"line\">brotli on;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">5</span></pre></td><td class=\"code\"><pre><span class=\"line\">brotli_comp_level 6;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">6</span></pre></td><td class=\"code\"><pre><span class=\"line\">#『brotli_types』的值僅作參考，請依你的環境去做設定。</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">7</span></pre></td><td class=\"code\"><pre><span class=\"line\">brotli_types text&#x2F;plain text&#x2F;css application&#x2F;json application&#x2F;javascript text&#x2F;xml application&#x2F;xml application&#x2F;xml+rss text&#x2F;javascript image&#x2F;x-icon application&#x2F;vnd.ms-fontobject font&#x2F;opentype application&#x2F;x-font-ttf;</span></pre></td></tr></table></figure>\n<h2 id=\"安全\"><a class=\"markdownIt-Anchor\" href=\"#安全\"></a> 安全</h2>\n<p>安装Diffie-Hellman</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\">sudo openssl dhparam -out &#x2F;etc&#x2F;ssl&#x2F;certs&#x2F;dhparam.pem 2048</span></pre></td></tr></table></figure><!-- flag of hidden posts -->","site":{"data":{}},"excerpt":"<p>爬虫学习笔记</p>","more":"<h2 id=\"准备工作\"><a class=\"markdownIt-Anchor\" href=\"#准备工作\"></a> 准备工作</h2>\n<h3 id=\"python3\"><a class=\"markdownIt-Anchor\" href=\"#python3\"></a> python3</h3>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get update &amp; sudo apt-get upgrade -y</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get install build-essential libpcre3 libpcre3-dev zlib1g zlib1g-dev libssl-dev libgeoip-dev libgd-dev -y</span></pre></td></tr></table></figure>\n<blockquote>\n<p>apt-get install apache2-utils 如果想用basic auth</p>\n</blockquote>\n<h3 id=\"chrome\"><a class=\"markdownIt-Anchor\" href=\"#chrome\"></a> Chrome</h3>\n<p>安装chrome:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\">curl https:&#x2F;&#x2F;intoli.com&#x2F;install-google-chrome.sh | bash</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\">ldd &#x2F;opt&#x2F;google&#x2F;chrome&#x2F;chrome | grep &quot;not found&quot;</span></pre></td></tr></table></figure>\n<p>测试一下对百度拍一个snapshot：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\">google-chrome-stable --no-sandbox --headless --disable-gpu --screenshot https:&#x2F;&#x2F;www.baidu.com&#x2F;</span></pre></td></tr></table></figure>\n<h3 id=\"chromedriver\"><a class=\"markdownIt-Anchor\" href=\"#chromedriver\"></a> Chromedriver</h3>\n<p>在Chromedriver的官网下载最新版本，移动到/opt/目录，不要移动到/opt/google目录，会报错，原因未知，然后link到/usr/local/bin中 <code>sudo ln -fs /opt/chromedriver /usr/local/bin/chromedriver</code></p>\n<p>在code里要关闭屏幕设置，代码如下</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\">from selenium import webdriver</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\">from selenium.webdriver.chrome.options import Options</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">4</span></pre></td><td class=\"code\"><pre><span class=\"line\">CHROMEDRIVER_PATH &#x3D; &#39;&#x2F;opt&#x2F;chromedriver&#39;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">5</span></pre></td><td class=\"code\"><pre><span class=\"line\">WINDOW_SIZE &#x3D; &quot;1920,1080&quot;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">6</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">7</span></pre></td><td class=\"code\"><pre><span class=\"line\">chrome_options &#x3D; Options()</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">8</span></pre></td><td class=\"code\"><pre><span class=\"line\">chrome_options.add_argument(&quot;--headless&quot;)</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">9</span></pre></td><td class=\"code\"><pre><span class=\"line\">chrome_options.add_argument(&#39;--no-sandbox&#39;)</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">10</span></pre></td><td class=\"code\"><pre><span class=\"line\">chrome_options.add_argument(&quot;--window-size&#x3D;%s&quot; % WINDOW_SIZE)</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">11</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">12</span></pre></td><td class=\"code\"><pre><span class=\"line\">driver &#x3D; webdriver.Chrome(executable_path&#x3D;CHROMEDRIVER_PATH,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">13</span></pre></td><td class=\"code\"><pre><span class=\"line\">                        options&#x3D;chrome_options</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">14</span></pre></td><td class=\"code\"><pre><span class=\"line\">                        )</span></pre></td></tr></table></figure>\n<h3 id=\"通用\"><a class=\"markdownIt-Anchor\" href=\"#通用\"></a> 通用</h3>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\">mkdir ~&#x2F;nginx_compile &amp;&amp; cd ~&#x2F;nginx_compile</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\">wget -c https:&#x2F;&#x2F;nginx.org&#x2F;download&#x2F;nginx-1.15.5.tar.gz &amp;&amp; </span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\">tar -zxvf nginx-1.15.5.tar.gz &amp;&amp; rm nginx-1.15.5.tar.gz **</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">4</span></pre></td><td class=\"code\"><pre><span class=\"line\">rm nginx-1.15.5.tar.gz</span></pre></td></tr></table></figure>\n<h2 id=\"安装依赖包\"><a class=\"markdownIt-Anchor\" href=\"#安装依赖包\"></a> 安装依赖包</h2>\n<h3 id=\"openssl-111-pre2\"><a class=\"markdownIt-Anchor\" href=\"#openssl-111-pre2\"></a> openSSL 1.1.1-pre2</h3>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\">cd ~&#x2F;nginx_compile</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\">wget -c https:&#x2F;&#x2F;www.openssl.org&#x2F;source&#x2F;openssl-1.1.1.tar.gz &amp;&amp; </span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\">tar zxf openssl-1.1.1.tar.gz &amp;&amp; </span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">4</span></pre></td><td class=\"code\"><pre><span class=\"line\">rm openssl-1.1.1.tar.gz</span></pre></td></tr></table></figure>\n<h3 id=\"ngx_brotli\"><a class=\"markdownIt-Anchor\" href=\"#ngx_brotli\"></a> ngx_brotli</h3>\n<p>Brotli是由Google的工程師所開發的一項壓縮演算法專案，目前運用在資料壓縮，當然主要是為了加快網頁的傳輸速度。目前Brotli已被各大主流瀏覽器支援，包含Chrome、Firefox、Edge與Safari等等。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\">git clone https:&#x2F;&#x2F;github.com&#x2F;google&#x2F;ngx_brotli.git</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\">pushd ngx_brotli</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\">git submodule update --init</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">4</span></pre></td><td class=\"code\"><pre><span class=\"line\">popd</span></pre></td></tr></table></figure>\n<h3 id=\"purge-cache\"><a class=\"markdownIt-Anchor\" href=\"#purge-cache\"></a> Purge Cache</h3>\n<p><a href=\"http://labs.frickle.com/nginx_ngx_cache_purge/\" target=\"_blank\" rel=\"noopener\">http://labs.frickle.com/nginx_ngx_cache_purge/</a></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\">wget http:&#x2F;&#x2F;labs.frickle.com&#x2F;files&#x2F;ngx_cache_purge-2.3.tar.gz &amp;&amp; tar -zxvf ngx_cache_purge-2.3.tar.gz &amp;&amp; rm ngx_cache_purge-2.3.tar.gz</span></pre></td></tr></table></figure>\n<h2 id=\"config-nginx与安装\"><a class=\"markdownIt-Anchor\" href=\"#config-nginx与安装\"></a> Config Nginx与安装</h2>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\">.&#x2F;configure</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\">--sbin-path&#x3D;&#x2F;usr&#x2F;bin&#x2F;nginx</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\">--pid-path&#x3D;&#x2F;run&#x2F;nginx.pid</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">4</span></pre></td><td class=\"code\"><pre><span class=\"line\">--conf-path&#x3D;&#x2F;etc&#x2F;nginx&#x2F;nginx.conf </span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">5</span></pre></td><td class=\"code\"><pre><span class=\"line\">--error-log-path&#x3D;&#x2F;var&#x2F;log&#x2F;nginx&#x2F;error.log </span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">6</span></pre></td><td class=\"code\"><pre><span class=\"line\">--http-log-path&#x3D;&#x2F;var&#x2F;log&#x2F;nginx&#x2F;access.log </span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">7</span></pre></td><td class=\"code\"><pre><span class=\"line\">--with-pcre </span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">8</span></pre></td><td class=\"code\"><pre><span class=\"line\">--with-http_image_filter_module&#x3D;dynamic </span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">9</span></pre></td><td class=\"code\"><pre><span class=\"line\">--modules-path&#x3D;&#x2F;etc&#x2F;nginx&#x2F;modules </span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">10</span></pre></td><td class=\"code\"><pre><span class=\"line\">--with-http_v2_module </span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">11</span></pre></td><td class=\"code\"><pre><span class=\"line\">--with-http_ssl_module </span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">12</span></pre></td><td class=\"code\"><pre><span class=\"line\">--with-http_gzip_static_module </span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">13</span></pre></td><td class=\"code\"><pre><span class=\"line\">--without-http_autoindex_module</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">14</span></pre></td><td class=\"code\"><pre><span class=\"line\">--with-http_geoip_module</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">15</span></pre></td><td class=\"code\"><pre><span class=\"line\">--with-openssl&#x3D;..&#x2F;openssl-1.1.1</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">16</span></pre></td><td class=\"code\"><pre><span class=\"line\">--add-module&#x3D;..&#x2F;ngx_brotli</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">17</span></pre></td><td class=\"code\"><pre><span class=\"line\">--add-module&#x3D;..&#x2F;ngx_cache_purge-2.3</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">18</span></pre></td><td class=\"code\"><pre><span class=\"line\">--with-http_realip_module</span></pre></td></tr></table></figure>\n<p>–sbin-path nginx安装位置<br />\n–conf-path config文件位置<br />\n–with-pcre 用pcre library(regex)<br />\n–pid-path=/var/run/nginx.pid  pid位置</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\">sudo make </span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\">sudo make install  </span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\">sudo nginx</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">4</span></pre></td><td class=\"code\"><pre><span class=\"line\">&#96;&#96;&#96; </span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">5</span></pre></td><td class=\"code\"><pre><span class=\"line\"> </span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">6</span></pre></td><td class=\"code\"><pre><span class=\"line\">Systemd Settings:</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">7</span></pre></td><td class=\"code\"><pre><span class=\"line\">-----------------------------</span></pre></td></tr></table></figure>\n<p>sudo nginx -s stop</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\">go to https:&#x2F;&#x2F;www.nginx.com&#x2F;resources&#x2F;wiki&#x2F;start&#x2F;topics&#x2F;examples&#x2F;systemd&#x2F;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\">create systemd file and copy paste. Remember to modify the path to the correct path we configured.</span></pre></td></tr></table></figure>\n<p>sudo touch /lib/systemd/system/nginx.service<br />\nsudo vim /lib/systemd/system/nginx.service</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\">&#96;&#96;&#96;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\">[Unit]</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\">Description&#x3D;The NGINX HTTP and reverse proxy server</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">4</span></pre></td><td class=\"code\"><pre><span class=\"line\">After&#x3D;syslog.target network.target remote-fs.target nss-lookup.target</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">5</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">6</span></pre></td><td class=\"code\"><pre><span class=\"line\">[Service]</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">7</span></pre></td><td class=\"code\"><pre><span class=\"line\">Type&#x3D;forking</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">8</span></pre></td><td class=\"code\"><pre><span class=\"line\">PIDFile&#x3D;&#x2F;run&#x2F;nginx.pid</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">9</span></pre></td><td class=\"code\"><pre><span class=\"line\">ExecStartPre&#x3D;&#x2F;usr&#x2F;bin&#x2F;nginx -t</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">10</span></pre></td><td class=\"code\"><pre><span class=\"line\">ExecStart&#x3D;&#x2F;usr&#x2F;bin&#x2F;nginx</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">11</span></pre></td><td class=\"code\"><pre><span class=\"line\">ExecReload&#x3D;&#x2F;usr&#x2F;bin&#x2F;nginx -s reload</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">12</span></pre></td><td class=\"code\"><pre><span class=\"line\">ExecStop&#x3D;&#x2F;bin&#x2F;kill -s QUIT $MAINPID</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">13</span></pre></td><td class=\"code\"><pre><span class=\"line\">PrivateTmp&#x3D;true</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">14</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">15</span></pre></td><td class=\"code\"><pre><span class=\"line\">[Install]</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">16</span></pre></td><td class=\"code\"><pre><span class=\"line\">WantedBy&#x3D;multi-user.target</span></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\">sudo systemctl start nginx</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\">sudo systemctl enable nginx    &#x2F;&#x2F;enable nginx restart when reboot</span></pre></td></tr></table></figure>\n<h2 id=\"certbot-尽量别用因为会修改nginx的configure腾讯云有一年免费ssl证书\"><a class=\"markdownIt-Anchor\" href=\"#certbot-尽量别用因为会修改nginx的configure腾讯云有一年免费ssl证书\"></a> Certbot  (尽量别用，因为会修改nginx的configure，腾讯云有一年免费SSL证书)</h2>\n<p>去官网安装certbot<br />\n修改 nginx.conf 中 http &gt; server &gt; server_name <a href=\"http://example.com\" target=\"_blank\" rel=\"noopener\">example.com</a><br />\n<strong>安装过程中全部enter跳过</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\"># Server</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\">location ^~ &#x2F;.well-known&#x2F;acme-challenge&#x2F; &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\">   default_type &quot;text&#x2F;plain&quot;;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">4</span></pre></td><td class=\"code\"><pre><span class=\"line\">   root     &#x2F;usr&#x2F;share&#x2F;nginx&#x2F;html;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">5</span></pre></td><td class=\"code\"><pre><span class=\"line\">&#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">6</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">7</span></pre></td><td class=\"code\"><pre><span class=\"line\">location &#x3D; &#x2F;.well-known&#x2F;acme-challenge&#x2F; &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">8</span></pre></td><td class=\"code\"><pre><span class=\"line\">   return 404;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">9</span></pre></td><td class=\"code\"><pre><span class=\"line\">&#125;</span></pre></td></tr></table></figure>\n<p>sudo service nginx reload</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\">sudo certbot certonly --webroot -w &#x2F;usr&#x2F;share&#x2F;nginx&#x2F;html&#x2F; -d your.domain.com</span></pre></td></tr></table></figure>\n<p>renew:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\">sudo crontab -e</span></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\">@daily sudo certbot renew</span></pre></td></tr></table></figure>\n<h2 id=\"添加-brotli\"><a class=\"markdownIt-Anchor\" href=\"#添加-brotli\"></a> 添加 Brotli</h2>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\">gzip on;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\">    # ... （Gzip壓縮格式的其他設定。）</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\">## brotli Compression.</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">4</span></pre></td><td class=\"code\"><pre><span class=\"line\">brotli on;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">5</span></pre></td><td class=\"code\"><pre><span class=\"line\">brotli_comp_level 6;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">6</span></pre></td><td class=\"code\"><pre><span class=\"line\">#『brotli_types』的值僅作參考，請依你的環境去做設定。</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">7</span></pre></td><td class=\"code\"><pre><span class=\"line\">brotli_types text&#x2F;plain text&#x2F;css application&#x2F;json application&#x2F;javascript text&#x2F;xml application&#x2F;xml application&#x2F;xml+rss text&#x2F;javascript image&#x2F;x-icon application&#x2F;vnd.ms-fontobject font&#x2F;opentype application&#x2F;x-font-ttf;</span></pre></td></tr></table></figure>\n<h2 id=\"安全\"><a class=\"markdownIt-Anchor\" href=\"#安全\"></a> 安全</h2>\n<p>安装Diffie-Hellman</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\">sudo openssl dhparam -out &#x2F;etc&#x2F;ssl&#x2F;certs&#x2F;dhparam.pem 2048</span></pre></td></tr></table></figure>"},{"layout":"post","title":"祝小🐑生日快乐","description":null,"keywords":"shirley","date":"2018-08-24T16:00:00.000Z","_content":"\n今天小🐑过生日，祝小🐑生日快乐🎂\n<!--more-->\n\n### 今天小🐑过生日，祝小🐑生日快乐🎂\n云送你个大蛋糕🎂\n\n<!--more-->\n\n![cake](../happy-birthday-to-miemie/sheep_cake.jpg)\n\nHope you'll like it lol","source":"_posts/happy-birthday-to-miemie.md","raw":"---\nlayout: post\ntitle: 祝小🐑生日快乐\ncategories: Blog\ndescription: \nkeywords: shirley\ndate: 2018-08-25 00:00:00\n---\n\n今天小🐑过生日，祝小🐑生日快乐🎂\n<!--more-->\n\n### 今天小🐑过生日，祝小🐑生日快乐🎂\n云送你个大蛋糕🎂\n\n<!--more-->\n\n![cake](../happy-birthday-to-miemie/sheep_cake.jpg)\n\nHope you'll like it lol","slug":"happy-birthday-to-miemie","published":1,"updated":"2019-12-07T09:04:43.399Z","comments":1,"photos":[],"link":"","_id":"ck4ddyite000cphvp0nny38n4","content":"<p>今天小🐑过生日，祝小🐑生日快乐🎂</p>\n<a id=\"more\"></a>\n<h3 id=\"今天小过生日祝小生日快乐\"><a class=\"markdownIt-Anchor\" href=\"#今天小过生日祝小生日快乐\"></a> 今天小🐑过生日，祝小🐑生日快乐🎂</h3>\n<p>云送你个大蛋糕🎂</p>\n<!--more-->\n<p><img src=\"../happy-birthday-to-miemie/sheep_cake.jpg\" alt=\"cake\" /></p>\n<p>Hope you’ll like it lol</p>\n","site":{"data":{}},"excerpt":"<p>今天小🐑过生日，祝小🐑生日快乐🎂</p>","more":"<h3 id=\"今天小过生日祝小生日快乐\"><a class=\"markdownIt-Anchor\" href=\"#今天小过生日祝小生日快乐\"></a> 今天小🐑过生日，祝小🐑生日快乐🎂</h3>\n<p>云送你个大蛋糕🎂</p>\n<!--more-->\n<p><img src=\"../happy-birthday-to-miemie/sheep_cake.jpg\" alt=\"cake\" /></p>\n<p>Hope you’ll like it lol</p>"},{"layout":"post","title":"腾讯云COS小程序开发指南","description":"踩坑笔记","keywords":"腾讯云","date":"2019-12-06T02:43:00.000Z","hidden":true,"_content":"小程序开发需要用到对象储存，因为使用腾讯云，所以腾讯云的COS也自然成为了go-to choice。就是开发过程有点坑，记录一下。\n\n<!-- more -->\n\n先附上腾讯云官方文档: [腾讯云COS](https://cloud.tencent.com/document/product/436/7751)\n我们还需要看两个库：\n微信COS SDK github: [cos-wx-sdk-v5](https://github.com/tencentyun/cos-wx-sdk-v5)\nJS COS SDK github: [cos-js-sdk-v5](https://github.com/tencentyun/cos-js-sdk-v5)\n\n## 用SDK开发小程序COS\n实现腾讯云COS分两步，第一步需要现在后端建立起sts验证API，以防止secretKey泄露。\n如果用SDK的话，可以参考 [cos-js-sdk-v5](https://github.com/tencentyun/cos-js-sdk-v5) 下面的server文档。\n\n\n这时你会发现竟然有两个版本的sts，一脸懵逼。文档也没解释清楚他们的区别，但是你要用SDK的话，选择sts.js 或sts.php 就可以了。因为用sts-auth结合SDK会报错。\n\n\n当你在复制粘贴后端代码的时候，一定注意把AllowPrefix 这一个字段修改为你想要上传的文件夹，比如 *** upload/\\* ***。如果你想使用其他COS API，比如删除操作，记得把 policy['statement']['action']里面对应的功能uncomment掉。\n\n在小程序里下载cos-wx-sdk-v5 到utils，然后对应引用就可以了，跟着demo走很简单。\n\n## 不用SDK开发小程序COS\n当你用了SDk，你就后悔了。\n\nwhy？\n\n因为cos-wx-sdk-v5这玩意竟然有600多kb？！小程序整个包大小不能超过2 MB，你告诉我我上传个破图片就要占我四分之一的容量，而且大多数人也就是用一个上传图片的功能吧？！\n\n所以sdk这个东西，你早晚都要删掉。\n\n这时你就要踩坑了。\n\n还是先搞后端，之前的sts.js 的API不能用了，因为你要重新写一个sts-auth的API。\n\n然后你就会发现，腾讯提供的github demo，其中有JS SDK, WX SDK, Node SDK... WTF?\n\n而且每个SDK demo下面的server demo还都不是一致的？？？\n\n经过几番折磨，我发现只有JS COS SDK github下面的auth-sts文件是对的: [auth-sts](https://github.com/tencentyun/cos-js-sdk-v5/blob/master/server/sts-auth.js)\n\n打开他，复制粘贴会吧。别把底下的express server也粘贴了，看看代码再复制啊。\n\n我把它抽离出来单独写了个 sts-autu-utlis, 代码如下:\n\n```\n// 临时密钥计算样例\n\nconst crypto = require('crypto');\nconst request = require('request');\n\nconst {\n  cos: {\n    SecretKey, SecretId, Region, Bucket,\n  },\n} = require('../../config');\n\n// 配置参数\nconst config = {\n  Url: 'https://sts.api.qcloud.com/v2/index.php',\n  Domain: 'sts.api.qcloud.com',\n  Proxy: '',\n  SecretId, // 固定密钥\n  SecretKey, // 固定密钥\n  Bucket,\n  Region,\n  AllowPrefix: 'upload/*', // 这里改成允许的路径前缀，这里可以根据自己网站的用户登录态判断允许上传的目录，例子：* 或者 a/* 或者 a.jpg\n};\n\n// 缓存临时密钥\nconst tempKeysCache = {\n  policyStr: '',\n  expiredTime: 0,\n};\n\nconst util = {\n  // 获取随机数\n  getRandom(min, max) {\n    return Math.round(Math.random() * (max - min) + min);\n  },\n  // obj 转 query string\n  json2str(obj, $notEncode) {\n    const arr = [];\n    Object.keys(obj).sort().forEach((item) => {\n      const val = obj[item] || '';\n      arr.push(`${item}=${$notEncode ? encodeURIComponent(val) : val}`);\n    });\n    return arr.join('&');\n  },\n  // 计算签名\n  getSignature(opt, key, method) {\n    const formatString = `${method + config.Domain}/v2/index.php?${util.json2str(opt)}`;\n    const hmac = crypto.createHmac('sha1', key);\n    const sign = hmac.update(Buffer.from(formatString, 'utf8')).digest('base64');\n    return sign;\n  },\n};\n\n// 拼接获取临时密钥的参数\nconst getTempKeys = function (callback) {\n  // 判断是否修改了 AllowPrefix\n  if (config.AllowPrefix === '_ALLOW_DIR_/*') {\n    callback({ error: '请修改 AllowPrefix 配置项，指定允许上传的路径前缀' });\n    return;\n  }\n\n  // 定义绑定临时密钥的权限策略\n  const ShortBucketName = config.Bucket.substr(0, config.Bucket.lastIndexOf('-'));\n  const AppId = config.Bucket.substr(1 + config.Bucket.lastIndexOf('-'));\n  const policy = {\n    version: '2.0',\n    statement: [{\n      action: [\n        // // 这里可以从临时密钥的权限上控制前端允许的操作\n        // 'name/cos:*', // 这样写可以包含下面所有权限\n\n        // // 列出所有允许的操作\n        // // ACL 读写\n        // 'name/cos:GetBucketACL',\n        // 'name/cos:PutBucketACL',\n        // 'name/cos:GetObjectACL',\n        // 'name/cos:PutObjectACL',\n        // // 简单 Bucket 操作\n        // 'name/cos:PutBucket',\n        // 'name/cos:HeadBucket',\n        // 'name/cos:GetBucket',\n        // 'name/cos:DeleteBucket',\n        // 'name/cos:GetBucketLocation',\n        // // Versioning\n        // 'name/cos:PutBucketVersioning',\n        // 'name/cos:GetBucketVersioning',\n        // // CORS\n        // 'name/cos:PutBucketCORS',\n        // 'name/cos:GetBucketCORS',\n        // 'name/cos:DeleteBucketCORS',\n        // // Lifecycle\n        // 'name/cos:PutBucketLifecycle',\n        // 'name/cos:GetBucketLifecycle',\n        // 'name/cos:DeleteBucketLifecycle',\n        // // Replication\n        // 'name/cos:PutBucketReplication',\n        // 'name/cos:GetBucketReplication',\n        // 'name/cos:DeleteBucketReplication',\n        // // 删除文件\n        'name/cos:DeleteMultipleObject',\n        'name/cos:DeleteObject',\n        // 简单文件操作\n        'name/cos:PutObject',\n        'name/cos:PostObject',\n        'name/cos:AppendObject',\n        'name/cos:GetObject',\n        'name/cos:HeadObject',\n        'name/cos:OptionsObject',\n        'name/cos:PutObjectCopy',\n        'name/cos:PostObjectRestore',\n        // 分片上传操作\n        'name/cos:InitiateMultipartUpload',\n        'name/cos:ListMultipartUploads',\n        'name/cos:ListParts',\n        'name/cos:UploadPart',\n        'name/cos:CompleteMultipartUpload',\n        'name/cos:AbortMultipartUpload',\n      ],\n      effect: 'allow',\n      principal: { qcs: ['*'] },\n      resource: [\n        `qcs::cos:${config.Region}:uid/${AppId}:prefix//${AppId}/${ShortBucketName}/`,\n        `qcs::cos:${config.Region}:uid/${AppId}:prefix//${AppId}/${ShortBucketName}/${config.AllowPrefix}`,\n      ],\n    }],\n  };\n\n  const policyStr = JSON.stringify(policy);\n\n  // 有效时间小于 30 秒就重新获取临时密钥，否则使用缓存的临时密钥\n  if (tempKeysCache.expiredTime - Date.now() / 1000 > 30 && tempKeysCache.policyStr === policyStr) {\n    callback(null, tempKeysCache);\n    return;\n  }\n\n  const Action = 'GetFederationToken';\n  const Nonce = util.getRandom(10000, 20000);\n  const Timestamp = parseInt(+new Date() / 1000);\n  const Method = 'POST';\n\n  const params = {\n    Region: 'gz',\n    SecretId: config.SecretId,\n    Timestamp,\n    Nonce,\n    Action,\n    durationSeconds: 7200,\n    name: 'cos',\n    policy: encodeURIComponent(policyStr).replace(/\\*/g, '%2A'),\n  };\n  params.Signature = util.getSignature(params, config.SecretKey, Method);\n\n  const opt = {\n    method: Method,\n    url: config.Url,\n    rejectUnauthorized: false,\n    json: true,\n    form: params,\n    headers: {\n      Host: config.Domain,\n    },\n    proxy: config.Proxy || '',\n  };\n  request(opt, (err, response, body) => {\n    if (body && body.data) body = body.data;\n    tempKeysCache.credentials = body.credentials;\n    tempKeysCache.expiredTime = body.expiredTime;\n    tempKeysCache.policyStr = policyStr;\n    callback(err, body);\n  });\n};\n\nmodule.exports = {\n  getTempKeys,\n};\n```\n\n跟上面一样，你还是要改AllowPrefix，和policy['statement']['action']\n\n\n然后做route:\n\n```\nrouter.all('*', (req, res, next) => {\n  res.header('Content-Type', 'application/json');\n  res.header('Access-Control-Allow-Origin', 'http://127.0.0.1');\n  res.header('Access-Control-Allow-Headers', 'origin,accept,content-type');\n  if (req.method.toUpperCase() === 'OPTIONS') {\n    res.end();\n  } else {\n    next();\n  }\n});\n\nrouter.all('/sts-auth', (req, res, next) => {\n  // 获取临时密钥，计算签名\n  getTempKeys((err, tempKeys) => {\n    var err = null;\n    let data;\n    if (err) {\n      data = err;\n    } else {\n      const pathname = req.body.pathname || req.query.pathname || '';\n      const Key = pathname.substr(0, 1) === '/' ? pathname.substr(1) : pathname;\n      const opt = {\n        SecretId: tempKeys.credentials.tmpSecretId,\n        SecretKey: tempKeys.credentials.tmpSecretKey,\n        Method: req.body.method || req.query.method,\n        Key,\n        Query: req.body.query || req.query.query || {},\n        Headers: req.body.headers || req.query.headers || {},\n      };\n      data = {\n        Authorization: COS.getAuthorization(opt),\n        XCosSecurityToken: tempKeys.credentials && tempKeys.credentials.sessionToken,\n      };\n    }\n    res.send(err || data);\n  });\n});\n```\n\n现在你访问你 https://your-api.com/sts-auth 就会得到 \"Authorization\" 和 \"XCosSecurityToken\"了。\n\n\n然后现在我们回到 WX COS SDK github的[demo](https://github.com/tencentyun/cos-wx-sdk-v5/blob/master/demo/demo-no-sdk.js)\n\n复制粘贴进你的小程序就好了，当然你需要根据你的业务做一些refactor。在uploadFile这个function里有个key，如果你在后端规定了AllowPrefix，记得在前面加上路径","source":"_posts/腾讯云COS小程序开发指南.md","raw":"---\nlayout: post\ntitle: 腾讯云COS小程序开发指南\ncategories: [cloud]\ndescription: 踩坑笔记\nkeywords: 腾讯云\ndate: 2019-12-06 10:43:00\ntags: cos\nhidden: true\n---\n小程序开发需要用到对象储存，因为使用腾讯云，所以腾讯云的COS也自然成为了go-to choice。就是开发过程有点坑，记录一下。\n\n<!-- more -->\n\n先附上腾讯云官方文档: [腾讯云COS](https://cloud.tencent.com/document/product/436/7751)\n我们还需要看两个库：\n微信COS SDK github: [cos-wx-sdk-v5](https://github.com/tencentyun/cos-wx-sdk-v5)\nJS COS SDK github: [cos-js-sdk-v5](https://github.com/tencentyun/cos-js-sdk-v5)\n\n## 用SDK开发小程序COS\n实现腾讯云COS分两步，第一步需要现在后端建立起sts验证API，以防止secretKey泄露。\n如果用SDK的话，可以参考 [cos-js-sdk-v5](https://github.com/tencentyun/cos-js-sdk-v5) 下面的server文档。\n\n\n这时你会发现竟然有两个版本的sts，一脸懵逼。文档也没解释清楚他们的区别，但是你要用SDK的话，选择sts.js 或sts.php 就可以了。因为用sts-auth结合SDK会报错。\n\n\n当你在复制粘贴后端代码的时候，一定注意把AllowPrefix 这一个字段修改为你想要上传的文件夹，比如 *** upload/\\* ***。如果你想使用其他COS API，比如删除操作，记得把 policy['statement']['action']里面对应的功能uncomment掉。\n\n在小程序里下载cos-wx-sdk-v5 到utils，然后对应引用就可以了，跟着demo走很简单。\n\n## 不用SDK开发小程序COS\n当你用了SDk，你就后悔了。\n\nwhy？\n\n因为cos-wx-sdk-v5这玩意竟然有600多kb？！小程序整个包大小不能超过2 MB，你告诉我我上传个破图片就要占我四分之一的容量，而且大多数人也就是用一个上传图片的功能吧？！\n\n所以sdk这个东西，你早晚都要删掉。\n\n这时你就要踩坑了。\n\n还是先搞后端，之前的sts.js 的API不能用了，因为你要重新写一个sts-auth的API。\n\n然后你就会发现，腾讯提供的github demo，其中有JS SDK, WX SDK, Node SDK... WTF?\n\n而且每个SDK demo下面的server demo还都不是一致的？？？\n\n经过几番折磨，我发现只有JS COS SDK github下面的auth-sts文件是对的: [auth-sts](https://github.com/tencentyun/cos-js-sdk-v5/blob/master/server/sts-auth.js)\n\n打开他，复制粘贴会吧。别把底下的express server也粘贴了，看看代码再复制啊。\n\n我把它抽离出来单独写了个 sts-autu-utlis, 代码如下:\n\n```\n// 临时密钥计算样例\n\nconst crypto = require('crypto');\nconst request = require('request');\n\nconst {\n  cos: {\n    SecretKey, SecretId, Region, Bucket,\n  },\n} = require('../../config');\n\n// 配置参数\nconst config = {\n  Url: 'https://sts.api.qcloud.com/v2/index.php',\n  Domain: 'sts.api.qcloud.com',\n  Proxy: '',\n  SecretId, // 固定密钥\n  SecretKey, // 固定密钥\n  Bucket,\n  Region,\n  AllowPrefix: 'upload/*', // 这里改成允许的路径前缀，这里可以根据自己网站的用户登录态判断允许上传的目录，例子：* 或者 a/* 或者 a.jpg\n};\n\n// 缓存临时密钥\nconst tempKeysCache = {\n  policyStr: '',\n  expiredTime: 0,\n};\n\nconst util = {\n  // 获取随机数\n  getRandom(min, max) {\n    return Math.round(Math.random() * (max - min) + min);\n  },\n  // obj 转 query string\n  json2str(obj, $notEncode) {\n    const arr = [];\n    Object.keys(obj).sort().forEach((item) => {\n      const val = obj[item] || '';\n      arr.push(`${item}=${$notEncode ? encodeURIComponent(val) : val}`);\n    });\n    return arr.join('&');\n  },\n  // 计算签名\n  getSignature(opt, key, method) {\n    const formatString = `${method + config.Domain}/v2/index.php?${util.json2str(opt)}`;\n    const hmac = crypto.createHmac('sha1', key);\n    const sign = hmac.update(Buffer.from(formatString, 'utf8')).digest('base64');\n    return sign;\n  },\n};\n\n// 拼接获取临时密钥的参数\nconst getTempKeys = function (callback) {\n  // 判断是否修改了 AllowPrefix\n  if (config.AllowPrefix === '_ALLOW_DIR_/*') {\n    callback({ error: '请修改 AllowPrefix 配置项，指定允许上传的路径前缀' });\n    return;\n  }\n\n  // 定义绑定临时密钥的权限策略\n  const ShortBucketName = config.Bucket.substr(0, config.Bucket.lastIndexOf('-'));\n  const AppId = config.Bucket.substr(1 + config.Bucket.lastIndexOf('-'));\n  const policy = {\n    version: '2.0',\n    statement: [{\n      action: [\n        // // 这里可以从临时密钥的权限上控制前端允许的操作\n        // 'name/cos:*', // 这样写可以包含下面所有权限\n\n        // // 列出所有允许的操作\n        // // ACL 读写\n        // 'name/cos:GetBucketACL',\n        // 'name/cos:PutBucketACL',\n        // 'name/cos:GetObjectACL',\n        // 'name/cos:PutObjectACL',\n        // // 简单 Bucket 操作\n        // 'name/cos:PutBucket',\n        // 'name/cos:HeadBucket',\n        // 'name/cos:GetBucket',\n        // 'name/cos:DeleteBucket',\n        // 'name/cos:GetBucketLocation',\n        // // Versioning\n        // 'name/cos:PutBucketVersioning',\n        // 'name/cos:GetBucketVersioning',\n        // // CORS\n        // 'name/cos:PutBucketCORS',\n        // 'name/cos:GetBucketCORS',\n        // 'name/cos:DeleteBucketCORS',\n        // // Lifecycle\n        // 'name/cos:PutBucketLifecycle',\n        // 'name/cos:GetBucketLifecycle',\n        // 'name/cos:DeleteBucketLifecycle',\n        // // Replication\n        // 'name/cos:PutBucketReplication',\n        // 'name/cos:GetBucketReplication',\n        // 'name/cos:DeleteBucketReplication',\n        // // 删除文件\n        'name/cos:DeleteMultipleObject',\n        'name/cos:DeleteObject',\n        // 简单文件操作\n        'name/cos:PutObject',\n        'name/cos:PostObject',\n        'name/cos:AppendObject',\n        'name/cos:GetObject',\n        'name/cos:HeadObject',\n        'name/cos:OptionsObject',\n        'name/cos:PutObjectCopy',\n        'name/cos:PostObjectRestore',\n        // 分片上传操作\n        'name/cos:InitiateMultipartUpload',\n        'name/cos:ListMultipartUploads',\n        'name/cos:ListParts',\n        'name/cos:UploadPart',\n        'name/cos:CompleteMultipartUpload',\n        'name/cos:AbortMultipartUpload',\n      ],\n      effect: 'allow',\n      principal: { qcs: ['*'] },\n      resource: [\n        `qcs::cos:${config.Region}:uid/${AppId}:prefix//${AppId}/${ShortBucketName}/`,\n        `qcs::cos:${config.Region}:uid/${AppId}:prefix//${AppId}/${ShortBucketName}/${config.AllowPrefix}`,\n      ],\n    }],\n  };\n\n  const policyStr = JSON.stringify(policy);\n\n  // 有效时间小于 30 秒就重新获取临时密钥，否则使用缓存的临时密钥\n  if (tempKeysCache.expiredTime - Date.now() / 1000 > 30 && tempKeysCache.policyStr === policyStr) {\n    callback(null, tempKeysCache);\n    return;\n  }\n\n  const Action = 'GetFederationToken';\n  const Nonce = util.getRandom(10000, 20000);\n  const Timestamp = parseInt(+new Date() / 1000);\n  const Method = 'POST';\n\n  const params = {\n    Region: 'gz',\n    SecretId: config.SecretId,\n    Timestamp,\n    Nonce,\n    Action,\n    durationSeconds: 7200,\n    name: 'cos',\n    policy: encodeURIComponent(policyStr).replace(/\\*/g, '%2A'),\n  };\n  params.Signature = util.getSignature(params, config.SecretKey, Method);\n\n  const opt = {\n    method: Method,\n    url: config.Url,\n    rejectUnauthorized: false,\n    json: true,\n    form: params,\n    headers: {\n      Host: config.Domain,\n    },\n    proxy: config.Proxy || '',\n  };\n  request(opt, (err, response, body) => {\n    if (body && body.data) body = body.data;\n    tempKeysCache.credentials = body.credentials;\n    tempKeysCache.expiredTime = body.expiredTime;\n    tempKeysCache.policyStr = policyStr;\n    callback(err, body);\n  });\n};\n\nmodule.exports = {\n  getTempKeys,\n};\n```\n\n跟上面一样，你还是要改AllowPrefix，和policy['statement']['action']\n\n\n然后做route:\n\n```\nrouter.all('*', (req, res, next) => {\n  res.header('Content-Type', 'application/json');\n  res.header('Access-Control-Allow-Origin', 'http://127.0.0.1');\n  res.header('Access-Control-Allow-Headers', 'origin,accept,content-type');\n  if (req.method.toUpperCase() === 'OPTIONS') {\n    res.end();\n  } else {\n    next();\n  }\n});\n\nrouter.all('/sts-auth', (req, res, next) => {\n  // 获取临时密钥，计算签名\n  getTempKeys((err, tempKeys) => {\n    var err = null;\n    let data;\n    if (err) {\n      data = err;\n    } else {\n      const pathname = req.body.pathname || req.query.pathname || '';\n      const Key = pathname.substr(0, 1) === '/' ? pathname.substr(1) : pathname;\n      const opt = {\n        SecretId: tempKeys.credentials.tmpSecretId,\n        SecretKey: tempKeys.credentials.tmpSecretKey,\n        Method: req.body.method || req.query.method,\n        Key,\n        Query: req.body.query || req.query.query || {},\n        Headers: req.body.headers || req.query.headers || {},\n      };\n      data = {\n        Authorization: COS.getAuthorization(opt),\n        XCosSecurityToken: tempKeys.credentials && tempKeys.credentials.sessionToken,\n      };\n    }\n    res.send(err || data);\n  });\n});\n```\n\n现在你访问你 https://your-api.com/sts-auth 就会得到 \"Authorization\" 和 \"XCosSecurityToken\"了。\n\n\n然后现在我们回到 WX COS SDK github的[demo](https://github.com/tencentyun/cos-wx-sdk-v5/blob/master/demo/demo-no-sdk.js)\n\n复制粘贴进你的小程序就好了，当然你需要根据你的业务做一些refactor。在uploadFile这个function里有个key，如果你在后端规定了AllowPrefix，记得在前面加上路径","slug":"腾讯云COS小程序开发指南","published":1,"updated":"2019-12-07T07:20:19.408Z","comments":1,"photos":[],"link":"","_id":"ck4ddyitx000wphvp3ut117au","content":"<p>小程序开发需要用到对象储存，因为使用腾讯云，所以腾讯云的COS也自然成为了go-to choice。就是开发过程有点坑，记录一下。</p>\n<a id=\"more\"></a>\n<p>先附上腾讯云官方文档: <a href=\"https://cloud.tencent.com/document/product/436/7751\" target=\"_blank\" rel=\"noopener\">腾讯云COS</a><br />\n我们还需要看两个库：<br />\n微信COS SDK github: <a href=\"https://github.com/tencentyun/cos-wx-sdk-v5\" target=\"_blank\" rel=\"noopener\">cos-wx-sdk-v5</a><br />\nJS COS SDK github: <a href=\"https://github.com/tencentyun/cos-js-sdk-v5\" target=\"_blank\" rel=\"noopener\">cos-js-sdk-v5</a></p>\n<h2 id=\"用sdk开发小程序cos\"><a class=\"markdownIt-Anchor\" href=\"#用sdk开发小程序cos\"></a> 用SDK开发小程序COS</h2>\n<p>实现腾讯云COS分两步，第一步需要现在后端建立起sts验证API，以防止secretKey泄露。<br />\n如果用SDK的话，可以参考 <a href=\"https://github.com/tencentyun/cos-js-sdk-v5\" target=\"_blank\" rel=\"noopener\">cos-js-sdk-v5</a> 下面的server文档。</p>\n<p>这时你会发现竟然有两个版本的sts，一脸懵逼。文档也没解释清楚他们的区别，但是你要用SDK的话，选择sts.js 或sts.php 就可以了。因为用sts-auth结合SDK会报错。</p>\n<p>当你在复制粘贴后端代码的时候，一定注意把AllowPrefix 这一个字段修改为你想要上传的文件夹，比如 *** upload/* ***。如果你想使用其他COS API，比如删除操作，记得把 policy[‘statement’][‘action’]里面对应的功能uncomment掉。</p>\n<p>在小程序里下载cos-wx-sdk-v5 到utils，然后对应引用就可以了，跟着demo走很简单。</p>\n<h2 id=\"不用sdk开发小程序cos\"><a class=\"markdownIt-Anchor\" href=\"#不用sdk开发小程序cos\"></a> 不用SDK开发小程序COS</h2>\n<p>当你用了SDk，你就后悔了。</p>\n<p>why？</p>\n<p>因为cos-wx-sdk-v5这玩意竟然有600多kb？！小程序整个包大小不能超过2 MB，你告诉我我上传个破图片就要占我四分之一的容量，而且大多数人也就是用一个上传图片的功能吧？！</p>\n<p>所以sdk这个东西，你早晚都要删掉。</p>\n<p>这时你就要踩坑了。</p>\n<p>还是先搞后端，之前的sts.js 的API不能用了，因为你要重新写一个sts-auth的API。</p>\n<p>然后你就会发现，腾讯提供的github demo，其中有JS SDK, WX SDK, Node SDK… WTF?</p>\n<p>而且每个SDK demo下面的server demo还都不是一致的？？？</p>\n<p>经过几番折磨，我发现只有JS COS SDK github下面的auth-sts文件是对的: <a href=\"https://github.com/tencentyun/cos-js-sdk-v5/blob/master/server/sts-auth.js\" target=\"_blank\" rel=\"noopener\">auth-sts</a></p>\n<p>打开他，复制粘贴会吧。别把底下的express server也粘贴了，看看代码再复制啊。</p>\n<p>我把它抽离出来单独写了个 sts-autu-utlis, 代码如下:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F; 临时密钥计算样例</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\">const crypto &#x3D; require(&#39;crypto&#39;);</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">4</span></pre></td><td class=\"code\"><pre><span class=\"line\">const request &#x3D; require(&#39;request&#39;);</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">5</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">6</span></pre></td><td class=\"code\"><pre><span class=\"line\">const &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">7</span></pre></td><td class=\"code\"><pre><span class=\"line\">  cos: &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">8</span></pre></td><td class=\"code\"><pre><span class=\"line\">    SecretKey, SecretId, Region, Bucket,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">9</span></pre></td><td class=\"code\"><pre><span class=\"line\">  &#125;,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">10</span></pre></td><td class=\"code\"><pre><span class=\"line\">&#125; &#x3D; require(&#39;..&#x2F;..&#x2F;config&#39;);</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">11</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">12</span></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F; 配置参数</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">13</span></pre></td><td class=\"code\"><pre><span class=\"line\">const config &#x3D; &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">14</span></pre></td><td class=\"code\"><pre><span class=\"line\">  Url: &#39;https:&#x2F;&#x2F;sts.api.qcloud.com&#x2F;v2&#x2F;index.php&#39;,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">15</span></pre></td><td class=\"code\"><pre><span class=\"line\">  Domain: &#39;sts.api.qcloud.com&#39;,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">16</span></pre></td><td class=\"code\"><pre><span class=\"line\">  Proxy: &#39;&#39;,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">17</span></pre></td><td class=\"code\"><pre><span class=\"line\">  SecretId, &#x2F;&#x2F; 固定密钥</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">18</span></pre></td><td class=\"code\"><pre><span class=\"line\">  SecretKey, &#x2F;&#x2F; 固定密钥</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">19</span></pre></td><td class=\"code\"><pre><span class=\"line\">  Bucket,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">20</span></pre></td><td class=\"code\"><pre><span class=\"line\">  Region,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">21</span></pre></td><td class=\"code\"><pre><span class=\"line\">  AllowPrefix: &#39;upload&#x2F;*&#39;, &#x2F;&#x2F; 这里改成允许的路径前缀，这里可以根据自己网站的用户登录态判断允许上传的目录，例子：* 或者 a&#x2F;* 或者 a.jpg</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">22</span></pre></td><td class=\"code\"><pre><span class=\"line\">&#125;;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">23</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">24</span></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F; 缓存临时密钥</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">25</span></pre></td><td class=\"code\"><pre><span class=\"line\">const tempKeysCache &#x3D; &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">26</span></pre></td><td class=\"code\"><pre><span class=\"line\">  policyStr: &#39;&#39;,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">27</span></pre></td><td class=\"code\"><pre><span class=\"line\">  expiredTime: 0,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">28</span></pre></td><td class=\"code\"><pre><span class=\"line\">&#125;;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">29</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">30</span></pre></td><td class=\"code\"><pre><span class=\"line\">const util &#x3D; &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">31</span></pre></td><td class=\"code\"><pre><span class=\"line\">  &#x2F;&#x2F; 获取随机数</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">32</span></pre></td><td class=\"code\"><pre><span class=\"line\">  getRandom(min, max) &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">33</span></pre></td><td class=\"code\"><pre><span class=\"line\">    return Math.round(Math.random() * (max - min) + min);</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">34</span></pre></td><td class=\"code\"><pre><span class=\"line\">  &#125;,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">35</span></pre></td><td class=\"code\"><pre><span class=\"line\">  &#x2F;&#x2F; obj 转 query string</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">36</span></pre></td><td class=\"code\"><pre><span class=\"line\">  json2str(obj, $notEncode) &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">37</span></pre></td><td class=\"code\"><pre><span class=\"line\">    const arr &#x3D; [];</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">38</span></pre></td><td class=\"code\"><pre><span class=\"line\">    Object.keys(obj).sort().forEach((item) &#x3D;&gt; &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">39</span></pre></td><td class=\"code\"><pre><span class=\"line\">      const val &#x3D; obj[item] || &#39;&#39;;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">40</span></pre></td><td class=\"code\"><pre><span class=\"line\">      arr.push(&#96;$&#123;item&#125;&#x3D;$&#123;$notEncode ? encodeURIComponent(val) : val&#125;&#96;);</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">41</span></pre></td><td class=\"code\"><pre><span class=\"line\">    &#125;);</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">42</span></pre></td><td class=\"code\"><pre><span class=\"line\">    return arr.join(&#39;&amp;&#39;);</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">43</span></pre></td><td class=\"code\"><pre><span class=\"line\">  &#125;,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">44</span></pre></td><td class=\"code\"><pre><span class=\"line\">  &#x2F;&#x2F; 计算签名</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">45</span></pre></td><td class=\"code\"><pre><span class=\"line\">  getSignature(opt, key, method) &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">46</span></pre></td><td class=\"code\"><pre><span class=\"line\">    const formatString &#x3D; &#96;$&#123;method + config.Domain&#125;&#x2F;v2&#x2F;index.php?$&#123;util.json2str(opt)&#125;&#96;;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">47</span></pre></td><td class=\"code\"><pre><span class=\"line\">    const hmac &#x3D; crypto.createHmac(&#39;sha1&#39;, key);</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">48</span></pre></td><td class=\"code\"><pre><span class=\"line\">    const sign &#x3D; hmac.update(Buffer.from(formatString, &#39;utf8&#39;)).digest(&#39;base64&#39;);</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">49</span></pre></td><td class=\"code\"><pre><span class=\"line\">    return sign;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">50</span></pre></td><td class=\"code\"><pre><span class=\"line\">  &#125;,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">51</span></pre></td><td class=\"code\"><pre><span class=\"line\">&#125;;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">52</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">53</span></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F; 拼接获取临时密钥的参数</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">54</span></pre></td><td class=\"code\"><pre><span class=\"line\">const getTempKeys &#x3D; function (callback) &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">55</span></pre></td><td class=\"code\"><pre><span class=\"line\">  &#x2F;&#x2F; 判断是否修改了 AllowPrefix</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">56</span></pre></td><td class=\"code\"><pre><span class=\"line\">  if (config.AllowPrefix &#x3D;&#x3D;&#x3D; &#39;_ALLOW_DIR_&#x2F;*&#39;) &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">57</span></pre></td><td class=\"code\"><pre><span class=\"line\">    callback(&#123; error: &#39;请修改 AllowPrefix 配置项，指定允许上传的路径前缀&#39; &#125;);</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">58</span></pre></td><td class=\"code\"><pre><span class=\"line\">    return;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">59</span></pre></td><td class=\"code\"><pre><span class=\"line\">  &#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">60</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">61</span></pre></td><td class=\"code\"><pre><span class=\"line\">  &#x2F;&#x2F; 定义绑定临时密钥的权限策略</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">62</span></pre></td><td class=\"code\"><pre><span class=\"line\">  const ShortBucketName &#x3D; config.Bucket.substr(0, config.Bucket.lastIndexOf(&#39;-&#39;));</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">63</span></pre></td><td class=\"code\"><pre><span class=\"line\">  const AppId &#x3D; config.Bucket.substr(1 + config.Bucket.lastIndexOf(&#39;-&#39;));</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">64</span></pre></td><td class=\"code\"><pre><span class=\"line\">  const policy &#x3D; &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">65</span></pre></td><td class=\"code\"><pre><span class=\"line\">    version: &#39;2.0&#39;,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">66</span></pre></td><td class=\"code\"><pre><span class=\"line\">    statement: [&#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">67</span></pre></td><td class=\"code\"><pre><span class=\"line\">      action: [</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">68</span></pre></td><td class=\"code\"><pre><span class=\"line\">        &#x2F;&#x2F; &#x2F;&#x2F; 这里可以从临时密钥的权限上控制前端允许的操作</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">69</span></pre></td><td class=\"code\"><pre><span class=\"line\">        &#x2F;&#x2F; &#39;name&#x2F;cos:*&#39;, &#x2F;&#x2F; 这样写可以包含下面所有权限</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">70</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">71</span></pre></td><td class=\"code\"><pre><span class=\"line\">        &#x2F;&#x2F; &#x2F;&#x2F; 列出所有允许的操作</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">72</span></pre></td><td class=\"code\"><pre><span class=\"line\">        &#x2F;&#x2F; &#x2F;&#x2F; ACL 读写</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">73</span></pre></td><td class=\"code\"><pre><span class=\"line\">        &#x2F;&#x2F; &#39;name&#x2F;cos:GetBucketACL&#39;,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">74</span></pre></td><td class=\"code\"><pre><span class=\"line\">        &#x2F;&#x2F; &#39;name&#x2F;cos:PutBucketACL&#39;,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">75</span></pre></td><td class=\"code\"><pre><span class=\"line\">        &#x2F;&#x2F; &#39;name&#x2F;cos:GetObjectACL&#39;,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">76</span></pre></td><td class=\"code\"><pre><span class=\"line\">        &#x2F;&#x2F; &#39;name&#x2F;cos:PutObjectACL&#39;,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">77</span></pre></td><td class=\"code\"><pre><span class=\"line\">        &#x2F;&#x2F; &#x2F;&#x2F; 简单 Bucket 操作</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">78</span></pre></td><td class=\"code\"><pre><span class=\"line\">        &#x2F;&#x2F; &#39;name&#x2F;cos:PutBucket&#39;,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">79</span></pre></td><td class=\"code\"><pre><span class=\"line\">        &#x2F;&#x2F; &#39;name&#x2F;cos:HeadBucket&#39;,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">80</span></pre></td><td class=\"code\"><pre><span class=\"line\">        &#x2F;&#x2F; &#39;name&#x2F;cos:GetBucket&#39;,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">81</span></pre></td><td class=\"code\"><pre><span class=\"line\">        &#x2F;&#x2F; &#39;name&#x2F;cos:DeleteBucket&#39;,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">82</span></pre></td><td class=\"code\"><pre><span class=\"line\">        &#x2F;&#x2F; &#39;name&#x2F;cos:GetBucketLocation&#39;,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">83</span></pre></td><td class=\"code\"><pre><span class=\"line\">        &#x2F;&#x2F; &#x2F;&#x2F; Versioning</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">84</span></pre></td><td class=\"code\"><pre><span class=\"line\">        &#x2F;&#x2F; &#39;name&#x2F;cos:PutBucketVersioning&#39;,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">85</span></pre></td><td class=\"code\"><pre><span class=\"line\">        &#x2F;&#x2F; &#39;name&#x2F;cos:GetBucketVersioning&#39;,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">86</span></pre></td><td class=\"code\"><pre><span class=\"line\">        &#x2F;&#x2F; &#x2F;&#x2F; CORS</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">87</span></pre></td><td class=\"code\"><pre><span class=\"line\">        &#x2F;&#x2F; &#39;name&#x2F;cos:PutBucketCORS&#39;,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">88</span></pre></td><td class=\"code\"><pre><span class=\"line\">        &#x2F;&#x2F; &#39;name&#x2F;cos:GetBucketCORS&#39;,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">89</span></pre></td><td class=\"code\"><pre><span class=\"line\">        &#x2F;&#x2F; &#39;name&#x2F;cos:DeleteBucketCORS&#39;,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">90</span></pre></td><td class=\"code\"><pre><span class=\"line\">        &#x2F;&#x2F; &#x2F;&#x2F; Lifecycle</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">91</span></pre></td><td class=\"code\"><pre><span class=\"line\">        &#x2F;&#x2F; &#39;name&#x2F;cos:PutBucketLifecycle&#39;,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">92</span></pre></td><td class=\"code\"><pre><span class=\"line\">        &#x2F;&#x2F; &#39;name&#x2F;cos:GetBucketLifecycle&#39;,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">93</span></pre></td><td class=\"code\"><pre><span class=\"line\">        &#x2F;&#x2F; &#39;name&#x2F;cos:DeleteBucketLifecycle&#39;,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">94</span></pre></td><td class=\"code\"><pre><span class=\"line\">        &#x2F;&#x2F; &#x2F;&#x2F; Replication</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">95</span></pre></td><td class=\"code\"><pre><span class=\"line\">        &#x2F;&#x2F; &#39;name&#x2F;cos:PutBucketReplication&#39;,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">96</span></pre></td><td class=\"code\"><pre><span class=\"line\">        &#x2F;&#x2F; &#39;name&#x2F;cos:GetBucketReplication&#39;,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">97</span></pre></td><td class=\"code\"><pre><span class=\"line\">        &#x2F;&#x2F; &#39;name&#x2F;cos:DeleteBucketReplication&#39;,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">98</span></pre></td><td class=\"code\"><pre><span class=\"line\">        &#x2F;&#x2F; &#x2F;&#x2F; 删除文件</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">99</span></pre></td><td class=\"code\"><pre><span class=\"line\">        &#39;name&#x2F;cos:DeleteMultipleObject&#39;,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">100</span></pre></td><td class=\"code\"><pre><span class=\"line\">        &#39;name&#x2F;cos:DeleteObject&#39;,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">101</span></pre></td><td class=\"code\"><pre><span class=\"line\">        &#x2F;&#x2F; 简单文件操作</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">102</span></pre></td><td class=\"code\"><pre><span class=\"line\">        &#39;name&#x2F;cos:PutObject&#39;,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">103</span></pre></td><td class=\"code\"><pre><span class=\"line\">        &#39;name&#x2F;cos:PostObject&#39;,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">104</span></pre></td><td class=\"code\"><pre><span class=\"line\">        &#39;name&#x2F;cos:AppendObject&#39;,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">105</span></pre></td><td class=\"code\"><pre><span class=\"line\">        &#39;name&#x2F;cos:GetObject&#39;,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">106</span></pre></td><td class=\"code\"><pre><span class=\"line\">        &#39;name&#x2F;cos:HeadObject&#39;,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">107</span></pre></td><td class=\"code\"><pre><span class=\"line\">        &#39;name&#x2F;cos:OptionsObject&#39;,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">108</span></pre></td><td class=\"code\"><pre><span class=\"line\">        &#39;name&#x2F;cos:PutObjectCopy&#39;,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">109</span></pre></td><td class=\"code\"><pre><span class=\"line\">        &#39;name&#x2F;cos:PostObjectRestore&#39;,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">110</span></pre></td><td class=\"code\"><pre><span class=\"line\">        &#x2F;&#x2F; 分片上传操作</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">111</span></pre></td><td class=\"code\"><pre><span class=\"line\">        &#39;name&#x2F;cos:InitiateMultipartUpload&#39;,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">112</span></pre></td><td class=\"code\"><pre><span class=\"line\">        &#39;name&#x2F;cos:ListMultipartUploads&#39;,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">113</span></pre></td><td class=\"code\"><pre><span class=\"line\">        &#39;name&#x2F;cos:ListParts&#39;,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">114</span></pre></td><td class=\"code\"><pre><span class=\"line\">        &#39;name&#x2F;cos:UploadPart&#39;,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">115</span></pre></td><td class=\"code\"><pre><span class=\"line\">        &#39;name&#x2F;cos:CompleteMultipartUpload&#39;,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">116</span></pre></td><td class=\"code\"><pre><span class=\"line\">        &#39;name&#x2F;cos:AbortMultipartUpload&#39;,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">117</span></pre></td><td class=\"code\"><pre><span class=\"line\">      ],</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">118</span></pre></td><td class=\"code\"><pre><span class=\"line\">      effect: &#39;allow&#39;,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">119</span></pre></td><td class=\"code\"><pre><span class=\"line\">      principal: &#123; qcs: [&#39;*&#39;] &#125;,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">120</span></pre></td><td class=\"code\"><pre><span class=\"line\">      resource: [</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">121</span></pre></td><td class=\"code\"><pre><span class=\"line\">        &#96;qcs::cos:$&#123;config.Region&#125;:uid&#x2F;$&#123;AppId&#125;:prefix&#x2F;&#x2F;$&#123;AppId&#125;&#x2F;$&#123;ShortBucketName&#125;&#x2F;&#96;,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">122</span></pre></td><td class=\"code\"><pre><span class=\"line\">        &#96;qcs::cos:$&#123;config.Region&#125;:uid&#x2F;$&#123;AppId&#125;:prefix&#x2F;&#x2F;$&#123;AppId&#125;&#x2F;$&#123;ShortBucketName&#125;&#x2F;$&#123;config.AllowPrefix&#125;&#96;,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">123</span></pre></td><td class=\"code\"><pre><span class=\"line\">      ],</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">124</span></pre></td><td class=\"code\"><pre><span class=\"line\">    &#125;],</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">125</span></pre></td><td class=\"code\"><pre><span class=\"line\">  &#125;;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">126</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">127</span></pre></td><td class=\"code\"><pre><span class=\"line\">  const policyStr &#x3D; JSON.stringify(policy);</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">128</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">129</span></pre></td><td class=\"code\"><pre><span class=\"line\">  &#x2F;&#x2F; 有效时间小于 30 秒就重新获取临时密钥，否则使用缓存的临时密钥</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">130</span></pre></td><td class=\"code\"><pre><span class=\"line\">  if (tempKeysCache.expiredTime - Date.now() &#x2F; 1000 &gt; 30 &amp;&amp; tempKeysCache.policyStr &#x3D;&#x3D;&#x3D; policyStr) &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">131</span></pre></td><td class=\"code\"><pre><span class=\"line\">    callback(null, tempKeysCache);</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">132</span></pre></td><td class=\"code\"><pre><span class=\"line\">    return;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">133</span></pre></td><td class=\"code\"><pre><span class=\"line\">  &#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">134</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">135</span></pre></td><td class=\"code\"><pre><span class=\"line\">  const Action &#x3D; &#39;GetFederationToken&#39;;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">136</span></pre></td><td class=\"code\"><pre><span class=\"line\">  const Nonce &#x3D; util.getRandom(10000, 20000);</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">137</span></pre></td><td class=\"code\"><pre><span class=\"line\">  const Timestamp &#x3D; parseInt(+new Date() &#x2F; 1000);</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">138</span></pre></td><td class=\"code\"><pre><span class=\"line\">  const Method &#x3D; &#39;POST&#39;;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">139</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">140</span></pre></td><td class=\"code\"><pre><span class=\"line\">  const params &#x3D; &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">141</span></pre></td><td class=\"code\"><pre><span class=\"line\">    Region: &#39;gz&#39;,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">142</span></pre></td><td class=\"code\"><pre><span class=\"line\">    SecretId: config.SecretId,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">143</span></pre></td><td class=\"code\"><pre><span class=\"line\">    Timestamp,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">144</span></pre></td><td class=\"code\"><pre><span class=\"line\">    Nonce,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">145</span></pre></td><td class=\"code\"><pre><span class=\"line\">    Action,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">146</span></pre></td><td class=\"code\"><pre><span class=\"line\">    durationSeconds: 7200,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">147</span></pre></td><td class=\"code\"><pre><span class=\"line\">    name: &#39;cos&#39;,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">148</span></pre></td><td class=\"code\"><pre><span class=\"line\">    policy: encodeURIComponent(policyStr).replace(&#x2F;\\*&#x2F;g, &#39;%2A&#39;),</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">149</span></pre></td><td class=\"code\"><pre><span class=\"line\">  &#125;;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">150</span></pre></td><td class=\"code\"><pre><span class=\"line\">  params.Signature &#x3D; util.getSignature(params, config.SecretKey, Method);</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">151</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">152</span></pre></td><td class=\"code\"><pre><span class=\"line\">  const opt &#x3D; &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">153</span></pre></td><td class=\"code\"><pre><span class=\"line\">    method: Method,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">154</span></pre></td><td class=\"code\"><pre><span class=\"line\">    url: config.Url,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">155</span></pre></td><td class=\"code\"><pre><span class=\"line\">    rejectUnauthorized: false,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">156</span></pre></td><td class=\"code\"><pre><span class=\"line\">    json: true,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">157</span></pre></td><td class=\"code\"><pre><span class=\"line\">    form: params,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">158</span></pre></td><td class=\"code\"><pre><span class=\"line\">    headers: &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">159</span></pre></td><td class=\"code\"><pre><span class=\"line\">      Host: config.Domain,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">160</span></pre></td><td class=\"code\"><pre><span class=\"line\">    &#125;,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">161</span></pre></td><td class=\"code\"><pre><span class=\"line\">    proxy: config.Proxy || &#39;&#39;,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">162</span></pre></td><td class=\"code\"><pre><span class=\"line\">  &#125;;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">163</span></pre></td><td class=\"code\"><pre><span class=\"line\">  request(opt, (err, response, body) &#x3D;&gt; &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">164</span></pre></td><td class=\"code\"><pre><span class=\"line\">    if (body &amp;&amp; body.data) body &#x3D; body.data;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">165</span></pre></td><td class=\"code\"><pre><span class=\"line\">    tempKeysCache.credentials &#x3D; body.credentials;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">166</span></pre></td><td class=\"code\"><pre><span class=\"line\">    tempKeysCache.expiredTime &#x3D; body.expiredTime;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">167</span></pre></td><td class=\"code\"><pre><span class=\"line\">    tempKeysCache.policyStr &#x3D; policyStr;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">168</span></pre></td><td class=\"code\"><pre><span class=\"line\">    callback(err, body);</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">169</span></pre></td><td class=\"code\"><pre><span class=\"line\">  &#125;);</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">170</span></pre></td><td class=\"code\"><pre><span class=\"line\">&#125;;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">171</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">172</span></pre></td><td class=\"code\"><pre><span class=\"line\">module.exports &#x3D; &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">173</span></pre></td><td class=\"code\"><pre><span class=\"line\">  getTempKeys,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">174</span></pre></td><td class=\"code\"><pre><span class=\"line\">&#125;;</span></pre></td></tr></table></figure>\n<p>跟上面一样，你还是要改AllowPrefix，和policy[‘statement’][‘action’]</p>\n<p>然后做route:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\">router.all(&#39;*&#39;, (req, res, next) &#x3D;&gt; &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\">  res.header(&#39;Content-Type&#39;, &#39;application&#x2F;json&#39;);</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\">  res.header(&#39;Access-Control-Allow-Origin&#39;, &#39;http:&#x2F;&#x2F;127.0.0.1&#39;);</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">4</span></pre></td><td class=\"code\"><pre><span class=\"line\">  res.header(&#39;Access-Control-Allow-Headers&#39;, &#39;origin,accept,content-type&#39;);</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">5</span></pre></td><td class=\"code\"><pre><span class=\"line\">  if (req.method.toUpperCase() &#x3D;&#x3D;&#x3D; &#39;OPTIONS&#39;) &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">6</span></pre></td><td class=\"code\"><pre><span class=\"line\">    res.end();</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">7</span></pre></td><td class=\"code\"><pre><span class=\"line\">  &#125; else &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">8</span></pre></td><td class=\"code\"><pre><span class=\"line\">    next();</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">9</span></pre></td><td class=\"code\"><pre><span class=\"line\">  &#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">10</span></pre></td><td class=\"code\"><pre><span class=\"line\">&#125;);</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">11</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">12</span></pre></td><td class=\"code\"><pre><span class=\"line\">router.all(&#39;&#x2F;sts-auth&#39;, (req, res, next) &#x3D;&gt; &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">13</span></pre></td><td class=\"code\"><pre><span class=\"line\">  &#x2F;&#x2F; 获取临时密钥，计算签名</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">14</span></pre></td><td class=\"code\"><pre><span class=\"line\">  getTempKeys((err, tempKeys) &#x3D;&gt; &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">15</span></pre></td><td class=\"code\"><pre><span class=\"line\">    var err &#x3D; null;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">16</span></pre></td><td class=\"code\"><pre><span class=\"line\">    let data;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">17</span></pre></td><td class=\"code\"><pre><span class=\"line\">    if (err) &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">18</span></pre></td><td class=\"code\"><pre><span class=\"line\">      data &#x3D; err;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">19</span></pre></td><td class=\"code\"><pre><span class=\"line\">    &#125; else &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">20</span></pre></td><td class=\"code\"><pre><span class=\"line\">      const pathname &#x3D; req.body.pathname || req.query.pathname || &#39;&#39;;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">21</span></pre></td><td class=\"code\"><pre><span class=\"line\">      const Key &#x3D; pathname.substr(0, 1) &#x3D;&#x3D;&#x3D; &#39;&#x2F;&#39; ? pathname.substr(1) : pathname;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">22</span></pre></td><td class=\"code\"><pre><span class=\"line\">      const opt &#x3D; &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">23</span></pre></td><td class=\"code\"><pre><span class=\"line\">        SecretId: tempKeys.credentials.tmpSecretId,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">24</span></pre></td><td class=\"code\"><pre><span class=\"line\">        SecretKey: tempKeys.credentials.tmpSecretKey,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">25</span></pre></td><td class=\"code\"><pre><span class=\"line\">        Method: req.body.method || req.query.method,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">26</span></pre></td><td class=\"code\"><pre><span class=\"line\">        Key,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">27</span></pre></td><td class=\"code\"><pre><span class=\"line\">        Query: req.body.query || req.query.query || &#123;&#125;,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">28</span></pre></td><td class=\"code\"><pre><span class=\"line\">        Headers: req.body.headers || req.query.headers || &#123;&#125;,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">29</span></pre></td><td class=\"code\"><pre><span class=\"line\">      &#125;;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">30</span></pre></td><td class=\"code\"><pre><span class=\"line\">      data &#x3D; &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">31</span></pre></td><td class=\"code\"><pre><span class=\"line\">        Authorization: COS.getAuthorization(opt),</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">32</span></pre></td><td class=\"code\"><pre><span class=\"line\">        XCosSecurityToken: tempKeys.credentials &amp;&amp; tempKeys.credentials.sessionToken,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">33</span></pre></td><td class=\"code\"><pre><span class=\"line\">      &#125;;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">34</span></pre></td><td class=\"code\"><pre><span class=\"line\">    &#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">35</span></pre></td><td class=\"code\"><pre><span class=\"line\">    res.send(err || data);</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">36</span></pre></td><td class=\"code\"><pre><span class=\"line\">  &#125;);</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">37</span></pre></td><td class=\"code\"><pre><span class=\"line\">&#125;);</span></pre></td></tr></table></figure>\n<p>现在你访问你 <a href=\"https://your-api.com/sts-auth\" target=\"_blank\" rel=\"noopener\">https://your-api.com/sts-auth</a> 就会得到 “Authorization” 和 &quot;XCosSecurityToken&quot;了。</p>\n<p>然后现在我们回到 WX COS SDK github的<a href=\"https://github.com/tencentyun/cos-wx-sdk-v5/blob/master/demo/demo-no-sdk.js\" target=\"_blank\" rel=\"noopener\">demo</a></p>\n<p>复制粘贴进你的小程序就好了，当然你需要根据你的业务做一些refactor。在uploadFile这个function里有个key，如果你在后端规定了AllowPrefix，记得在前面加上路径</p>\n<!-- flag of hidden posts -->","site":{"data":{}},"excerpt":"<p>小程序开发需要用到对象储存，因为使用腾讯云，所以腾讯云的COS也自然成为了go-to choice。就是开发过程有点坑，记录一下。</p>","more":"<p>先附上腾讯云官方文档: <a href=\"https://cloud.tencent.com/document/product/436/7751\" target=\"_blank\" rel=\"noopener\">腾讯云COS</a><br />\n我们还需要看两个库：<br />\n微信COS SDK github: <a href=\"https://github.com/tencentyun/cos-wx-sdk-v5\" target=\"_blank\" rel=\"noopener\">cos-wx-sdk-v5</a><br />\nJS COS SDK github: <a href=\"https://github.com/tencentyun/cos-js-sdk-v5\" target=\"_blank\" rel=\"noopener\">cos-js-sdk-v5</a></p>\n<h2 id=\"用sdk开发小程序cos\"><a class=\"markdownIt-Anchor\" href=\"#用sdk开发小程序cos\"></a> 用SDK开发小程序COS</h2>\n<p>实现腾讯云COS分两步，第一步需要现在后端建立起sts验证API，以防止secretKey泄露。<br />\n如果用SDK的话，可以参考 <a href=\"https://github.com/tencentyun/cos-js-sdk-v5\" target=\"_blank\" rel=\"noopener\">cos-js-sdk-v5</a> 下面的server文档。</p>\n<p>这时你会发现竟然有两个版本的sts，一脸懵逼。文档也没解释清楚他们的区别，但是你要用SDK的话，选择sts.js 或sts.php 就可以了。因为用sts-auth结合SDK会报错。</p>\n<p>当你在复制粘贴后端代码的时候，一定注意把AllowPrefix 这一个字段修改为你想要上传的文件夹，比如 *** upload/* ***。如果你想使用其他COS API，比如删除操作，记得把 policy[‘statement’][‘action’]里面对应的功能uncomment掉。</p>\n<p>在小程序里下载cos-wx-sdk-v5 到utils，然后对应引用就可以了，跟着demo走很简单。</p>\n<h2 id=\"不用sdk开发小程序cos\"><a class=\"markdownIt-Anchor\" href=\"#不用sdk开发小程序cos\"></a> 不用SDK开发小程序COS</h2>\n<p>当你用了SDk，你就后悔了。</p>\n<p>why？</p>\n<p>因为cos-wx-sdk-v5这玩意竟然有600多kb？！小程序整个包大小不能超过2 MB，你告诉我我上传个破图片就要占我四分之一的容量，而且大多数人也就是用一个上传图片的功能吧？！</p>\n<p>所以sdk这个东西，你早晚都要删掉。</p>\n<p>这时你就要踩坑了。</p>\n<p>还是先搞后端，之前的sts.js 的API不能用了，因为你要重新写一个sts-auth的API。</p>\n<p>然后你就会发现，腾讯提供的github demo，其中有JS SDK, WX SDK, Node SDK… WTF?</p>\n<p>而且每个SDK demo下面的server demo还都不是一致的？？？</p>\n<p>经过几番折磨，我发现只有JS COS SDK github下面的auth-sts文件是对的: <a href=\"https://github.com/tencentyun/cos-js-sdk-v5/blob/master/server/sts-auth.js\" target=\"_blank\" rel=\"noopener\">auth-sts</a></p>\n<p>打开他，复制粘贴会吧。别把底下的express server也粘贴了，看看代码再复制啊。</p>\n<p>我把它抽离出来单独写了个 sts-autu-utlis, 代码如下:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F; 临时密钥计算样例</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\">const crypto &#x3D; require(&#39;crypto&#39;);</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">4</span></pre></td><td class=\"code\"><pre><span class=\"line\">const request &#x3D; require(&#39;request&#39;);</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">5</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">6</span></pre></td><td class=\"code\"><pre><span class=\"line\">const &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">7</span></pre></td><td class=\"code\"><pre><span class=\"line\">  cos: &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">8</span></pre></td><td class=\"code\"><pre><span class=\"line\">    SecretKey, SecretId, Region, Bucket,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">9</span></pre></td><td class=\"code\"><pre><span class=\"line\">  &#125;,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">10</span></pre></td><td class=\"code\"><pre><span class=\"line\">&#125; &#x3D; require(&#39;..&#x2F;..&#x2F;config&#39;);</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">11</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">12</span></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F; 配置参数</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">13</span></pre></td><td class=\"code\"><pre><span class=\"line\">const config &#x3D; &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">14</span></pre></td><td class=\"code\"><pre><span class=\"line\">  Url: &#39;https:&#x2F;&#x2F;sts.api.qcloud.com&#x2F;v2&#x2F;index.php&#39;,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">15</span></pre></td><td class=\"code\"><pre><span class=\"line\">  Domain: &#39;sts.api.qcloud.com&#39;,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">16</span></pre></td><td class=\"code\"><pre><span class=\"line\">  Proxy: &#39;&#39;,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">17</span></pre></td><td class=\"code\"><pre><span class=\"line\">  SecretId, &#x2F;&#x2F; 固定密钥</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">18</span></pre></td><td class=\"code\"><pre><span class=\"line\">  SecretKey, &#x2F;&#x2F; 固定密钥</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">19</span></pre></td><td class=\"code\"><pre><span class=\"line\">  Bucket,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">20</span></pre></td><td class=\"code\"><pre><span class=\"line\">  Region,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">21</span></pre></td><td class=\"code\"><pre><span class=\"line\">  AllowPrefix: &#39;upload&#x2F;*&#39;, &#x2F;&#x2F; 这里改成允许的路径前缀，这里可以根据自己网站的用户登录态判断允许上传的目录，例子：* 或者 a&#x2F;* 或者 a.jpg</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">22</span></pre></td><td class=\"code\"><pre><span class=\"line\">&#125;;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">23</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">24</span></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F; 缓存临时密钥</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">25</span></pre></td><td class=\"code\"><pre><span class=\"line\">const tempKeysCache &#x3D; &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">26</span></pre></td><td class=\"code\"><pre><span class=\"line\">  policyStr: &#39;&#39;,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">27</span></pre></td><td class=\"code\"><pre><span class=\"line\">  expiredTime: 0,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">28</span></pre></td><td class=\"code\"><pre><span class=\"line\">&#125;;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">29</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">30</span></pre></td><td class=\"code\"><pre><span class=\"line\">const util &#x3D; &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">31</span></pre></td><td class=\"code\"><pre><span class=\"line\">  &#x2F;&#x2F; 获取随机数</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">32</span></pre></td><td class=\"code\"><pre><span class=\"line\">  getRandom(min, max) &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">33</span></pre></td><td class=\"code\"><pre><span class=\"line\">    return Math.round(Math.random() * (max - min) + min);</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">34</span></pre></td><td class=\"code\"><pre><span class=\"line\">  &#125;,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">35</span></pre></td><td class=\"code\"><pre><span class=\"line\">  &#x2F;&#x2F; obj 转 query string</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">36</span></pre></td><td class=\"code\"><pre><span class=\"line\">  json2str(obj, $notEncode) &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">37</span></pre></td><td class=\"code\"><pre><span class=\"line\">    const arr &#x3D; [];</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">38</span></pre></td><td class=\"code\"><pre><span class=\"line\">    Object.keys(obj).sort().forEach((item) &#x3D;&gt; &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">39</span></pre></td><td class=\"code\"><pre><span class=\"line\">      const val &#x3D; obj[item] || &#39;&#39;;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">40</span></pre></td><td class=\"code\"><pre><span class=\"line\">      arr.push(&#96;$&#123;item&#125;&#x3D;$&#123;$notEncode ? encodeURIComponent(val) : val&#125;&#96;);</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">41</span></pre></td><td class=\"code\"><pre><span class=\"line\">    &#125;);</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">42</span></pre></td><td class=\"code\"><pre><span class=\"line\">    return arr.join(&#39;&amp;&#39;);</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">43</span></pre></td><td class=\"code\"><pre><span class=\"line\">  &#125;,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">44</span></pre></td><td class=\"code\"><pre><span class=\"line\">  &#x2F;&#x2F; 计算签名</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">45</span></pre></td><td class=\"code\"><pre><span class=\"line\">  getSignature(opt, key, method) &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">46</span></pre></td><td class=\"code\"><pre><span class=\"line\">    const formatString &#x3D; &#96;$&#123;method + config.Domain&#125;&#x2F;v2&#x2F;index.php?$&#123;util.json2str(opt)&#125;&#96;;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">47</span></pre></td><td class=\"code\"><pre><span class=\"line\">    const hmac &#x3D; crypto.createHmac(&#39;sha1&#39;, key);</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">48</span></pre></td><td class=\"code\"><pre><span class=\"line\">    const sign &#x3D; hmac.update(Buffer.from(formatString, &#39;utf8&#39;)).digest(&#39;base64&#39;);</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">49</span></pre></td><td class=\"code\"><pre><span class=\"line\">    return sign;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">50</span></pre></td><td class=\"code\"><pre><span class=\"line\">  &#125;,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">51</span></pre></td><td class=\"code\"><pre><span class=\"line\">&#125;;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">52</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">53</span></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F; 拼接获取临时密钥的参数</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">54</span></pre></td><td class=\"code\"><pre><span class=\"line\">const getTempKeys &#x3D; function (callback) &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">55</span></pre></td><td class=\"code\"><pre><span class=\"line\">  &#x2F;&#x2F; 判断是否修改了 AllowPrefix</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">56</span></pre></td><td class=\"code\"><pre><span class=\"line\">  if (config.AllowPrefix &#x3D;&#x3D;&#x3D; &#39;_ALLOW_DIR_&#x2F;*&#39;) &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">57</span></pre></td><td class=\"code\"><pre><span class=\"line\">    callback(&#123; error: &#39;请修改 AllowPrefix 配置项，指定允许上传的路径前缀&#39; &#125;);</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">58</span></pre></td><td class=\"code\"><pre><span class=\"line\">    return;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">59</span></pre></td><td class=\"code\"><pre><span class=\"line\">  &#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">60</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">61</span></pre></td><td class=\"code\"><pre><span class=\"line\">  &#x2F;&#x2F; 定义绑定临时密钥的权限策略</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">62</span></pre></td><td class=\"code\"><pre><span class=\"line\">  const ShortBucketName &#x3D; config.Bucket.substr(0, config.Bucket.lastIndexOf(&#39;-&#39;));</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">63</span></pre></td><td class=\"code\"><pre><span class=\"line\">  const AppId &#x3D; config.Bucket.substr(1 + config.Bucket.lastIndexOf(&#39;-&#39;));</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">64</span></pre></td><td class=\"code\"><pre><span class=\"line\">  const policy &#x3D; &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">65</span></pre></td><td class=\"code\"><pre><span class=\"line\">    version: &#39;2.0&#39;,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">66</span></pre></td><td class=\"code\"><pre><span class=\"line\">    statement: [&#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">67</span></pre></td><td class=\"code\"><pre><span class=\"line\">      action: [</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">68</span></pre></td><td class=\"code\"><pre><span class=\"line\">        &#x2F;&#x2F; &#x2F;&#x2F; 这里可以从临时密钥的权限上控制前端允许的操作</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">69</span></pre></td><td class=\"code\"><pre><span class=\"line\">        &#x2F;&#x2F; &#39;name&#x2F;cos:*&#39;, &#x2F;&#x2F; 这样写可以包含下面所有权限</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">70</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">71</span></pre></td><td class=\"code\"><pre><span class=\"line\">        &#x2F;&#x2F; &#x2F;&#x2F; 列出所有允许的操作</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">72</span></pre></td><td class=\"code\"><pre><span class=\"line\">        &#x2F;&#x2F; &#x2F;&#x2F; ACL 读写</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">73</span></pre></td><td class=\"code\"><pre><span class=\"line\">        &#x2F;&#x2F; &#39;name&#x2F;cos:GetBucketACL&#39;,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">74</span></pre></td><td class=\"code\"><pre><span class=\"line\">        &#x2F;&#x2F; &#39;name&#x2F;cos:PutBucketACL&#39;,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">75</span></pre></td><td class=\"code\"><pre><span class=\"line\">        &#x2F;&#x2F; &#39;name&#x2F;cos:GetObjectACL&#39;,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">76</span></pre></td><td class=\"code\"><pre><span class=\"line\">        &#x2F;&#x2F; &#39;name&#x2F;cos:PutObjectACL&#39;,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">77</span></pre></td><td class=\"code\"><pre><span class=\"line\">        &#x2F;&#x2F; &#x2F;&#x2F; 简单 Bucket 操作</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">78</span></pre></td><td class=\"code\"><pre><span class=\"line\">        &#x2F;&#x2F; &#39;name&#x2F;cos:PutBucket&#39;,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">79</span></pre></td><td class=\"code\"><pre><span class=\"line\">        &#x2F;&#x2F; &#39;name&#x2F;cos:HeadBucket&#39;,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">80</span></pre></td><td class=\"code\"><pre><span class=\"line\">        &#x2F;&#x2F; &#39;name&#x2F;cos:GetBucket&#39;,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">81</span></pre></td><td class=\"code\"><pre><span class=\"line\">        &#x2F;&#x2F; &#39;name&#x2F;cos:DeleteBucket&#39;,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">82</span></pre></td><td class=\"code\"><pre><span class=\"line\">        &#x2F;&#x2F; &#39;name&#x2F;cos:GetBucketLocation&#39;,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">83</span></pre></td><td class=\"code\"><pre><span class=\"line\">        &#x2F;&#x2F; &#x2F;&#x2F; Versioning</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">84</span></pre></td><td class=\"code\"><pre><span class=\"line\">        &#x2F;&#x2F; &#39;name&#x2F;cos:PutBucketVersioning&#39;,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">85</span></pre></td><td class=\"code\"><pre><span class=\"line\">        &#x2F;&#x2F; &#39;name&#x2F;cos:GetBucketVersioning&#39;,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">86</span></pre></td><td class=\"code\"><pre><span class=\"line\">        &#x2F;&#x2F; &#x2F;&#x2F; CORS</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">87</span></pre></td><td class=\"code\"><pre><span class=\"line\">        &#x2F;&#x2F; &#39;name&#x2F;cos:PutBucketCORS&#39;,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">88</span></pre></td><td class=\"code\"><pre><span class=\"line\">        &#x2F;&#x2F; &#39;name&#x2F;cos:GetBucketCORS&#39;,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">89</span></pre></td><td class=\"code\"><pre><span class=\"line\">        &#x2F;&#x2F; &#39;name&#x2F;cos:DeleteBucketCORS&#39;,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">90</span></pre></td><td class=\"code\"><pre><span class=\"line\">        &#x2F;&#x2F; &#x2F;&#x2F; Lifecycle</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">91</span></pre></td><td class=\"code\"><pre><span class=\"line\">        &#x2F;&#x2F; &#39;name&#x2F;cos:PutBucketLifecycle&#39;,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">92</span></pre></td><td class=\"code\"><pre><span class=\"line\">        &#x2F;&#x2F; &#39;name&#x2F;cos:GetBucketLifecycle&#39;,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">93</span></pre></td><td class=\"code\"><pre><span class=\"line\">        &#x2F;&#x2F; &#39;name&#x2F;cos:DeleteBucketLifecycle&#39;,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">94</span></pre></td><td class=\"code\"><pre><span class=\"line\">        &#x2F;&#x2F; &#x2F;&#x2F; Replication</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">95</span></pre></td><td class=\"code\"><pre><span class=\"line\">        &#x2F;&#x2F; &#39;name&#x2F;cos:PutBucketReplication&#39;,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">96</span></pre></td><td class=\"code\"><pre><span class=\"line\">        &#x2F;&#x2F; &#39;name&#x2F;cos:GetBucketReplication&#39;,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">97</span></pre></td><td class=\"code\"><pre><span class=\"line\">        &#x2F;&#x2F; &#39;name&#x2F;cos:DeleteBucketReplication&#39;,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">98</span></pre></td><td class=\"code\"><pre><span class=\"line\">        &#x2F;&#x2F; &#x2F;&#x2F; 删除文件</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">99</span></pre></td><td class=\"code\"><pre><span class=\"line\">        &#39;name&#x2F;cos:DeleteMultipleObject&#39;,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">100</span></pre></td><td class=\"code\"><pre><span class=\"line\">        &#39;name&#x2F;cos:DeleteObject&#39;,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">101</span></pre></td><td class=\"code\"><pre><span class=\"line\">        &#x2F;&#x2F; 简单文件操作</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">102</span></pre></td><td class=\"code\"><pre><span class=\"line\">        &#39;name&#x2F;cos:PutObject&#39;,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">103</span></pre></td><td class=\"code\"><pre><span class=\"line\">        &#39;name&#x2F;cos:PostObject&#39;,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">104</span></pre></td><td class=\"code\"><pre><span class=\"line\">        &#39;name&#x2F;cos:AppendObject&#39;,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">105</span></pre></td><td class=\"code\"><pre><span class=\"line\">        &#39;name&#x2F;cos:GetObject&#39;,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">106</span></pre></td><td class=\"code\"><pre><span class=\"line\">        &#39;name&#x2F;cos:HeadObject&#39;,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">107</span></pre></td><td class=\"code\"><pre><span class=\"line\">        &#39;name&#x2F;cos:OptionsObject&#39;,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">108</span></pre></td><td class=\"code\"><pre><span class=\"line\">        &#39;name&#x2F;cos:PutObjectCopy&#39;,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">109</span></pre></td><td class=\"code\"><pre><span class=\"line\">        &#39;name&#x2F;cos:PostObjectRestore&#39;,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">110</span></pre></td><td class=\"code\"><pre><span class=\"line\">        &#x2F;&#x2F; 分片上传操作</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">111</span></pre></td><td class=\"code\"><pre><span class=\"line\">        &#39;name&#x2F;cos:InitiateMultipartUpload&#39;,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">112</span></pre></td><td class=\"code\"><pre><span class=\"line\">        &#39;name&#x2F;cos:ListMultipartUploads&#39;,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">113</span></pre></td><td class=\"code\"><pre><span class=\"line\">        &#39;name&#x2F;cos:ListParts&#39;,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">114</span></pre></td><td class=\"code\"><pre><span class=\"line\">        &#39;name&#x2F;cos:UploadPart&#39;,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">115</span></pre></td><td class=\"code\"><pre><span class=\"line\">        &#39;name&#x2F;cos:CompleteMultipartUpload&#39;,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">116</span></pre></td><td class=\"code\"><pre><span class=\"line\">        &#39;name&#x2F;cos:AbortMultipartUpload&#39;,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">117</span></pre></td><td class=\"code\"><pre><span class=\"line\">      ],</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">118</span></pre></td><td class=\"code\"><pre><span class=\"line\">      effect: &#39;allow&#39;,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">119</span></pre></td><td class=\"code\"><pre><span class=\"line\">      principal: &#123; qcs: [&#39;*&#39;] &#125;,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">120</span></pre></td><td class=\"code\"><pre><span class=\"line\">      resource: [</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">121</span></pre></td><td class=\"code\"><pre><span class=\"line\">        &#96;qcs::cos:$&#123;config.Region&#125;:uid&#x2F;$&#123;AppId&#125;:prefix&#x2F;&#x2F;$&#123;AppId&#125;&#x2F;$&#123;ShortBucketName&#125;&#x2F;&#96;,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">122</span></pre></td><td class=\"code\"><pre><span class=\"line\">        &#96;qcs::cos:$&#123;config.Region&#125;:uid&#x2F;$&#123;AppId&#125;:prefix&#x2F;&#x2F;$&#123;AppId&#125;&#x2F;$&#123;ShortBucketName&#125;&#x2F;$&#123;config.AllowPrefix&#125;&#96;,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">123</span></pre></td><td class=\"code\"><pre><span class=\"line\">      ],</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">124</span></pre></td><td class=\"code\"><pre><span class=\"line\">    &#125;],</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">125</span></pre></td><td class=\"code\"><pre><span class=\"line\">  &#125;;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">126</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">127</span></pre></td><td class=\"code\"><pre><span class=\"line\">  const policyStr &#x3D; JSON.stringify(policy);</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">128</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">129</span></pre></td><td class=\"code\"><pre><span class=\"line\">  &#x2F;&#x2F; 有效时间小于 30 秒就重新获取临时密钥，否则使用缓存的临时密钥</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">130</span></pre></td><td class=\"code\"><pre><span class=\"line\">  if (tempKeysCache.expiredTime - Date.now() &#x2F; 1000 &gt; 30 &amp;&amp; tempKeysCache.policyStr &#x3D;&#x3D;&#x3D; policyStr) &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">131</span></pre></td><td class=\"code\"><pre><span class=\"line\">    callback(null, tempKeysCache);</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">132</span></pre></td><td class=\"code\"><pre><span class=\"line\">    return;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">133</span></pre></td><td class=\"code\"><pre><span class=\"line\">  &#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">134</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">135</span></pre></td><td class=\"code\"><pre><span class=\"line\">  const Action &#x3D; &#39;GetFederationToken&#39;;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">136</span></pre></td><td class=\"code\"><pre><span class=\"line\">  const Nonce &#x3D; util.getRandom(10000, 20000);</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">137</span></pre></td><td class=\"code\"><pre><span class=\"line\">  const Timestamp &#x3D; parseInt(+new Date() &#x2F; 1000);</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">138</span></pre></td><td class=\"code\"><pre><span class=\"line\">  const Method &#x3D; &#39;POST&#39;;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">139</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">140</span></pre></td><td class=\"code\"><pre><span class=\"line\">  const params &#x3D; &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">141</span></pre></td><td class=\"code\"><pre><span class=\"line\">    Region: &#39;gz&#39;,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">142</span></pre></td><td class=\"code\"><pre><span class=\"line\">    SecretId: config.SecretId,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">143</span></pre></td><td class=\"code\"><pre><span class=\"line\">    Timestamp,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">144</span></pre></td><td class=\"code\"><pre><span class=\"line\">    Nonce,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">145</span></pre></td><td class=\"code\"><pre><span class=\"line\">    Action,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">146</span></pre></td><td class=\"code\"><pre><span class=\"line\">    durationSeconds: 7200,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">147</span></pre></td><td class=\"code\"><pre><span class=\"line\">    name: &#39;cos&#39;,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">148</span></pre></td><td class=\"code\"><pre><span class=\"line\">    policy: encodeURIComponent(policyStr).replace(&#x2F;\\*&#x2F;g, &#39;%2A&#39;),</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">149</span></pre></td><td class=\"code\"><pre><span class=\"line\">  &#125;;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">150</span></pre></td><td class=\"code\"><pre><span class=\"line\">  params.Signature &#x3D; util.getSignature(params, config.SecretKey, Method);</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">151</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">152</span></pre></td><td class=\"code\"><pre><span class=\"line\">  const opt &#x3D; &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">153</span></pre></td><td class=\"code\"><pre><span class=\"line\">    method: Method,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">154</span></pre></td><td class=\"code\"><pre><span class=\"line\">    url: config.Url,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">155</span></pre></td><td class=\"code\"><pre><span class=\"line\">    rejectUnauthorized: false,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">156</span></pre></td><td class=\"code\"><pre><span class=\"line\">    json: true,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">157</span></pre></td><td class=\"code\"><pre><span class=\"line\">    form: params,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">158</span></pre></td><td class=\"code\"><pre><span class=\"line\">    headers: &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">159</span></pre></td><td class=\"code\"><pre><span class=\"line\">      Host: config.Domain,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">160</span></pre></td><td class=\"code\"><pre><span class=\"line\">    &#125;,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">161</span></pre></td><td class=\"code\"><pre><span class=\"line\">    proxy: config.Proxy || &#39;&#39;,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">162</span></pre></td><td class=\"code\"><pre><span class=\"line\">  &#125;;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">163</span></pre></td><td class=\"code\"><pre><span class=\"line\">  request(opt, (err, response, body) &#x3D;&gt; &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">164</span></pre></td><td class=\"code\"><pre><span class=\"line\">    if (body &amp;&amp; body.data) body &#x3D; body.data;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">165</span></pre></td><td class=\"code\"><pre><span class=\"line\">    tempKeysCache.credentials &#x3D; body.credentials;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">166</span></pre></td><td class=\"code\"><pre><span class=\"line\">    tempKeysCache.expiredTime &#x3D; body.expiredTime;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">167</span></pre></td><td class=\"code\"><pre><span class=\"line\">    tempKeysCache.policyStr &#x3D; policyStr;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">168</span></pre></td><td class=\"code\"><pre><span class=\"line\">    callback(err, body);</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">169</span></pre></td><td class=\"code\"><pre><span class=\"line\">  &#125;);</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">170</span></pre></td><td class=\"code\"><pre><span class=\"line\">&#125;;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">171</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">172</span></pre></td><td class=\"code\"><pre><span class=\"line\">module.exports &#x3D; &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">173</span></pre></td><td class=\"code\"><pre><span class=\"line\">  getTempKeys,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">174</span></pre></td><td class=\"code\"><pre><span class=\"line\">&#125;;</span></pre></td></tr></table></figure>\n<p>跟上面一样，你还是要改AllowPrefix，和policy[‘statement’][‘action’]</p>\n<p>然后做route:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\">router.all(&#39;*&#39;, (req, res, next) &#x3D;&gt; &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\">  res.header(&#39;Content-Type&#39;, &#39;application&#x2F;json&#39;);</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\">  res.header(&#39;Access-Control-Allow-Origin&#39;, &#39;http:&#x2F;&#x2F;127.0.0.1&#39;);</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">4</span></pre></td><td class=\"code\"><pre><span class=\"line\">  res.header(&#39;Access-Control-Allow-Headers&#39;, &#39;origin,accept,content-type&#39;);</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">5</span></pre></td><td class=\"code\"><pre><span class=\"line\">  if (req.method.toUpperCase() &#x3D;&#x3D;&#x3D; &#39;OPTIONS&#39;) &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">6</span></pre></td><td class=\"code\"><pre><span class=\"line\">    res.end();</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">7</span></pre></td><td class=\"code\"><pre><span class=\"line\">  &#125; else &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">8</span></pre></td><td class=\"code\"><pre><span class=\"line\">    next();</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">9</span></pre></td><td class=\"code\"><pre><span class=\"line\">  &#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">10</span></pre></td><td class=\"code\"><pre><span class=\"line\">&#125;);</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">11</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">12</span></pre></td><td class=\"code\"><pre><span class=\"line\">router.all(&#39;&#x2F;sts-auth&#39;, (req, res, next) &#x3D;&gt; &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">13</span></pre></td><td class=\"code\"><pre><span class=\"line\">  &#x2F;&#x2F; 获取临时密钥，计算签名</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">14</span></pre></td><td class=\"code\"><pre><span class=\"line\">  getTempKeys((err, tempKeys) &#x3D;&gt; &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">15</span></pre></td><td class=\"code\"><pre><span class=\"line\">    var err &#x3D; null;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">16</span></pre></td><td class=\"code\"><pre><span class=\"line\">    let data;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">17</span></pre></td><td class=\"code\"><pre><span class=\"line\">    if (err) &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">18</span></pre></td><td class=\"code\"><pre><span class=\"line\">      data &#x3D; err;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">19</span></pre></td><td class=\"code\"><pre><span class=\"line\">    &#125; else &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">20</span></pre></td><td class=\"code\"><pre><span class=\"line\">      const pathname &#x3D; req.body.pathname || req.query.pathname || &#39;&#39;;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">21</span></pre></td><td class=\"code\"><pre><span class=\"line\">      const Key &#x3D; pathname.substr(0, 1) &#x3D;&#x3D;&#x3D; &#39;&#x2F;&#39; ? pathname.substr(1) : pathname;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">22</span></pre></td><td class=\"code\"><pre><span class=\"line\">      const opt &#x3D; &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">23</span></pre></td><td class=\"code\"><pre><span class=\"line\">        SecretId: tempKeys.credentials.tmpSecretId,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">24</span></pre></td><td class=\"code\"><pre><span class=\"line\">        SecretKey: tempKeys.credentials.tmpSecretKey,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">25</span></pre></td><td class=\"code\"><pre><span class=\"line\">        Method: req.body.method || req.query.method,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">26</span></pre></td><td class=\"code\"><pre><span class=\"line\">        Key,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">27</span></pre></td><td class=\"code\"><pre><span class=\"line\">        Query: req.body.query || req.query.query || &#123;&#125;,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">28</span></pre></td><td class=\"code\"><pre><span class=\"line\">        Headers: req.body.headers || req.query.headers || &#123;&#125;,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">29</span></pre></td><td class=\"code\"><pre><span class=\"line\">      &#125;;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">30</span></pre></td><td class=\"code\"><pre><span class=\"line\">      data &#x3D; &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">31</span></pre></td><td class=\"code\"><pre><span class=\"line\">        Authorization: COS.getAuthorization(opt),</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">32</span></pre></td><td class=\"code\"><pre><span class=\"line\">        XCosSecurityToken: tempKeys.credentials &amp;&amp; tempKeys.credentials.sessionToken,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">33</span></pre></td><td class=\"code\"><pre><span class=\"line\">      &#125;;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">34</span></pre></td><td class=\"code\"><pre><span class=\"line\">    &#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">35</span></pre></td><td class=\"code\"><pre><span class=\"line\">    res.send(err || data);</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">36</span></pre></td><td class=\"code\"><pre><span class=\"line\">  &#125;);</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">37</span></pre></td><td class=\"code\"><pre><span class=\"line\">&#125;);</span></pre></td></tr></table></figure>\n<p>现在你访问你 <a href=\"https://your-api.com/sts-auth\" target=\"_blank\" rel=\"noopener\">https://your-api.com/sts-auth</a> 就会得到 “Authorization” 和 &quot;XCosSecurityToken&quot;了。</p>\n<p>然后现在我们回到 WX COS SDK github的<a href=\"https://github.com/tencentyun/cos-wx-sdk-v5/blob/master/demo/demo-no-sdk.js\" target=\"_blank\" rel=\"noopener\">demo</a></p>\n<p>复制粘贴进你的小程序就好了，当然你需要根据你的业务做一些refactor。在uploadFile这个function里有个key，如果你在后端规定了AllowPrefix，记得在前面加上路径</p>"},{"layout":"post","title":"Docker容器入门及实践","description":"根据Udemy上Docker Mastery by Bret Fisher的内容记录的一些笔记","keywords":"docker, swarm","date":"2018-10-03T16:00:00.000Z","hidden":true,"_content":"Docker学习笔记\n\n<!-- more -->\n\n#### 2019年3月更新\n* 更新docker swarm及secret\n\n为什么要用Docker\n-------------------\nDocker是一个轻量级的虚拟系统，我们叫它容器。因不同系统和版本的不同，部署服务器的时候总是会出现不同的错误，让开发效率大大降低。docker的出现让服务器开发不再受限于系统版本，让一套代码永远可以在不同服务器上一致运行。同时docker也是微服务架构中不可缺少的部分，让不同微服务之间协调效率高效。\n\n第一个Docker Container\n--------------------\n\n## Docker安装\nLinux可以通过[get.docker.com](https://get.docker.com/)快捷安装。\n复制文档前面注释中的代码脚步即可\n\n安装完成后，这是几个常用的CLI(command line interface)命令\n```\nsystemctl start docker   // 启动docker服务\nsystemctl stop docker    // 停止docker服务\nsystemctl restart docker // 重启docker服务\nsystemctl status docker  // 查看docker服务状态\nsystemctl enable docker  // 开机启动docker服务\nsystemctl disable docker // 取消开机启动docker服务\n```\n\n在运行`systemctl start docker`后，可以试一下`docker container run  hello-world`，之后会在命令栏中print出来行 hello-world即代表安装成功\n\n\n## 制作一个Nginx的容器\n每一个容器都相当于一个虚拟系统\n```\ndocker container run --publish 80:80 --detach --name webhost nginx\n```\n这行命令的运行流程：\n1. 从Dokcer hub下载nginx的镜像(image)\n2. 创建新的名为webhost的container\n3. `--publish 80:80`为开放容器的80接口\n4. 将来自host的80接口网络请求路由至80容器接口\n5. --detach 让这个container在后台运行\n\n容器部署成功后，运行下面的命令会显示本地活跃docker实例, 添加 -a会显示全部实例(包括已经停止的实例)\n```\ndocker container ls\n```\n停止一个容器\n```\ndocker container stop container-name\n```\n查看log\n```\ndocker container logs container-name\n```\n删除container。名称或id可以叠加用于删除多项container\n```\ndocker rm container-name\n```\n\n## Image镜像 vs Container容器\nContainer是Image的实例\n\n可以理解为Image是一个class类，container是新建的对象\n\nImage是如和新建Container的一个说明书\n\n## Cheat sheet\n向container里传递环境参数\n``` \n--env or -e \n```\n查看container里面的top process\n``` \ndocker container top container-name\n ```\n显示这个container的metadata（配置，网络等）\n\n``` \ndocker container insepct\n```\n\n显示实时信息（简单的监测）\n``` \ndocker container stats\n```\n\n进入容器交互(interactive)模式(就是进去虚拟系统)\n``` \ndocker container run -it CONTAINER_NAME bash\n```\n-t : pseudo-TTY\n\n-i : interactive\n\n\n## 创建一个ubuntu的容器\n``` \ndocker container run -it --name ubuntu ubuntu\n```\n\n如果退出后再次进入的命令会不一样:\n``` \ndocker container start -ai ubuntu\n```\n进入一个正在运行的container的shell（创建了一个多出的process）\n``` \ndocker container exec -it container-name bash\n```\n\n## Docker 网络\n-p 用来暴露你的网络接口\n\n* 每一个container接入一个私有虚拟网络“bridge”\n* 每一个虚拟网络通过NAT防火墙路由出去\n* 所有的container都可以在自己的虚拟网络内部交流（不用-p暴露给公网）\n* 最好为每一个独立App建立一个自己的虚拟网络（比如给mongo和node单独创建一个虚拟网络）\n\n```\ndocker container port container-name\n```\n\n显示路由\n\n``` \ndocker container inspect --format '\\{\\{ .NetworkSettings.IPAddress\\}\\}' container-name\n```\n\n查询container地址  --format 是filter\n\n![docker-network](../../../../images/posts/docker/docker-network.png) docker network\n\n``` \ndocker network ls\n```\n\n显示所有网络\nbirdge是默认网络，连接外网\nhost是绕过bridge直接连接外网（性能好，安全性低）\nnone什么都不连接\n\n``` \ndocker network inspect container-name\n```\n\n查看网络\ndocker network inspect bridge 可以查看哪些container正在连着bridge。“IPAM”是自动被赋值的IP地址。默认subnet “172.17.0.0/16”\n\n``` \ndokcer network create --drive\n```\n\n建立一个网络\n--drive 指定一个drive（bridge host none或者第三方dirve）默认bridge\n\n``` \ndocker network connet\n```\n\n连接一个网络\n一个container可以连接到两个network上\n\n``` \ndocker network disconnect\n```\n\n退出一个网络\n\n如果要让新的container连接到该网络:\n``` \ndocker container run -d --name new_nginx --network new_network_name nginx\n```\n\n## DNS\n因为container中的IP是不固定的，所以需要DNS\n两个在相同虚拟网络下的container可以默认通过名字互通\n\n``` \ndocker container exec -it con2 ping con1\n```\n\n其中con1和con2在同一网络下（需要先apt-get update && apt-get install -y inputils-ping）\n\n\n## DNS Round Robin Test\n\n1. 新建一个虚拟网络\n2. 创建两个elasticsearch:2的镜像\n\n``` \neg: docker container run --name elastic1 -d --network test --network-alias search elasticsearch:1\n```\n\n3. 使用--network-alias为两个container标记alias\n4. 运行docker container run --rm --net ass centos curl -s search:9200 附加为--net查看同样DNS名称下的两个网络\n5. centos curl -s search:9200 --net\n\n## Docker image\n``` \ndocker pull nginx:latest\n```\n\n生产环境下，最好为Image标注一个固定的版本号，不要用latest\n\n\n``` \ndocker history nginx:latest\n```\n\n显示全部nginx的历史layer，每一个layer都代表了一次更新，每一层layer共同组成了一个image\n共同使用的layer不会被下载，每一个layer有唯一的SHA区分\n\n``` \ndocker inspect nginx:latest\n```\n\n显示这个image的metadata比如“ContainerConfig”: \"ExpposedPorts\"说明哪个接口会被期望被开通，\"Cmd\"显示哪些command在运行时会被运行...\n\n``` \ndocker image tag nginx dockerHubName/nginx\n```\n\n为image加一个tag,tag不会改变Image ID，如果后面不添加tag（详情下一行）,默认latest\n需要加自己dockerhub的tag才可以push上去\n\n``` \ndocker image tag nginx dockerHubName/ngnix dockerHubName/nginx:testing\n```\n\n为这个Image添加一个testing的tag\n\n如果想让repo是私人的，现在docker hub上创建一个private repo再push\n\n## Dockerfile\n> docker build -f some-dockerfile\n\n> FROM: required\n\n选择一个minimal distribution. (debian, centos), 很多工具都不具备\n\n> WORKDIR /etc/nginx\n\n相当于cd\n\n> COPY\n\n复制source code从local\n\n> EVN: \n\neg. NGINX_VERSION 1.11.10-jessie\n导入环境变量\n\n> RUN:\n\n运行Shell command, 两个command之间可以用&&连接，表示在同一layer\nRUN可以有多个\n\n**Docker有自己的log file(stdout, stderr)，所以用Nginx自带的log并不是最理性的解决方案\n```\nRUN ln -sf /dev/stdout /var/log/nginx/access.log && ln -sf /dev/stderr /var/log/nginx/error.log\n```\n\n将nginx的log导入进docker\n\n> EXPOSE:\n\n允许暴露的接口，比如web需要暴露 **EXPOSE: 80 443**\n但是这只是允许权限,还是需要用**-p**在host中暴露这些接口\n\n> CMD: []  required 但是可以inherit from FROM image\n\n当container运行的时候运行的命令，Dockerfile中只能存在一个CMD，如果存在多个，最后一个优先级最高\n\n## Build Dockerfile\n``` \ndokcer image build -t customnginx .\n```\n\n第一次build时间较长，但是所有步骤会被存cache。\n修改一行Dockerfile中的文件后，这一行之后的所有步骤都会重新build，所以文件order很重要，把多变的代码放在后面。\n\n## 小节\n创建Dockerfile，如果能用offical repo的base image就用official的，如果不能满足要求就去Docker hub看看有没有可靠高的image。都不能满足要求可以自己用minimal distribution创建自己的Dockerfile。\n``` \ndocker image build -t tag-name .\n```\n\nbuild已创建的Dockerfile并标注tag\n```\ndocker container run -p 80:80 tag-name\n```\n\n运行刚刚创建的image\n``` \ndocker image tag tag-name:additional-tag dockerHubName/tag-name:additional-tag\ndocker push dockerHubName/tag-name:additional-tag\n```\n\n## 数据保存\ncontainer是不可更改，稍纵即逝的，不应该用于保存数据。\nDocker有两种解决方式：Volumes和Bind Mounts\nVolumes是在container外部规定一个区域用来存储数据\nBind Mounts用来加载外部数据。\n\n### Volumes\n在Dockerfile中添加Volume规则\n> VOLUME /path/to/db\n删除container后不会影响Volume，需要多一个步骤将其删除。\n\n```\ndocker volume ls\n```\n可以用来查看当前机器创建了多少Volumes\n```\ndocker volume inspect XXX\n```\n如果在linux机器上，通过Mountpoint地址可以看到数据。Mac和Windows看不到(在linux VM里)\n\n如果需要创建Volume，记得在docker container run的时候添加 -v name:/path/to/db 来定义Volume名称。否则很难区分Volume对应的container\n\n> docker volume create \n\n\n## Bind Mounting\n将host的文件或目录映射到container的文件或目录。\n无法在Dockerfile里写，只能通过```container run -v /Users/username/stuff:/path/container```实现。\n```\ndocker container run -d --name nginx -p 80:80 -v $(pwd):/usr/share/nginx/html nginx\n```\n将当前目录$(pwd)映射到/usr/share/nginx/html里面，当当前目录变的时候，container里面的文件也会变。\n\n\nDocker Compose\n-----------------\n* 保存docker run settings\n* 使用YAML\n* CLI tool\n\n```yml\nversion: '3.1'\n\nservice:\n\tservicename: #DNS name inside network\n\t\timage:\n\t\tcommand: #replace the default CMD specified by the image\n\t\tenvironment:\n\t\tvolumes:\n\t\tports:\n\t\t  - 80:80\n\tservicename2:\n\nvolumes:\n\nnetworks:\n```\n\n\n后台运行当前docker compose\n\n``` docker-compose up -d ```\n\n卸载docker compose\n> docker-compose down\n\n查看container中的services\n>docker compose top\n\n```yml\nservices:\n  proxy:\n    build:\n      context: .\n      dockerfile: nginx.Dockerfile\n  image: nginx-custom  \n  ports:\n      - '80:80'\n  web:\n    image: httpd\n    volumes:\n      - ./html:/usr/local/apache2/htdocs/\n```\ndockerfile指向当前目录自定义的dockerfile，这里是一个nginx的自定义image  \n第二个service是server，把当前html目录绑定到container里面，所以可以在runtime情况下改变网页文件  \n一般情况下会有第三个service作为database  \n\n\n\nDocker Swarm\n---------------\ndocker swarm 是docker提供的非常易学高效的分布式部署方式\n\n## Swarm集群初始化\n```docker swarm init [OPTIONS]```\n\noptions:\n⋅⋅⋅*--advertise-addr: 多网卡的情况下，指定需要使用的ip\n⋅⋅⋅*--listen-addr: 指定监听的 ip 与端口\n<!-- ⋅⋅⋅*--availability: 节点的有效性(\"active\"|\"pause\"|\"drain\") -->\n\n\n```docker service``` 相当于docker container run。区别在于这是给orchestration命令，让它放在queue里自动部署\n```docker service update```可以更新正在运行的services的一些参数，用于rolling update\n\n\n\n## overlay network\n同一swarm下容器之间的访问。\n\n```docker network create --driver overlay NETWORK_NAME```\n\n然后用docker service部署在这个NETWORK_NAME网络中即可\n\n## Routing Mesh\nLoad balances Swarm services across their tasks\n所以在公开接口上的请求都会被自动load balance到不同node上.\n这个load balancer是在OSI Layer 3(TCP)上的，不是在Layer4(DNS)，并且是stateless\n意思是只能在访问IP和port的时候才可以导流，如果一台服务器运行多个server并运行在一个swarm中，则需要在DNS的Layer上创建一个Nginx(stateful load balancers)\n\n在overlay network上，cluster中访问任意一个node的IP都可以得到相同的结果\n\n\nDocker Stack\n-------------\ndocker compose file for swarm\n\n```docker stack deploy```自动部署services，但deploy不支持build。需要把自己的image build一下并上传到repo中，在stack中换成repo中的image\n\n```yml\nversion: \"3\"\nservices:\n  redis:\n    image: redis:alpine\n    ports:\n      - \"6379\"\n    networks:\n      - frontend\n    deploy:\n      replicas: 2\n      update_config:\n        parallelism: 2\n        delay: 10s\n      restart_policy:\n        condition: on-failure\n  db:\n    image: postgres:9.4\n    volumes:\n      - db-data:/var/lib/postgresql/data\n    networks:\n      - backend\n    deploy:\n      placement:\n        constraints: [node.role == manager]\n  vote:\n    image: dockersamples/examplevotingapp_vote:before\n    ports:\n      - 5000:80\n    networks:\n      - frontend\n    depends_on:\n      - redis\n    deploy:\n      replicas: 2\n      update_config:\n        parallelism: 2\n      restart_policy:\n        condition: on-failure\n  result:\n    image: dockersamples/examplevotingapp_result:before\n    ports:\n      - 5001:80\n    networks:\n      - backend\n    depends_on:\n      - db\n    deploy:\n      replicas: 1\n      update_config:\n        parallelism: 2\n        delay: 10s\n      restart_policy:\n        condition: on-failure\n\n  worker:\n    image: dockersamples/examplevotingapp_worker\n    networks:\n      - frontend\n      - backend\n    deploy:\n      mode: replicated\n      replicas: 5\n      labels: [APP=VOTING]\n      restart_policy:\n        condition: on-failure\n        delay: 10s\n        max_attempts: 3\n        window: 120s\n      placement:\n        constraints: [node.role == manager]\n\n  visualizer:\n    image: dockersamples/visualizer\n    ports:\n      - \"8080:8080\"\n    stop_grace_period: 1m30s\n    volumes:\n      - \"/var/run/docker.sock:/var/run/docker.sock\"\n    deploy:\n      placement:\n        constraints: [node.role == manager]\n\nnetworks:\n  frontend:\n  backend:\n\nvolumes:\n  db-data:\n```\n\n部署上面的代码：\n```docker stack deploy -c docker-stack.yml voteapp```\n\n```docker stack services STACK_NAME```可以查看此stack部署的services情况\n```docker stack ps STACK_NAME```可以查看这个stack怎样运行的\n基本和compose差不多，但是version要用3或以上.\ndeploy可以设置部署多个实例，update时的设置之类的。\ndeploy.placement.constraints可以说设置只部署在manager node上\n\n如果要update整个stack，最好先改stack file然后再运行```docker -c YML_FILE stack deploy```更新stack\n\n\nSwarm Secrect\n-----------\n#在service中\n\nSecrect会被加密储存在docker自己的Raft log中，并会分发给所有manager，当manager管理的worker需要secret时分发下去。\n所有的secrect都在/run/secrets/的目录中, 作为一个file。\n\n如果在`docker service`中使用环境变量\n> docker service create -e ENV_VAR_FILE=/run/secrets/SECRET_NAME SERVICE_NAME\n\n两种secret注入swarm的方法：\n1）文件注入:\n在当前目录创建包含secret的文件，运行\n> docker secret create SECRET_NAME SECRET_FILE.txt\n\n坏处：密码文件在服务器中，非常危险\n\n2）command line注入\n> echo \"SECRET_NAME\" | docker secret create SECRET_NAME -\n\n坏处：如果有人进去root，可以通过bash history查找到明文密码\n\n\n查看密码\n> docker secret inspect SECRET_NAME\n\n#在stack中\nstack yml file的version需要大于等于3.1\n\n```yml\nversion: \"3.1\"\n  services:\n    psql:\n      image: postgres\n      secrets:\n        - psql_user\n        - psql_password\n      enviroment:\n        POSTGRES_PASSWORD_FILE: /run/secrets/psql_password\n        POSTGRES_USER_FILE: /run/secrets/psql_user\nsecrets:\n  psql_user:\n    file: ./psql_user.txt\n  psql_password:\n    file: ./psql_password.txt\n```\nstack中secret同样有两种注入方法，一种是用file，第二中是先用command line提前注入\n如果用CLI注入，需要用`external:`标签标明secrets来源\n```yml\nsecrets:\n  psql_user: \n    external:\n  psql_password:\n    external:\n```\n\nsecrets中还可以自定义permission，可以指定某系统用户才能使用secrets\n\n**当deploy完成之后，要及时清理bash history或secret file**\n\n\n```\nTCP port 2376 for secure Docker client communication. This port is required for Docker Machine to work. Docker Machine is used to orchestrate Docker hosts.\nTCP port 2377. This port is used for communication between the nodes of a Docker Swarm or cluster. It only needs to be opened on manager nodes.\nTCP and UDP port 7946 for communication among nodes (container network discovery).\nUDP port 4789 for overlay network traffic (container ingress networking).\n```\n\nCentOS7中防火墙默认关闭\n\n查看防火墙状态\n> systemctl status firewalld\n\n开启防火墙\n> systemctl start firewalld\n\n修改为默认开机启动\n> systemctl enable firewalld\n\n【如果】在Manager的node上打开下列接口\n```\nfirewall-cmd --add-port=2376/tcp --permanent\nfirewall-cmd --add-port=2377/tcp --permanent\nfirewall-cmd --add-port=7946/tcp --permanent\nfirewall-cmd --add-port=7946/udp --permanent\nfirewall-cmd --add-port=4789/udp --permanent\n```\n\n【如果】\n在worker的node上打开下列接口\n```\nfirewall-cmd --add-port=2376/tcp --permanent\nfirewall-cmd --add-port=7946/tcp --permanent\nfirewall-cmd --add-port=7946/udp --permanent\nfirewall-cmd --add-port=4789/udp --permanent\n```\n\n重新加载防火墙\n> firewall-cmd --reload\n\n重启Docker\n> systemctl restart docker\n\n\n\n## Docker 18.09 版本更新\n\n18.09以上的版本提供了ssh到docker的功能，具体方法是 `docker -H ssh://user@server` 然后再输入你想操作的docker指令。\n\n比如运行: \n`docker -H ssh://user@server run -it --rm busybox`\n\n这样我们就可以直接从本地SSH到服务器的docker，并把Secret传进去从而实现目前最安全的secret部署方法。\n\n首先授权给当前用户docker的使用权，我们就不需要每次都敲sudo了\n> sudo usermod -aG docker USER_NAME\n\n然后打开terminal通过本地传secrete:\n> echo \"SECRET_NAME\" | docker -H ssh://USER_NAME@YOUR_HOST secret create secret_name -\n如果用file的当做secret的话\n> docker -H ssh://USER_NAME@YOUR_HOST secret create secret_name.txt\n\n成功之后会打印出secret的ID`xtgwhpfr6cyvqp3gnmeevorws`，也可以ssh进服务器使用`docker secret ls`查看是否存在刚才注入的secret\n\n这样就在服务器中完全不留痕迹的注入了secret。","source":"_posts/2018-10-04-docker-note.md","raw":"---\nlayout: post\ntitle: Docker容器入门及实践\ncategories: [docker, docker swarm]\ndescription: 根据Udemy上Docker Mastery by Bret Fisher的内容记录的一些笔记\nkeywords: docker, swarm\ndate: 2018-10-04 00:00:00\nhidden: true\n---\nDocker学习笔记\n\n<!-- more -->\n\n#### 2019年3月更新\n* 更新docker swarm及secret\n\n为什么要用Docker\n-------------------\nDocker是一个轻量级的虚拟系统，我们叫它容器。因不同系统和版本的不同，部署服务器的时候总是会出现不同的错误，让开发效率大大降低。docker的出现让服务器开发不再受限于系统版本，让一套代码永远可以在不同服务器上一致运行。同时docker也是微服务架构中不可缺少的部分，让不同微服务之间协调效率高效。\n\n第一个Docker Container\n--------------------\n\n## Docker安装\nLinux可以通过[get.docker.com](https://get.docker.com/)快捷安装。\n复制文档前面注释中的代码脚步即可\n\n安装完成后，这是几个常用的CLI(command line interface)命令\n```\nsystemctl start docker   // 启动docker服务\nsystemctl stop docker    // 停止docker服务\nsystemctl restart docker // 重启docker服务\nsystemctl status docker  // 查看docker服务状态\nsystemctl enable docker  // 开机启动docker服务\nsystemctl disable docker // 取消开机启动docker服务\n```\n\n在运行`systemctl start docker`后，可以试一下`docker container run  hello-world`，之后会在命令栏中print出来行 hello-world即代表安装成功\n\n\n## 制作一个Nginx的容器\n每一个容器都相当于一个虚拟系统\n```\ndocker container run --publish 80:80 --detach --name webhost nginx\n```\n这行命令的运行流程：\n1. 从Dokcer hub下载nginx的镜像(image)\n2. 创建新的名为webhost的container\n3. `--publish 80:80`为开放容器的80接口\n4. 将来自host的80接口网络请求路由至80容器接口\n5. --detach 让这个container在后台运行\n\n容器部署成功后，运行下面的命令会显示本地活跃docker实例, 添加 -a会显示全部实例(包括已经停止的实例)\n```\ndocker container ls\n```\n停止一个容器\n```\ndocker container stop container-name\n```\n查看log\n```\ndocker container logs container-name\n```\n删除container。名称或id可以叠加用于删除多项container\n```\ndocker rm container-name\n```\n\n## Image镜像 vs Container容器\nContainer是Image的实例\n\n可以理解为Image是一个class类，container是新建的对象\n\nImage是如和新建Container的一个说明书\n\n## Cheat sheet\n向container里传递环境参数\n``` \n--env or -e \n```\n查看container里面的top process\n``` \ndocker container top container-name\n ```\n显示这个container的metadata（配置，网络等）\n\n``` \ndocker container insepct\n```\n\n显示实时信息（简单的监测）\n``` \ndocker container stats\n```\n\n进入容器交互(interactive)模式(就是进去虚拟系统)\n``` \ndocker container run -it CONTAINER_NAME bash\n```\n-t : pseudo-TTY\n\n-i : interactive\n\n\n## 创建一个ubuntu的容器\n``` \ndocker container run -it --name ubuntu ubuntu\n```\n\n如果退出后再次进入的命令会不一样:\n``` \ndocker container start -ai ubuntu\n```\n进入一个正在运行的container的shell（创建了一个多出的process）\n``` \ndocker container exec -it container-name bash\n```\n\n## Docker 网络\n-p 用来暴露你的网络接口\n\n* 每一个container接入一个私有虚拟网络“bridge”\n* 每一个虚拟网络通过NAT防火墙路由出去\n* 所有的container都可以在自己的虚拟网络内部交流（不用-p暴露给公网）\n* 最好为每一个独立App建立一个自己的虚拟网络（比如给mongo和node单独创建一个虚拟网络）\n\n```\ndocker container port container-name\n```\n\n显示路由\n\n``` \ndocker container inspect --format '\\{\\{ .NetworkSettings.IPAddress\\}\\}' container-name\n```\n\n查询container地址  --format 是filter\n\n![docker-network](../../../../images/posts/docker/docker-network.png) docker network\n\n``` \ndocker network ls\n```\n\n显示所有网络\nbirdge是默认网络，连接外网\nhost是绕过bridge直接连接外网（性能好，安全性低）\nnone什么都不连接\n\n``` \ndocker network inspect container-name\n```\n\n查看网络\ndocker network inspect bridge 可以查看哪些container正在连着bridge。“IPAM”是自动被赋值的IP地址。默认subnet “172.17.0.0/16”\n\n``` \ndokcer network create --drive\n```\n\n建立一个网络\n--drive 指定一个drive（bridge host none或者第三方dirve）默认bridge\n\n``` \ndocker network connet\n```\n\n连接一个网络\n一个container可以连接到两个network上\n\n``` \ndocker network disconnect\n```\n\n退出一个网络\n\n如果要让新的container连接到该网络:\n``` \ndocker container run -d --name new_nginx --network new_network_name nginx\n```\n\n## DNS\n因为container中的IP是不固定的，所以需要DNS\n两个在相同虚拟网络下的container可以默认通过名字互通\n\n``` \ndocker container exec -it con2 ping con1\n```\n\n其中con1和con2在同一网络下（需要先apt-get update && apt-get install -y inputils-ping）\n\n\n## DNS Round Robin Test\n\n1. 新建一个虚拟网络\n2. 创建两个elasticsearch:2的镜像\n\n``` \neg: docker container run --name elastic1 -d --network test --network-alias search elasticsearch:1\n```\n\n3. 使用--network-alias为两个container标记alias\n4. 运行docker container run --rm --net ass centos curl -s search:9200 附加为--net查看同样DNS名称下的两个网络\n5. centos curl -s search:9200 --net\n\n## Docker image\n``` \ndocker pull nginx:latest\n```\n\n生产环境下，最好为Image标注一个固定的版本号，不要用latest\n\n\n``` \ndocker history nginx:latest\n```\n\n显示全部nginx的历史layer，每一个layer都代表了一次更新，每一层layer共同组成了一个image\n共同使用的layer不会被下载，每一个layer有唯一的SHA区分\n\n``` \ndocker inspect nginx:latest\n```\n\n显示这个image的metadata比如“ContainerConfig”: \"ExpposedPorts\"说明哪个接口会被期望被开通，\"Cmd\"显示哪些command在运行时会被运行...\n\n``` \ndocker image tag nginx dockerHubName/nginx\n```\n\n为image加一个tag,tag不会改变Image ID，如果后面不添加tag（详情下一行）,默认latest\n需要加自己dockerhub的tag才可以push上去\n\n``` \ndocker image tag nginx dockerHubName/ngnix dockerHubName/nginx:testing\n```\n\n为这个Image添加一个testing的tag\n\n如果想让repo是私人的，现在docker hub上创建一个private repo再push\n\n## Dockerfile\n> docker build -f some-dockerfile\n\n> FROM: required\n\n选择一个minimal distribution. (debian, centos), 很多工具都不具备\n\n> WORKDIR /etc/nginx\n\n相当于cd\n\n> COPY\n\n复制source code从local\n\n> EVN: \n\neg. NGINX_VERSION 1.11.10-jessie\n导入环境变量\n\n> RUN:\n\n运行Shell command, 两个command之间可以用&&连接，表示在同一layer\nRUN可以有多个\n\n**Docker有自己的log file(stdout, stderr)，所以用Nginx自带的log并不是最理性的解决方案\n```\nRUN ln -sf /dev/stdout /var/log/nginx/access.log && ln -sf /dev/stderr /var/log/nginx/error.log\n```\n\n将nginx的log导入进docker\n\n> EXPOSE:\n\n允许暴露的接口，比如web需要暴露 **EXPOSE: 80 443**\n但是这只是允许权限,还是需要用**-p**在host中暴露这些接口\n\n> CMD: []  required 但是可以inherit from FROM image\n\n当container运行的时候运行的命令，Dockerfile中只能存在一个CMD，如果存在多个，最后一个优先级最高\n\n## Build Dockerfile\n``` \ndokcer image build -t customnginx .\n```\n\n第一次build时间较长，但是所有步骤会被存cache。\n修改一行Dockerfile中的文件后，这一行之后的所有步骤都会重新build，所以文件order很重要，把多变的代码放在后面。\n\n## 小节\n创建Dockerfile，如果能用offical repo的base image就用official的，如果不能满足要求就去Docker hub看看有没有可靠高的image。都不能满足要求可以自己用minimal distribution创建自己的Dockerfile。\n``` \ndocker image build -t tag-name .\n```\n\nbuild已创建的Dockerfile并标注tag\n```\ndocker container run -p 80:80 tag-name\n```\n\n运行刚刚创建的image\n``` \ndocker image tag tag-name:additional-tag dockerHubName/tag-name:additional-tag\ndocker push dockerHubName/tag-name:additional-tag\n```\n\n## 数据保存\ncontainer是不可更改，稍纵即逝的，不应该用于保存数据。\nDocker有两种解决方式：Volumes和Bind Mounts\nVolumes是在container外部规定一个区域用来存储数据\nBind Mounts用来加载外部数据。\n\n### Volumes\n在Dockerfile中添加Volume规则\n> VOLUME /path/to/db\n删除container后不会影响Volume，需要多一个步骤将其删除。\n\n```\ndocker volume ls\n```\n可以用来查看当前机器创建了多少Volumes\n```\ndocker volume inspect XXX\n```\n如果在linux机器上，通过Mountpoint地址可以看到数据。Mac和Windows看不到(在linux VM里)\n\n如果需要创建Volume，记得在docker container run的时候添加 -v name:/path/to/db 来定义Volume名称。否则很难区分Volume对应的container\n\n> docker volume create \n\n\n## Bind Mounting\n将host的文件或目录映射到container的文件或目录。\n无法在Dockerfile里写，只能通过```container run -v /Users/username/stuff:/path/container```实现。\n```\ndocker container run -d --name nginx -p 80:80 -v $(pwd):/usr/share/nginx/html nginx\n```\n将当前目录$(pwd)映射到/usr/share/nginx/html里面，当当前目录变的时候，container里面的文件也会变。\n\n\nDocker Compose\n-----------------\n* 保存docker run settings\n* 使用YAML\n* CLI tool\n\n```yml\nversion: '3.1'\n\nservice:\n\tservicename: #DNS name inside network\n\t\timage:\n\t\tcommand: #replace the default CMD specified by the image\n\t\tenvironment:\n\t\tvolumes:\n\t\tports:\n\t\t  - 80:80\n\tservicename2:\n\nvolumes:\n\nnetworks:\n```\n\n\n后台运行当前docker compose\n\n``` docker-compose up -d ```\n\n卸载docker compose\n> docker-compose down\n\n查看container中的services\n>docker compose top\n\n```yml\nservices:\n  proxy:\n    build:\n      context: .\n      dockerfile: nginx.Dockerfile\n  image: nginx-custom  \n  ports:\n      - '80:80'\n  web:\n    image: httpd\n    volumes:\n      - ./html:/usr/local/apache2/htdocs/\n```\ndockerfile指向当前目录自定义的dockerfile，这里是一个nginx的自定义image  \n第二个service是server，把当前html目录绑定到container里面，所以可以在runtime情况下改变网页文件  \n一般情况下会有第三个service作为database  \n\n\n\nDocker Swarm\n---------------\ndocker swarm 是docker提供的非常易学高效的分布式部署方式\n\n## Swarm集群初始化\n```docker swarm init [OPTIONS]```\n\noptions:\n⋅⋅⋅*--advertise-addr: 多网卡的情况下，指定需要使用的ip\n⋅⋅⋅*--listen-addr: 指定监听的 ip 与端口\n<!-- ⋅⋅⋅*--availability: 节点的有效性(\"active\"|\"pause\"|\"drain\") -->\n\n\n```docker service``` 相当于docker container run。区别在于这是给orchestration命令，让它放在queue里自动部署\n```docker service update```可以更新正在运行的services的一些参数，用于rolling update\n\n\n\n## overlay network\n同一swarm下容器之间的访问。\n\n```docker network create --driver overlay NETWORK_NAME```\n\n然后用docker service部署在这个NETWORK_NAME网络中即可\n\n## Routing Mesh\nLoad balances Swarm services across their tasks\n所以在公开接口上的请求都会被自动load balance到不同node上.\n这个load balancer是在OSI Layer 3(TCP)上的，不是在Layer4(DNS)，并且是stateless\n意思是只能在访问IP和port的时候才可以导流，如果一台服务器运行多个server并运行在一个swarm中，则需要在DNS的Layer上创建一个Nginx(stateful load balancers)\n\n在overlay network上，cluster中访问任意一个node的IP都可以得到相同的结果\n\n\nDocker Stack\n-------------\ndocker compose file for swarm\n\n```docker stack deploy```自动部署services，但deploy不支持build。需要把自己的image build一下并上传到repo中，在stack中换成repo中的image\n\n```yml\nversion: \"3\"\nservices:\n  redis:\n    image: redis:alpine\n    ports:\n      - \"6379\"\n    networks:\n      - frontend\n    deploy:\n      replicas: 2\n      update_config:\n        parallelism: 2\n        delay: 10s\n      restart_policy:\n        condition: on-failure\n  db:\n    image: postgres:9.4\n    volumes:\n      - db-data:/var/lib/postgresql/data\n    networks:\n      - backend\n    deploy:\n      placement:\n        constraints: [node.role == manager]\n  vote:\n    image: dockersamples/examplevotingapp_vote:before\n    ports:\n      - 5000:80\n    networks:\n      - frontend\n    depends_on:\n      - redis\n    deploy:\n      replicas: 2\n      update_config:\n        parallelism: 2\n      restart_policy:\n        condition: on-failure\n  result:\n    image: dockersamples/examplevotingapp_result:before\n    ports:\n      - 5001:80\n    networks:\n      - backend\n    depends_on:\n      - db\n    deploy:\n      replicas: 1\n      update_config:\n        parallelism: 2\n        delay: 10s\n      restart_policy:\n        condition: on-failure\n\n  worker:\n    image: dockersamples/examplevotingapp_worker\n    networks:\n      - frontend\n      - backend\n    deploy:\n      mode: replicated\n      replicas: 5\n      labels: [APP=VOTING]\n      restart_policy:\n        condition: on-failure\n        delay: 10s\n        max_attempts: 3\n        window: 120s\n      placement:\n        constraints: [node.role == manager]\n\n  visualizer:\n    image: dockersamples/visualizer\n    ports:\n      - \"8080:8080\"\n    stop_grace_period: 1m30s\n    volumes:\n      - \"/var/run/docker.sock:/var/run/docker.sock\"\n    deploy:\n      placement:\n        constraints: [node.role == manager]\n\nnetworks:\n  frontend:\n  backend:\n\nvolumes:\n  db-data:\n```\n\n部署上面的代码：\n```docker stack deploy -c docker-stack.yml voteapp```\n\n```docker stack services STACK_NAME```可以查看此stack部署的services情况\n```docker stack ps STACK_NAME```可以查看这个stack怎样运行的\n基本和compose差不多，但是version要用3或以上.\ndeploy可以设置部署多个实例，update时的设置之类的。\ndeploy.placement.constraints可以说设置只部署在manager node上\n\n如果要update整个stack，最好先改stack file然后再运行```docker -c YML_FILE stack deploy```更新stack\n\n\nSwarm Secrect\n-----------\n#在service中\n\nSecrect会被加密储存在docker自己的Raft log中，并会分发给所有manager，当manager管理的worker需要secret时分发下去。\n所有的secrect都在/run/secrets/的目录中, 作为一个file。\n\n如果在`docker service`中使用环境变量\n> docker service create -e ENV_VAR_FILE=/run/secrets/SECRET_NAME SERVICE_NAME\n\n两种secret注入swarm的方法：\n1）文件注入:\n在当前目录创建包含secret的文件，运行\n> docker secret create SECRET_NAME SECRET_FILE.txt\n\n坏处：密码文件在服务器中，非常危险\n\n2）command line注入\n> echo \"SECRET_NAME\" | docker secret create SECRET_NAME -\n\n坏处：如果有人进去root，可以通过bash history查找到明文密码\n\n\n查看密码\n> docker secret inspect SECRET_NAME\n\n#在stack中\nstack yml file的version需要大于等于3.1\n\n```yml\nversion: \"3.1\"\n  services:\n    psql:\n      image: postgres\n      secrets:\n        - psql_user\n        - psql_password\n      enviroment:\n        POSTGRES_PASSWORD_FILE: /run/secrets/psql_password\n        POSTGRES_USER_FILE: /run/secrets/psql_user\nsecrets:\n  psql_user:\n    file: ./psql_user.txt\n  psql_password:\n    file: ./psql_password.txt\n```\nstack中secret同样有两种注入方法，一种是用file，第二中是先用command line提前注入\n如果用CLI注入，需要用`external:`标签标明secrets来源\n```yml\nsecrets:\n  psql_user: \n    external:\n  psql_password:\n    external:\n```\n\nsecrets中还可以自定义permission，可以指定某系统用户才能使用secrets\n\n**当deploy完成之后，要及时清理bash history或secret file**\n\n\n```\nTCP port 2376 for secure Docker client communication. This port is required for Docker Machine to work. Docker Machine is used to orchestrate Docker hosts.\nTCP port 2377. This port is used for communication between the nodes of a Docker Swarm or cluster. It only needs to be opened on manager nodes.\nTCP and UDP port 7946 for communication among nodes (container network discovery).\nUDP port 4789 for overlay network traffic (container ingress networking).\n```\n\nCentOS7中防火墙默认关闭\n\n查看防火墙状态\n> systemctl status firewalld\n\n开启防火墙\n> systemctl start firewalld\n\n修改为默认开机启动\n> systemctl enable firewalld\n\n【如果】在Manager的node上打开下列接口\n```\nfirewall-cmd --add-port=2376/tcp --permanent\nfirewall-cmd --add-port=2377/tcp --permanent\nfirewall-cmd --add-port=7946/tcp --permanent\nfirewall-cmd --add-port=7946/udp --permanent\nfirewall-cmd --add-port=4789/udp --permanent\n```\n\n【如果】\n在worker的node上打开下列接口\n```\nfirewall-cmd --add-port=2376/tcp --permanent\nfirewall-cmd --add-port=7946/tcp --permanent\nfirewall-cmd --add-port=7946/udp --permanent\nfirewall-cmd --add-port=4789/udp --permanent\n```\n\n重新加载防火墙\n> firewall-cmd --reload\n\n重启Docker\n> systemctl restart docker\n\n\n\n## Docker 18.09 版本更新\n\n18.09以上的版本提供了ssh到docker的功能，具体方法是 `docker -H ssh://user@server` 然后再输入你想操作的docker指令。\n\n比如运行: \n`docker -H ssh://user@server run -it --rm busybox`\n\n这样我们就可以直接从本地SSH到服务器的docker，并把Secret传进去从而实现目前最安全的secret部署方法。\n\n首先授权给当前用户docker的使用权，我们就不需要每次都敲sudo了\n> sudo usermod -aG docker USER_NAME\n\n然后打开terminal通过本地传secrete:\n> echo \"SECRET_NAME\" | docker -H ssh://USER_NAME@YOUR_HOST secret create secret_name -\n如果用file的当做secret的话\n> docker -H ssh://USER_NAME@YOUR_HOST secret create secret_name.txt\n\n成功之后会打印出secret的ID`xtgwhpfr6cyvqp3gnmeevorws`，也可以ssh进服务器使用`docker secret ls`查看是否存在刚才注入的secret\n\n这样就在服务器中完全不留痕迹的注入了secret。","slug":"2018-10-04-docker-note","published":1,"updated":"2019-12-07T08:11:24.361Z","comments":1,"photos":[],"link":"","_id":"ck4ddyiuf0011phvp3puwf2pz","content":"<p>Docker学习笔记</p>\n<a id=\"more\"></a>\n<h4 id=\"2019年3月更新\"><a class=\"markdownIt-Anchor\" href=\"#2019年3月更新\"></a> 2019年3月更新</h4>\n<ul>\n<li>更新docker swarm及secret</li>\n</ul>\n<h2 id=\"为什么要用docker\"><a class=\"markdownIt-Anchor\" href=\"#为什么要用docker\"></a> 为什么要用Docker</h2>\n<p>Docker是一个轻量级的虚拟系统，我们叫它容器。因不同系统和版本的不同，部署服务器的时候总是会出现不同的错误，让开发效率大大降低。docker的出现让服务器开发不再受限于系统版本，让一套代码永远可以在不同服务器上一致运行。同时docker也是微服务架构中不可缺少的部分，让不同微服务之间协调效率高效。</p>\n<h2 id=\"第一个docker-container\"><a class=\"markdownIt-Anchor\" href=\"#第一个docker-container\"></a> 第一个Docker Container</h2>\n<h2 id=\"docker安装\"><a class=\"markdownIt-Anchor\" href=\"#docker安装\"></a> Docker安装</h2>\n<p>Linux可以通过<a href=\"https://get.docker.com/\" target=\"_blank\" rel=\"noopener\">get.docker.com</a>快捷安装。<br />\n复制文档前面注释中的代码脚步即可</p>\n<p>安装完成后，这是几个常用的CLI(command line interface)命令</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\">systemctl start docker   &#x2F;&#x2F; 启动docker服务</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\">systemctl stop docker    &#x2F;&#x2F; 停止docker服务</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\">systemctl restart docker &#x2F;&#x2F; 重启docker服务</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">4</span></pre></td><td class=\"code\"><pre><span class=\"line\">systemctl status docker  &#x2F;&#x2F; 查看docker服务状态</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">5</span></pre></td><td class=\"code\"><pre><span class=\"line\">systemctl enable docker  &#x2F;&#x2F; 开机启动docker服务</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">6</span></pre></td><td class=\"code\"><pre><span class=\"line\">systemctl disable docker &#x2F;&#x2F; 取消开机启动docker服务</span></pre></td></tr></table></figure>\n<p>在运行<code>systemctl start docker</code>后，可以试一下<code>docker container run hello-world</code>，之后会在命令栏中print出来行 hello-world即代表安装成功</p>\n<h2 id=\"制作一个nginx的容器\"><a class=\"markdownIt-Anchor\" href=\"#制作一个nginx的容器\"></a> 制作一个Nginx的容器</h2>\n<p>每一个容器都相当于一个虚拟系统</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\">docker container run --publish 80:80 --detach --name webhost nginx</span></pre></td></tr></table></figure>\n<p>这行命令的运行流程：</p>\n<ol>\n<li>从Dokcer hub下载nginx的镜像(image)</li>\n<li>创建新的名为webhost的container</li>\n<li><code>--publish 80:80</code>为开放容器的80接口</li>\n<li>将来自host的80接口网络请求路由至80容器接口</li>\n<li>–detach 让这个container在后台运行</li>\n</ol>\n<p>容器部署成功后，运行下面的命令会显示本地活跃docker实例, 添加 -a会显示全部实例(包括已经停止的实例)</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\">docker container ls</span></pre></td></tr></table></figure>\n<p>停止一个容器</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\">docker container stop container-name</span></pre></td></tr></table></figure>\n<p>查看log</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\">docker container logs container-name</span></pre></td></tr></table></figure>\n<p>删除container。名称或id可以叠加用于删除多项container</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\">docker rm container-name</span></pre></td></tr></table></figure>\n<h2 id=\"image镜像-vs-container容器\"><a class=\"markdownIt-Anchor\" href=\"#image镜像-vs-container容器\"></a> Image镜像 vs Container容器</h2>\n<p>Container是Image的实例</p>\n<p>可以理解为Image是一个class类，container是新建的对象</p>\n<p>Image是如和新建Container的一个说明书</p>\n<h2 id=\"cheat-sheet\"><a class=\"markdownIt-Anchor\" href=\"#cheat-sheet\"></a> Cheat sheet</h2>\n<p>向container里传递环境参数</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\">--env or -e</span></pre></td></tr></table></figure>\n<p>查看container里面的top process</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\">docker container top container-name</span></pre></td></tr></table></figure>\n<p>显示这个container的metadata（配置，网络等）</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\">docker container insepct</span></pre></td></tr></table></figure>\n<p>显示实时信息（简单的监测）</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\">docker container stats</span></pre></td></tr></table></figure>\n<p>进入容器交互(interactive)模式(就是进去虚拟系统)</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\">docker container run -it CONTAINER_NAME bash</span></pre></td></tr></table></figure>\n<p>-t : pseudo-TTY</p>\n<p>-i : interactive</p>\n<h2 id=\"创建一个ubuntu的容器\"><a class=\"markdownIt-Anchor\" href=\"#创建一个ubuntu的容器\"></a> 创建一个ubuntu的容器</h2>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\">docker container run -it --name ubuntu ubuntu</span></pre></td></tr></table></figure>\n<p>如果退出后再次进入的命令会不一样:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\">docker container start -ai ubuntu</span></pre></td></tr></table></figure>\n<p>进入一个正在运行的container的shell（创建了一个多出的process）</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\">docker container exec -it container-name bash</span></pre></td></tr></table></figure>\n<h2 id=\"docker-网络\"><a class=\"markdownIt-Anchor\" href=\"#docker-网络\"></a> Docker 网络</h2>\n<p>-p 用来暴露你的网络接口</p>\n<ul>\n<li>每一个container接入一个私有虚拟网络“bridge”</li>\n<li>每一个虚拟网络通过NAT防火墙路由出去</li>\n<li>所有的container都可以在自己的虚拟网络内部交流（不用-p暴露给公网）</li>\n<li>最好为每一个独立App建立一个自己的虚拟网络（比如给mongo和node单独创建一个虚拟网络）</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\">docker container port container-name</span></pre></td></tr></table></figure>\n<p>显示路由</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\">docker container inspect --format &#39;\\&#123;\\&#123; .NetworkSettings.IPAddress\\&#125;\\&#125;&#39; container-name</span></pre></td></tr></table></figure>\n<p>查询container地址  --format 是filter</p>\n<p><img src=\"../../../../images/posts/docker/docker-network.png\" alt=\"docker-network\" /> docker network</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\">docker network ls</span></pre></td></tr></table></figure>\n<p>显示所有网络<br />\nbirdge是默认网络，连接外网<br />\nhost是绕过bridge直接连接外网（性能好，安全性低）<br />\nnone什么都不连接</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\">docker network inspect container-name</span></pre></td></tr></table></figure>\n<p>查看网络<br />\ndocker network inspect bridge 可以查看哪些container正在连着bridge。“IPAM”是自动被赋值的IP地址。默认subnet “172.17.0.0/16”</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\">dokcer network create --drive</span></pre></td></tr></table></figure>\n<p>建立一个网络<br />\n–drive 指定一个drive（bridge host none或者第三方dirve）默认bridge</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\">docker network connet</span></pre></td></tr></table></figure>\n<p>连接一个网络<br />\n一个container可以连接到两个network上</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\">docker network disconnect</span></pre></td></tr></table></figure>\n<p>退出一个网络</p>\n<p>如果要让新的container连接到该网络:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\">docker container run -d --name new_nginx --network new_network_name nginx</span></pre></td></tr></table></figure>\n<h2 id=\"dns\"><a class=\"markdownIt-Anchor\" href=\"#dns\"></a> DNS</h2>\n<p>因为container中的IP是不固定的，所以需要DNS<br />\n两个在相同虚拟网络下的container可以默认通过名字互通</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\">docker container exec -it con2 ping con1</span></pre></td></tr></table></figure>\n<p>其中con1和con2在同一网络下（需要先apt-get update &amp;&amp; apt-get install -y inputils-ping）</p>\n<h2 id=\"dns-round-robin-test\"><a class=\"markdownIt-Anchor\" href=\"#dns-round-robin-test\"></a> DNS Round Robin Test</h2>\n<ol>\n<li>新建一个虚拟网络</li>\n<li>创建两个elasticsearch:2的镜像</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\">eg: docker container run --name elastic1 -d --network test --network-alias search elasticsearch:1</span></pre></td></tr></table></figure>\n<ol start=\"3\">\n<li>使用–network-alias为两个container标记alias</li>\n<li>运行docker container run --rm --net ass centos curl -s search:9200 附加为–net查看同样DNS名称下的两个网络</li>\n<li>centos curl -s search:9200 --net</li>\n</ol>\n<h2 id=\"docker-image\"><a class=\"markdownIt-Anchor\" href=\"#docker-image\"></a> Docker image</h2>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\">docker pull nginx:latest</span></pre></td></tr></table></figure>\n<p>生产环境下，最好为Image标注一个固定的版本号，不要用latest</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\">docker history nginx:latest</span></pre></td></tr></table></figure>\n<p>显示全部nginx的历史layer，每一个layer都代表了一次更新，每一层layer共同组成了一个image<br />\n共同使用的layer不会被下载，每一个layer有唯一的SHA区分</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\">docker inspect nginx:latest</span></pre></td></tr></table></figure>\n<p>显示这个image的metadata比如“ContainerConfig”: &quot;ExpposedPorts&quot;说明哪个接口会被期望被开通，&quot;Cmd&quot;显示哪些command在运行时会被运行…</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\">docker image tag nginx dockerHubName&#x2F;nginx</span></pre></td></tr></table></figure>\n<p>为image加一个tag,tag不会改变Image ID，如果后面不添加tag（详情下一行）,默认latest<br />\n需要加自己dockerhub的tag才可以push上去</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\">docker image tag nginx dockerHubName&#x2F;ngnix dockerHubName&#x2F;nginx:testing</span></pre></td></tr></table></figure>\n<p>为这个Image添加一个testing的tag</p>\n<p>如果想让repo是私人的，现在docker hub上创建一个private repo再push</p>\n<h2 id=\"dockerfile\"><a class=\"markdownIt-Anchor\" href=\"#dockerfile\"></a> Dockerfile</h2>\n<blockquote>\n<p>docker build -f some-dockerfile</p>\n</blockquote>\n<blockquote>\n<p>FROM: required</p>\n</blockquote>\n<p>选择一个minimal distribution. (debian, centos), 很多工具都不具备</p>\n<blockquote>\n<p>WORKDIR /etc/nginx</p>\n</blockquote>\n<p>相当于cd</p>\n<blockquote>\n<p>COPY</p>\n</blockquote>\n<p>复制source code从local</p>\n<blockquote>\n<p>EVN:</p>\n</blockquote>\n<p>eg. NGINX_VERSION 1.11.10-jessie<br />\n导入环境变量</p>\n<blockquote>\n<p>RUN:</p>\n</blockquote>\n<p>运行Shell command, 两个command之间可以用&amp;&amp;连接，表示在同一layer<br />\nRUN可以有多个</p>\n<p>**Docker有自己的log file(stdout, stderr)，所以用Nginx自带的log并不是最理性的解决方案</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\">RUN ln -sf &#x2F;dev&#x2F;stdout &#x2F;var&#x2F;log&#x2F;nginx&#x2F;access.log &amp;&amp; ln -sf &#x2F;dev&#x2F;stderr &#x2F;var&#x2F;log&#x2F;nginx&#x2F;error.log</span></pre></td></tr></table></figure>\n<p>将nginx的log导入进docker</p>\n<blockquote>\n<p>EXPOSE:</p>\n</blockquote>\n<p>允许暴露的接口，比如web需要暴露 <strong>EXPOSE: 80 443</strong><br />\n但是这只是允许权限,还是需要用**-p**在host中暴露这些接口</p>\n<blockquote>\n<p>CMD: []  required 但是可以inherit from FROM image</p>\n</blockquote>\n<p>当container运行的时候运行的命令，Dockerfile中只能存在一个CMD，如果存在多个，最后一个优先级最高</p>\n<h2 id=\"build-dockerfile\"><a class=\"markdownIt-Anchor\" href=\"#build-dockerfile\"></a> Build Dockerfile</h2>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\">dokcer image build -t customnginx .</span></pre></td></tr></table></figure>\n<p>第一次build时间较长，但是所有步骤会被存cache。<br />\n修改一行Dockerfile中的文件后，这一行之后的所有步骤都会重新build，所以文件order很重要，把多变的代码放在后面。</p>\n<h2 id=\"小节\"><a class=\"markdownIt-Anchor\" href=\"#小节\"></a> 小节</h2>\n<p>创建Dockerfile，如果能用offical repo的base image就用official的，如果不能满足要求就去Docker hub看看有没有可靠高的image。都不能满足要求可以自己用minimal distribution创建自己的Dockerfile。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\">docker image build -t tag-name .</span></pre></td></tr></table></figure>\n<p>build已创建的Dockerfile并标注tag</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\">docker container run -p 80:80 tag-name</span></pre></td></tr></table></figure>\n<p>运行刚刚创建的image</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\">docker image tag tag-name:additional-tag dockerHubName&#x2F;tag-name:additional-tag</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\">docker push dockerHubName&#x2F;tag-name:additional-tag</span></pre></td></tr></table></figure>\n<h2 id=\"数据保存\"><a class=\"markdownIt-Anchor\" href=\"#数据保存\"></a> 数据保存</h2>\n<p>container是不可更改，稍纵即逝的，不应该用于保存数据。<br />\nDocker有两种解决方式：Volumes和Bind Mounts<br />\nVolumes是在container外部规定一个区域用来存储数据<br />\nBind Mounts用来加载外部数据。</p>\n<h3 id=\"volumes\"><a class=\"markdownIt-Anchor\" href=\"#volumes\"></a> Volumes</h3>\n<p>在Dockerfile中添加Volume规则</p>\n<blockquote>\n<p>VOLUME /path/to/db<br />\n删除container后不会影响Volume，需要多一个步骤将其删除。</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\">docker volume ls</span></pre></td></tr></table></figure>\n<p>可以用来查看当前机器创建了多少Volumes</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\">docker volume inspect XXX</span></pre></td></tr></table></figure>\n<p>如果在linux机器上，通过Mountpoint地址可以看到数据。Mac和Windows看不到(在linux VM里)</p>\n<p>如果需要创建Volume，记得在docker container run的时候添加 -v name:/path/to/db 来定义Volume名称。否则很难区分Volume对应的container</p>\n<blockquote>\n<p>docker volume create</p>\n</blockquote>\n<h2 id=\"bind-mounting\"><a class=\"markdownIt-Anchor\" href=\"#bind-mounting\"></a> Bind Mounting</h2>\n<p>将host的文件或目录映射到container的文件或目录。<br />\n无法在Dockerfile里写，只能通过<code>container run -v /Users/username/stuff:/path/container</code>实现。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\">docker container run -d --name nginx -p 80:80 -v $(pwd):&#x2F;usr&#x2F;share&#x2F;nginx&#x2F;html nginx</span></pre></td></tr></table></figure>\n<p>将当前目录$(pwd)映射到/usr/share/nginx/html里面，当当前目录变的时候，container里面的文件也会变。</p>\n<h2 id=\"docker-compose\"><a class=\"markdownIt-Anchor\" href=\"#docker-compose\"></a> Docker Compose</h2>\n<ul>\n<li>保存docker run settings</li>\n<li>使用YAML</li>\n<li>CLI tool</li>\n</ul>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">version:</span> <span class=\"string\">'3.1'</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">service:</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">4</span></pre></td><td class=\"code\"><pre><span class=\"line\">\t<span class=\"attr\">servicename:</span> <span class=\"comment\">#DNS name inside network</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">5</span></pre></td><td class=\"code\"><pre><span class=\"line\">\t\t<span class=\"attr\">image:</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">6</span></pre></td><td class=\"code\"><pre><span class=\"line\">\t\t<span class=\"attr\">command:</span> <span class=\"comment\">#replace the default CMD specified by the image</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">7</span></pre></td><td class=\"code\"><pre><span class=\"line\">\t\t<span class=\"attr\">environment:</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">8</span></pre></td><td class=\"code\"><pre><span class=\"line\">\t\t<span class=\"attr\">volumes:</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">9</span></pre></td><td class=\"code\"><pre><span class=\"line\">\t\t<span class=\"attr\">ports:</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">10</span></pre></td><td class=\"code\"><pre><span class=\"line\">\t\t  <span class=\"bullet\">-</span> <span class=\"number\">80</span><span class=\"string\">:80</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">11</span></pre></td><td class=\"code\"><pre><span class=\"line\">\t<span class=\"attr\">servicename2:</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">12</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">13</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">volumes:</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">14</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">15</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">networks:</span></span></pre></td></tr></table></figure>\n<p>后台运行当前docker compose</p>\n<figure class=\"highlight plain\"><figcaption><span>up -d ```</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\">卸载docker compose</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; docker-compose down</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">4</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">5</span></pre></td><td class=\"code\"><pre><span class=\"line\">查看container中的services</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">6</span></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;docker compose top</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">7</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">8</span></pre></td><td class=\"code\"><pre><span class=\"line\">&#96;&#96;&#96;yml</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">9</span></pre></td><td class=\"code\"><pre><span class=\"line\">services:</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">10</span></pre></td><td class=\"code\"><pre><span class=\"line\">  proxy:</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">11</span></pre></td><td class=\"code\"><pre><span class=\"line\">    build:</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">12</span></pre></td><td class=\"code\"><pre><span class=\"line\">      context: .</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">13</span></pre></td><td class=\"code\"><pre><span class=\"line\">      dockerfile: nginx.Dockerfile</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">14</span></pre></td><td class=\"code\"><pre><span class=\"line\">  image: nginx-custom  </span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">15</span></pre></td><td class=\"code\"><pre><span class=\"line\">  ports:</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">16</span></pre></td><td class=\"code\"><pre><span class=\"line\">      - &#39;80:80&#39;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">17</span></pre></td><td class=\"code\"><pre><span class=\"line\">  web:</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">18</span></pre></td><td class=\"code\"><pre><span class=\"line\">    image: httpd</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">19</span></pre></td><td class=\"code\"><pre><span class=\"line\">    volumes:</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">20</span></pre></td><td class=\"code\"><pre><span class=\"line\">      - .&#x2F;html:&#x2F;usr&#x2F;local&#x2F;apache2&#x2F;htdocs&#x2F;</span></pre></td></tr></table></figure>\n<p>dockerfile指向当前目录自定义的dockerfile，这里是一个nginx的自定义image<br />\n第二个service是server，把当前html目录绑定到container里面，所以可以在runtime情况下改变网页文件<br />\n一般情况下会有第三个service作为database</p>\n<h2 id=\"docker-swarm\"><a class=\"markdownIt-Anchor\" href=\"#docker-swarm\"></a> Docker Swarm</h2>\n<p>docker swarm 是docker提供的非常易学高效的分布式部署方式</p>\n<h2 id=\"swarm集群初始化\"><a class=\"markdownIt-Anchor\" href=\"#swarm集群初始化\"></a> Swarm集群初始化</h2>\n<figure class=\"highlight docker\"><figcaption><span>swarm init [OPTIONS]```</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\">options:</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\">⋅⋅⋅*--advertise-addr: 多网卡的情况下，指定需要使用的ip</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">4</span></pre></td><td class=\"code\"><pre><span class=\"line\">⋅⋅⋅*--listen-addr: 指定监听的 ip 与端口</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">5</span></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!-- ⋅⋅⋅*--availability: 节点的有效性(<span class=\"string\">\"active\"</span>|<span class=\"string\">\"pause\"</span>|<span class=\"string\">\"drain\"</span>) --&gt;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">6</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">7</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">8</span></pre></td><td class=\"code\"><pre><span class=\"line\">```docker service``` 相当于docker container <span class=\"keyword\">run</span><span class=\"bash\">。区别在于这是给orchestration命令，让它放在queue里自动部署</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">9</span></pre></td><td class=\"code\"><pre><span class=\"line\">```docker service update```可以更新正在运行的services的一些参数，用于rolling update</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">10</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">11</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">12</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">13</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">## overlay network</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">14</span></pre></td><td class=\"code\"><pre><span class=\"line\">同一swarm下容器之间的访问。</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">15</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">16</span></pre></td><td class=\"code\"><pre><span class=\"line\">```docker network create --driver overlay NETWORK_NAME</span></pre></td></tr></table></figure>\n<p>然后用docker service部署在这个NETWORK_NAME网络中即可</p>\n<h2 id=\"routing-mesh\"><a class=\"markdownIt-Anchor\" href=\"#routing-mesh\"></a> Routing Mesh</h2>\n<p>Load balances Swarm services across their tasks<br />\n所以在公开接口上的请求都会被自动load balance到不同node上.<br />\n这个load balancer是在OSI Layer 3(TCP)上的，不是在Layer4(DNS)，并且是stateless<br />\n意思是只能在访问IP和port的时候才可以导流，如果一台服务器运行多个server并运行在一个swarm中，则需要在DNS的Layer上创建一个Nginx(stateful load balancers)</p>\n<p>在overlay network上，cluster中访问任意一个node的IP都可以得到相同的结果</p>\n<h2 id=\"docker-stack\"><a class=\"markdownIt-Anchor\" href=\"#docker-stack\"></a> Docker Stack</h2>\n<p>docker compose file for swarm</p>\n<figure class=\"highlight docker\"><figcaption><span>stack deploy```自动部署services，但deploy不支持build。需要把自己的image build一下并上传到repo中，在stack中换成repo中的image</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\">```yml</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\">version: <span class=\"string\">\"3\"</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">4</span></pre></td><td class=\"code\"><pre><span class=\"line\">services:</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">5</span></pre></td><td class=\"code\"><pre><span class=\"line\">  redis:</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">6</span></pre></td><td class=\"code\"><pre><span class=\"line\">    image: redis:alpine</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">7</span></pre></td><td class=\"code\"><pre><span class=\"line\">    ports:</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">8</span></pre></td><td class=\"code\"><pre><span class=\"line\">      - <span class=\"string\">\"6379\"</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">9</span></pre></td><td class=\"code\"><pre><span class=\"line\">    networks:</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">10</span></pre></td><td class=\"code\"><pre><span class=\"line\">      - frontend</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">11</span></pre></td><td class=\"code\"><pre><span class=\"line\">    deploy:</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">12</span></pre></td><td class=\"code\"><pre><span class=\"line\">      replicas: <span class=\"number\">2</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">13</span></pre></td><td class=\"code\"><pre><span class=\"line\">      update_config:</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">14</span></pre></td><td class=\"code\"><pre><span class=\"line\">        parallelism: <span class=\"number\">2</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">15</span></pre></td><td class=\"code\"><pre><span class=\"line\">        delay: <span class=\"number\">10</span>s</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">16</span></pre></td><td class=\"code\"><pre><span class=\"line\">      restart_policy:</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">17</span></pre></td><td class=\"code\"><pre><span class=\"line\">        condition: on-failure</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">18</span></pre></td><td class=\"code\"><pre><span class=\"line\">  db:</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">19</span></pre></td><td class=\"code\"><pre><span class=\"line\">    image: postgres:<span class=\"number\">9.4</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">20</span></pre></td><td class=\"code\"><pre><span class=\"line\">    volumes:</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">21</span></pre></td><td class=\"code\"><pre><span class=\"line\">      - db-data:/var/lib/postgresql/data</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">22</span></pre></td><td class=\"code\"><pre><span class=\"line\">    networks:</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">23</span></pre></td><td class=\"code\"><pre><span class=\"line\">      - backend</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">24</span></pre></td><td class=\"code\"><pre><span class=\"line\">    deploy:</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">25</span></pre></td><td class=\"code\"><pre><span class=\"line\">      placement:</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">26</span></pre></td><td class=\"code\"><pre><span class=\"line\">        constraints: [node.role == manager]</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">27</span></pre></td><td class=\"code\"><pre><span class=\"line\">  vote:</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">28</span></pre></td><td class=\"code\"><pre><span class=\"line\">    image: dockersamples/examplevotingapp_vote:before</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">29</span></pre></td><td class=\"code\"><pre><span class=\"line\">    ports:</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">30</span></pre></td><td class=\"code\"><pre><span class=\"line\">      - <span class=\"number\">5000</span>:<span class=\"number\">80</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">31</span></pre></td><td class=\"code\"><pre><span class=\"line\">    networks:</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">32</span></pre></td><td class=\"code\"><pre><span class=\"line\">      - frontend</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">33</span></pre></td><td class=\"code\"><pre><span class=\"line\">    depends_on:</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">34</span></pre></td><td class=\"code\"><pre><span class=\"line\">      - redis</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">35</span></pre></td><td class=\"code\"><pre><span class=\"line\">    deploy:</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">36</span></pre></td><td class=\"code\"><pre><span class=\"line\">      replicas: <span class=\"number\">2</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">37</span></pre></td><td class=\"code\"><pre><span class=\"line\">      update_config:</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">38</span></pre></td><td class=\"code\"><pre><span class=\"line\">        parallelism: <span class=\"number\">2</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">39</span></pre></td><td class=\"code\"><pre><span class=\"line\">      restart_policy:</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">40</span></pre></td><td class=\"code\"><pre><span class=\"line\">        condition: on-failure</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">41</span></pre></td><td class=\"code\"><pre><span class=\"line\">  result:</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">42</span></pre></td><td class=\"code\"><pre><span class=\"line\">    image: dockersamples/examplevotingapp_result:before</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">43</span></pre></td><td class=\"code\"><pre><span class=\"line\">    ports:</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">44</span></pre></td><td class=\"code\"><pre><span class=\"line\">      - <span class=\"number\">5001</span>:<span class=\"number\">80</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">45</span></pre></td><td class=\"code\"><pre><span class=\"line\">    networks:</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">46</span></pre></td><td class=\"code\"><pre><span class=\"line\">      - backend</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">47</span></pre></td><td class=\"code\"><pre><span class=\"line\">    depends_on:</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">48</span></pre></td><td class=\"code\"><pre><span class=\"line\">      - db</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">49</span></pre></td><td class=\"code\"><pre><span class=\"line\">    deploy:</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">50</span></pre></td><td class=\"code\"><pre><span class=\"line\">      replicas: <span class=\"number\">1</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">51</span></pre></td><td class=\"code\"><pre><span class=\"line\">      update_config:</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">52</span></pre></td><td class=\"code\"><pre><span class=\"line\">        parallelism: <span class=\"number\">2</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">53</span></pre></td><td class=\"code\"><pre><span class=\"line\">        delay: <span class=\"number\">10</span>s</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">54</span></pre></td><td class=\"code\"><pre><span class=\"line\">      restart_policy:</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">55</span></pre></td><td class=\"code\"><pre><span class=\"line\">        condition: on-failure</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">56</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">57</span></pre></td><td class=\"code\"><pre><span class=\"line\">  worker:</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">58</span></pre></td><td class=\"code\"><pre><span class=\"line\">    image: dockersamples/examplevotingapp_worker</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">59</span></pre></td><td class=\"code\"><pre><span class=\"line\">    networks:</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">60</span></pre></td><td class=\"code\"><pre><span class=\"line\">      - frontend</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">61</span></pre></td><td class=\"code\"><pre><span class=\"line\">      - backend</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">62</span></pre></td><td class=\"code\"><pre><span class=\"line\">    deploy:</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">63</span></pre></td><td class=\"code\"><pre><span class=\"line\">      mode: replicated</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">64</span></pre></td><td class=\"code\"><pre><span class=\"line\">      replicas: <span class=\"number\">5</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">65</span></pre></td><td class=\"code\"><pre><span class=\"line\">      labels: [APP=VOTING]</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">66</span></pre></td><td class=\"code\"><pre><span class=\"line\">      restart_policy:</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">67</span></pre></td><td class=\"code\"><pre><span class=\"line\">        condition: on-failure</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">68</span></pre></td><td class=\"code\"><pre><span class=\"line\">        delay: <span class=\"number\">10</span>s</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">69</span></pre></td><td class=\"code\"><pre><span class=\"line\">        max_attempts: <span class=\"number\">3</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">70</span></pre></td><td class=\"code\"><pre><span class=\"line\">        window: <span class=\"number\">120</span>s</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">71</span></pre></td><td class=\"code\"><pre><span class=\"line\">      placement:</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">72</span></pre></td><td class=\"code\"><pre><span class=\"line\">        constraints: [node.role == manager]</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">73</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">74</span></pre></td><td class=\"code\"><pre><span class=\"line\">  visualizer:</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">75</span></pre></td><td class=\"code\"><pre><span class=\"line\">    image: dockersamples/visualizer</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">76</span></pre></td><td class=\"code\"><pre><span class=\"line\">    ports:</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">77</span></pre></td><td class=\"code\"><pre><span class=\"line\">      - <span class=\"string\">\"8080:8080\"</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">78</span></pre></td><td class=\"code\"><pre><span class=\"line\">    stop_grace_period: <span class=\"number\">1</span>m30s</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">79</span></pre></td><td class=\"code\"><pre><span class=\"line\">    volumes:</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">80</span></pre></td><td class=\"code\"><pre><span class=\"line\">      - <span class=\"string\">\"/var/run/docker.sock:/var/run/docker.sock\"</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">81</span></pre></td><td class=\"code\"><pre><span class=\"line\">    deploy:</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">82</span></pre></td><td class=\"code\"><pre><span class=\"line\">      placement:</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">83</span></pre></td><td class=\"code\"><pre><span class=\"line\">        constraints: [node.role == manager]</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">84</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">85</span></pre></td><td class=\"code\"><pre><span class=\"line\">networks:</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">86</span></pre></td><td class=\"code\"><pre><span class=\"line\">  frontend:</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">87</span></pre></td><td class=\"code\"><pre><span class=\"line\">  backend:</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">88</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">89</span></pre></td><td class=\"code\"><pre><span class=\"line\">volumes:</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">90</span></pre></td><td class=\"code\"><pre><span class=\"line\">  db-data:</span></pre></td></tr></table></figure>\n<p>部署上面的代码：</p>\n<figure class=\"highlight docker\"><figcaption><span>stack deploy -c docker-stack.yml voteapp```</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\">```docker stack services STACK_NAME```可以查看此stack部署的services情况</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\">```docker stack ps STACK_NAME```可以查看这个stack怎样运行的</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">4</span></pre></td><td class=\"code\"><pre><span class=\"line\">基本和compose差不多，但是version要用<span class=\"number\">3</span>或以上.</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">5</span></pre></td><td class=\"code\"><pre><span class=\"line\">deploy可以设置部署多个实例，update时的设置之类的。</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">6</span></pre></td><td class=\"code\"><pre><span class=\"line\">deploy.placement.constraints可以说设置只部署在manager node上</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">7</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">8</span></pre></td><td class=\"code\"><pre><span class=\"line\">如果要update整个stack，最好先改stack file然后再运行```docker -c YML_FILE stack deploy```更新stack</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">9</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">10</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">11</span></pre></td><td class=\"code\"><pre><span class=\"line\">Swarm Secrect</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">12</span></pre></td><td class=\"code\"><pre><span class=\"line\">-----------</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">13</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#在service中</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">14</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">15</span></pre></td><td class=\"code\"><pre><span class=\"line\">Secrect会被加密储存在docker自己的Raft log中，并会分发给所有manager，当manager管理的worker需要secret时分发下去。</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">16</span></pre></td><td class=\"code\"><pre><span class=\"line\">所有的secrect都在/<span class=\"keyword\">run</span><span class=\"bash\">/secrets/的目录中, 作为一个file。</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">17</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">18</span></pre></td><td class=\"code\"><pre><span class=\"line\">如果在`docker service`中使用环境变量</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">19</span></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; docker service create -e ENV_VAR_FILE=/<span class=\"keyword\">run</span><span class=\"bash\">/secrets/SECRET_NAME SERVICE_NAME</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">20</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">21</span></pre></td><td class=\"code\"><pre><span class=\"line\">两种secret注入swarm的方法：</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">22</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">1</span>）文件注入:</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">23</span></pre></td><td class=\"code\"><pre><span class=\"line\">在当前目录创建包含secret的文件，运行</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">24</span></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; docker secret create SECRET_NAME SECRET_FILE.txt</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">25</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">26</span></pre></td><td class=\"code\"><pre><span class=\"line\">坏处：密码文件在服务器中，非常危险</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">27</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">28</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">2</span>）command line注入</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">29</span></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; echo <span class=\"string\">\"SECRET_NAME\"</span> | docker secret create SECRET_NAME -</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">30</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">31</span></pre></td><td class=\"code\"><pre><span class=\"line\">坏处：如果有人进去root，可以通过bash history查找到明文密码</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">32</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">33</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">34</span></pre></td><td class=\"code\"><pre><span class=\"line\">查看密码</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">35</span></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; docker secret inspect SECRET_NAME</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">36</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">37</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#在stack中</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">38</span></pre></td><td class=\"code\"><pre><span class=\"line\">stack yml file的version需要大于等于<span class=\"number\">3.1</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">39</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">40</span></pre></td><td class=\"code\"><pre><span class=\"line\">```yml</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">41</span></pre></td><td class=\"code\"><pre><span class=\"line\">version: <span class=\"string\">\"3.1\"</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">42</span></pre></td><td class=\"code\"><pre><span class=\"line\">  services:</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">43</span></pre></td><td class=\"code\"><pre><span class=\"line\">    psql:</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">44</span></pre></td><td class=\"code\"><pre><span class=\"line\">      image: postgres</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">45</span></pre></td><td class=\"code\"><pre><span class=\"line\">      secrets:</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">46</span></pre></td><td class=\"code\"><pre><span class=\"line\">        - psql_user</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">47</span></pre></td><td class=\"code\"><pre><span class=\"line\">        - psql_password</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">48</span></pre></td><td class=\"code\"><pre><span class=\"line\">      enviroment:</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">49</span></pre></td><td class=\"code\"><pre><span class=\"line\">        POSTGRES_PASSWORD_FILE: /<span class=\"keyword\">run</span><span class=\"bash\">/secrets/psql_password</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">50</span></pre></td><td class=\"code\"><pre><span class=\"line\">        POSTGRES_USER_FILE: /<span class=\"keyword\">run</span><span class=\"bash\">/secrets/psql_user</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">51</span></pre></td><td class=\"code\"><pre><span class=\"line\">secrets:</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">52</span></pre></td><td class=\"code\"><pre><span class=\"line\">  psql_user:</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">53</span></pre></td><td class=\"code\"><pre><span class=\"line\">    file: ./psql_user.txt</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">54</span></pre></td><td class=\"code\"><pre><span class=\"line\">  psql_password:</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">55</span></pre></td><td class=\"code\"><pre><span class=\"line\">    file: ./psql_password.txt</span></pre></td></tr></table></figure>\n<p>stack中secret同样有两种注入方法，一种是用file，第二中是先用command line提前注入<br />\n如果用CLI注入，需要用<code>external:</code>标签标明secrets来源</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">secrets:</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"attr\">psql_user:</span> </span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"attr\">external:</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">4</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"attr\">psql_password:</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">5</span></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"attr\">external:</span></span></pre></td></tr></table></figure>\n<p>secrets中还可以自定义permission，可以指定某系统用户才能使用secrets</p>\n<p><strong>当deploy完成之后，要及时清理bash history或secret file</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\">TCP port 2376 for secure Docker client communication. This port is required for Docker Machine to work. Docker Machine is used to orchestrate Docker hosts.</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\">TCP port 2377. This port is used for communication between the nodes of a Docker Swarm or cluster. It only needs to be opened on manager nodes.</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\">TCP and UDP port 7946 for communication among nodes (container network discovery).</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">4</span></pre></td><td class=\"code\"><pre><span class=\"line\">UDP port 4789 for overlay network traffic (container ingress networking).</span></pre></td></tr></table></figure>\n<p>CentOS7中防火墙默认关闭</p>\n<p>查看防火墙状态</p>\n<blockquote>\n<p>systemctl status firewalld</p>\n</blockquote>\n<p>开启防火墙</p>\n<blockquote>\n<p>systemctl start firewalld</p>\n</blockquote>\n<p>修改为默认开机启动</p>\n<blockquote>\n<p>systemctl enable firewalld</p>\n</blockquote>\n<p>【如果】在Manager的node上打开下列接口</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\">firewall-cmd --add-port&#x3D;2376&#x2F;tcp --permanent</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\">firewall-cmd --add-port&#x3D;2377&#x2F;tcp --permanent</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\">firewall-cmd --add-port&#x3D;7946&#x2F;tcp --permanent</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">4</span></pre></td><td class=\"code\"><pre><span class=\"line\">firewall-cmd --add-port&#x3D;7946&#x2F;udp --permanent</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">5</span></pre></td><td class=\"code\"><pre><span class=\"line\">firewall-cmd --add-port&#x3D;4789&#x2F;udp --permanent</span></pre></td></tr></table></figure>\n<p>【如果】<br />\n在worker的node上打开下列接口</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\">firewall-cmd --add-port&#x3D;2376&#x2F;tcp --permanent</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\">firewall-cmd --add-port&#x3D;7946&#x2F;tcp --permanent</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\">firewall-cmd --add-port&#x3D;7946&#x2F;udp --permanent</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">4</span></pre></td><td class=\"code\"><pre><span class=\"line\">firewall-cmd --add-port&#x3D;4789&#x2F;udp --permanent</span></pre></td></tr></table></figure>\n<p>重新加载防火墙</p>\n<blockquote>\n<p>firewall-cmd --reload</p>\n</blockquote>\n<p>重启Docker</p>\n<blockquote>\n<p>systemctl restart docker</p>\n</blockquote>\n<h2 id=\"docker-1809-版本更新\"><a class=\"markdownIt-Anchor\" href=\"#docker-1809-版本更新\"></a> Docker 18.09 版本更新</h2>\n<p>18.09以上的版本提供了ssh到docker的功能，具体方法是 <code>docker -H ssh://user@server</code> 然后再输入你想操作的docker指令。</p>\n<p>比如运行:<br />\n<code>docker -H ssh://user@server run -it --rm busybox</code></p>\n<p>这样我们就可以直接从本地SSH到服务器的docker，并把Secret传进去从而实现目前最安全的secret部署方法。</p>\n<p>首先授权给当前用户docker的使用权，我们就不需要每次都敲sudo了</p>\n<blockquote>\n<p>sudo usermod -aG docker USER_NAME</p>\n</blockquote>\n<p>然后打开terminal通过本地传secrete:</p>\n<blockquote>\n<p>echo “SECRET_NAME” | docker -H ssh://USER_NAME@YOUR_HOST secret create secret_name -<br />\n如果用file的当做secret的话<br />\ndocker -H ssh://USER_NAME@YOUR_HOST secret create secret_name.txt</p>\n</blockquote>\n<p>成功之后会打印出secret的ID<code>xtgwhpfr6cyvqp3gnmeevorws</code>，也可以ssh进服务器使用<code>docker secret ls</code>查看是否存在刚才注入的secret</p>\n<p>这样就在服务器中完全不留痕迹的注入了secret。</p>\n<!-- flag of hidden posts -->","site":{"data":{}},"excerpt":"<p>Docker学习笔记</p>","more":"<h4 id=\"2019年3月更新\"><a class=\"markdownIt-Anchor\" href=\"#2019年3月更新\"></a> 2019年3月更新</h4>\n<ul>\n<li>更新docker swarm及secret</li>\n</ul>\n<h2 id=\"为什么要用docker\"><a class=\"markdownIt-Anchor\" href=\"#为什么要用docker\"></a> 为什么要用Docker</h2>\n<p>Docker是一个轻量级的虚拟系统，我们叫它容器。因不同系统和版本的不同，部署服务器的时候总是会出现不同的错误，让开发效率大大降低。docker的出现让服务器开发不再受限于系统版本，让一套代码永远可以在不同服务器上一致运行。同时docker也是微服务架构中不可缺少的部分，让不同微服务之间协调效率高效。</p>\n<h2 id=\"第一个docker-container\"><a class=\"markdownIt-Anchor\" href=\"#第一个docker-container\"></a> 第一个Docker Container</h2>\n<h2 id=\"docker安装\"><a class=\"markdownIt-Anchor\" href=\"#docker安装\"></a> Docker安装</h2>\n<p>Linux可以通过<a href=\"https://get.docker.com/\" target=\"_blank\" rel=\"noopener\">get.docker.com</a>快捷安装。<br />\n复制文档前面注释中的代码脚步即可</p>\n<p>安装完成后，这是几个常用的CLI(command line interface)命令</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\">systemctl start docker   &#x2F;&#x2F; 启动docker服务</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\">systemctl stop docker    &#x2F;&#x2F; 停止docker服务</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\">systemctl restart docker &#x2F;&#x2F; 重启docker服务</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">4</span></pre></td><td class=\"code\"><pre><span class=\"line\">systemctl status docker  &#x2F;&#x2F; 查看docker服务状态</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">5</span></pre></td><td class=\"code\"><pre><span class=\"line\">systemctl enable docker  &#x2F;&#x2F; 开机启动docker服务</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">6</span></pre></td><td class=\"code\"><pre><span class=\"line\">systemctl disable docker &#x2F;&#x2F; 取消开机启动docker服务</span></pre></td></tr></table></figure>\n<p>在运行<code>systemctl start docker</code>后，可以试一下<code>docker container run hello-world</code>，之后会在命令栏中print出来行 hello-world即代表安装成功</p>\n<h2 id=\"制作一个nginx的容器\"><a class=\"markdownIt-Anchor\" href=\"#制作一个nginx的容器\"></a> 制作一个Nginx的容器</h2>\n<p>每一个容器都相当于一个虚拟系统</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\">docker container run --publish 80:80 --detach --name webhost nginx</span></pre></td></tr></table></figure>\n<p>这行命令的运行流程：</p>\n<ol>\n<li>从Dokcer hub下载nginx的镜像(image)</li>\n<li>创建新的名为webhost的container</li>\n<li><code>--publish 80:80</code>为开放容器的80接口</li>\n<li>将来自host的80接口网络请求路由至80容器接口</li>\n<li>–detach 让这个container在后台运行</li>\n</ol>\n<p>容器部署成功后，运行下面的命令会显示本地活跃docker实例, 添加 -a会显示全部实例(包括已经停止的实例)</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\">docker container ls</span></pre></td></tr></table></figure>\n<p>停止一个容器</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\">docker container stop container-name</span></pre></td></tr></table></figure>\n<p>查看log</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\">docker container logs container-name</span></pre></td></tr></table></figure>\n<p>删除container。名称或id可以叠加用于删除多项container</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\">docker rm container-name</span></pre></td></tr></table></figure>\n<h2 id=\"image镜像-vs-container容器\"><a class=\"markdownIt-Anchor\" href=\"#image镜像-vs-container容器\"></a> Image镜像 vs Container容器</h2>\n<p>Container是Image的实例</p>\n<p>可以理解为Image是一个class类，container是新建的对象</p>\n<p>Image是如和新建Container的一个说明书</p>\n<h2 id=\"cheat-sheet\"><a class=\"markdownIt-Anchor\" href=\"#cheat-sheet\"></a> Cheat sheet</h2>\n<p>向container里传递环境参数</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\">--env or -e</span></pre></td></tr></table></figure>\n<p>查看container里面的top process</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\">docker container top container-name</span></pre></td></tr></table></figure>\n<p>显示这个container的metadata（配置，网络等）</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\">docker container insepct</span></pre></td></tr></table></figure>\n<p>显示实时信息（简单的监测）</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\">docker container stats</span></pre></td></tr></table></figure>\n<p>进入容器交互(interactive)模式(就是进去虚拟系统)</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\">docker container run -it CONTAINER_NAME bash</span></pre></td></tr></table></figure>\n<p>-t : pseudo-TTY</p>\n<p>-i : interactive</p>\n<h2 id=\"创建一个ubuntu的容器\"><a class=\"markdownIt-Anchor\" href=\"#创建一个ubuntu的容器\"></a> 创建一个ubuntu的容器</h2>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\">docker container run -it --name ubuntu ubuntu</span></pre></td></tr></table></figure>\n<p>如果退出后再次进入的命令会不一样:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\">docker container start -ai ubuntu</span></pre></td></tr></table></figure>\n<p>进入一个正在运行的container的shell（创建了一个多出的process）</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\">docker container exec -it container-name bash</span></pre></td></tr></table></figure>\n<h2 id=\"docker-网络\"><a class=\"markdownIt-Anchor\" href=\"#docker-网络\"></a> Docker 网络</h2>\n<p>-p 用来暴露你的网络接口</p>\n<ul>\n<li>每一个container接入一个私有虚拟网络“bridge”</li>\n<li>每一个虚拟网络通过NAT防火墙路由出去</li>\n<li>所有的container都可以在自己的虚拟网络内部交流（不用-p暴露给公网）</li>\n<li>最好为每一个独立App建立一个自己的虚拟网络（比如给mongo和node单独创建一个虚拟网络）</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\">docker container port container-name</span></pre></td></tr></table></figure>\n<p>显示路由</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\">docker container inspect --format &#39;\\&#123;\\&#123; .NetworkSettings.IPAddress\\&#125;\\&#125;&#39; container-name</span></pre></td></tr></table></figure>\n<p>查询container地址  --format 是filter</p>\n<p><img src=\"../../../../images/posts/docker/docker-network.png\" alt=\"docker-network\" /> docker network</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\">docker network ls</span></pre></td></tr></table></figure>\n<p>显示所有网络<br />\nbirdge是默认网络，连接外网<br />\nhost是绕过bridge直接连接外网（性能好，安全性低）<br />\nnone什么都不连接</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\">docker network inspect container-name</span></pre></td></tr></table></figure>\n<p>查看网络<br />\ndocker network inspect bridge 可以查看哪些container正在连着bridge。“IPAM”是自动被赋值的IP地址。默认subnet “172.17.0.0/16”</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\">dokcer network create --drive</span></pre></td></tr></table></figure>\n<p>建立一个网络<br />\n–drive 指定一个drive（bridge host none或者第三方dirve）默认bridge</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\">docker network connet</span></pre></td></tr></table></figure>\n<p>连接一个网络<br />\n一个container可以连接到两个network上</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\">docker network disconnect</span></pre></td></tr></table></figure>\n<p>退出一个网络</p>\n<p>如果要让新的container连接到该网络:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\">docker container run -d --name new_nginx --network new_network_name nginx</span></pre></td></tr></table></figure>\n<h2 id=\"dns\"><a class=\"markdownIt-Anchor\" href=\"#dns\"></a> DNS</h2>\n<p>因为container中的IP是不固定的，所以需要DNS<br />\n两个在相同虚拟网络下的container可以默认通过名字互通</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\">docker container exec -it con2 ping con1</span></pre></td></tr></table></figure>\n<p>其中con1和con2在同一网络下（需要先apt-get update &amp;&amp; apt-get install -y inputils-ping）</p>\n<h2 id=\"dns-round-robin-test\"><a class=\"markdownIt-Anchor\" href=\"#dns-round-robin-test\"></a> DNS Round Robin Test</h2>\n<ol>\n<li>新建一个虚拟网络</li>\n<li>创建两个elasticsearch:2的镜像</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\">eg: docker container run --name elastic1 -d --network test --network-alias search elasticsearch:1</span></pre></td></tr></table></figure>\n<ol start=\"3\">\n<li>使用–network-alias为两个container标记alias</li>\n<li>运行docker container run --rm --net ass centos curl -s search:9200 附加为–net查看同样DNS名称下的两个网络</li>\n<li>centos curl -s search:9200 --net</li>\n</ol>\n<h2 id=\"docker-image\"><a class=\"markdownIt-Anchor\" href=\"#docker-image\"></a> Docker image</h2>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\">docker pull nginx:latest</span></pre></td></tr></table></figure>\n<p>生产环境下，最好为Image标注一个固定的版本号，不要用latest</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\">docker history nginx:latest</span></pre></td></tr></table></figure>\n<p>显示全部nginx的历史layer，每一个layer都代表了一次更新，每一层layer共同组成了一个image<br />\n共同使用的layer不会被下载，每一个layer有唯一的SHA区分</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\">docker inspect nginx:latest</span></pre></td></tr></table></figure>\n<p>显示这个image的metadata比如“ContainerConfig”: &quot;ExpposedPorts&quot;说明哪个接口会被期望被开通，&quot;Cmd&quot;显示哪些command在运行时会被运行…</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\">docker image tag nginx dockerHubName&#x2F;nginx</span></pre></td></tr></table></figure>\n<p>为image加一个tag,tag不会改变Image ID，如果后面不添加tag（详情下一行）,默认latest<br />\n需要加自己dockerhub的tag才可以push上去</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\">docker image tag nginx dockerHubName&#x2F;ngnix dockerHubName&#x2F;nginx:testing</span></pre></td></tr></table></figure>\n<p>为这个Image添加一个testing的tag</p>\n<p>如果想让repo是私人的，现在docker hub上创建一个private repo再push</p>\n<h2 id=\"dockerfile\"><a class=\"markdownIt-Anchor\" href=\"#dockerfile\"></a> Dockerfile</h2>\n<blockquote>\n<p>docker build -f some-dockerfile</p>\n</blockquote>\n<blockquote>\n<p>FROM: required</p>\n</blockquote>\n<p>选择一个minimal distribution. (debian, centos), 很多工具都不具备</p>\n<blockquote>\n<p>WORKDIR /etc/nginx</p>\n</blockquote>\n<p>相当于cd</p>\n<blockquote>\n<p>COPY</p>\n</blockquote>\n<p>复制source code从local</p>\n<blockquote>\n<p>EVN:</p>\n</blockquote>\n<p>eg. NGINX_VERSION 1.11.10-jessie<br />\n导入环境变量</p>\n<blockquote>\n<p>RUN:</p>\n</blockquote>\n<p>运行Shell command, 两个command之间可以用&amp;&amp;连接，表示在同一layer<br />\nRUN可以有多个</p>\n<p>**Docker有自己的log file(stdout, stderr)，所以用Nginx自带的log并不是最理性的解决方案</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\">RUN ln -sf &#x2F;dev&#x2F;stdout &#x2F;var&#x2F;log&#x2F;nginx&#x2F;access.log &amp;&amp; ln -sf &#x2F;dev&#x2F;stderr &#x2F;var&#x2F;log&#x2F;nginx&#x2F;error.log</span></pre></td></tr></table></figure>\n<p>将nginx的log导入进docker</p>\n<blockquote>\n<p>EXPOSE:</p>\n</blockquote>\n<p>允许暴露的接口，比如web需要暴露 <strong>EXPOSE: 80 443</strong><br />\n但是这只是允许权限,还是需要用**-p**在host中暴露这些接口</p>\n<blockquote>\n<p>CMD: []  required 但是可以inherit from FROM image</p>\n</blockquote>\n<p>当container运行的时候运行的命令，Dockerfile中只能存在一个CMD，如果存在多个，最后一个优先级最高</p>\n<h2 id=\"build-dockerfile\"><a class=\"markdownIt-Anchor\" href=\"#build-dockerfile\"></a> Build Dockerfile</h2>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\">dokcer image build -t customnginx .</span></pre></td></tr></table></figure>\n<p>第一次build时间较长，但是所有步骤会被存cache。<br />\n修改一行Dockerfile中的文件后，这一行之后的所有步骤都会重新build，所以文件order很重要，把多变的代码放在后面。</p>\n<h2 id=\"小节\"><a class=\"markdownIt-Anchor\" href=\"#小节\"></a> 小节</h2>\n<p>创建Dockerfile，如果能用offical repo的base image就用official的，如果不能满足要求就去Docker hub看看有没有可靠高的image。都不能满足要求可以自己用minimal distribution创建自己的Dockerfile。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\">docker image build -t tag-name .</span></pre></td></tr></table></figure>\n<p>build已创建的Dockerfile并标注tag</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\">docker container run -p 80:80 tag-name</span></pre></td></tr></table></figure>\n<p>运行刚刚创建的image</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\">docker image tag tag-name:additional-tag dockerHubName&#x2F;tag-name:additional-tag</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\">docker push dockerHubName&#x2F;tag-name:additional-tag</span></pre></td></tr></table></figure>\n<h2 id=\"数据保存\"><a class=\"markdownIt-Anchor\" href=\"#数据保存\"></a> 数据保存</h2>\n<p>container是不可更改，稍纵即逝的，不应该用于保存数据。<br />\nDocker有两种解决方式：Volumes和Bind Mounts<br />\nVolumes是在container外部规定一个区域用来存储数据<br />\nBind Mounts用来加载外部数据。</p>\n<h3 id=\"volumes\"><a class=\"markdownIt-Anchor\" href=\"#volumes\"></a> Volumes</h3>\n<p>在Dockerfile中添加Volume规则</p>\n<blockquote>\n<p>VOLUME /path/to/db<br />\n删除container后不会影响Volume，需要多一个步骤将其删除。</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\">docker volume ls</span></pre></td></tr></table></figure>\n<p>可以用来查看当前机器创建了多少Volumes</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\">docker volume inspect XXX</span></pre></td></tr></table></figure>\n<p>如果在linux机器上，通过Mountpoint地址可以看到数据。Mac和Windows看不到(在linux VM里)</p>\n<p>如果需要创建Volume，记得在docker container run的时候添加 -v name:/path/to/db 来定义Volume名称。否则很难区分Volume对应的container</p>\n<blockquote>\n<p>docker volume create</p>\n</blockquote>\n<h2 id=\"bind-mounting\"><a class=\"markdownIt-Anchor\" href=\"#bind-mounting\"></a> Bind Mounting</h2>\n<p>将host的文件或目录映射到container的文件或目录。<br />\n无法在Dockerfile里写，只能通过<code>container run -v /Users/username/stuff:/path/container</code>实现。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\">docker container run -d --name nginx -p 80:80 -v $(pwd):&#x2F;usr&#x2F;share&#x2F;nginx&#x2F;html nginx</span></pre></td></tr></table></figure>\n<p>将当前目录$(pwd)映射到/usr/share/nginx/html里面，当当前目录变的时候，container里面的文件也会变。</p>\n<h2 id=\"docker-compose\"><a class=\"markdownIt-Anchor\" href=\"#docker-compose\"></a> Docker Compose</h2>\n<ul>\n<li>保存docker run settings</li>\n<li>使用YAML</li>\n<li>CLI tool</li>\n</ul>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">version:</span> <span class=\"string\">'3.1'</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">service:</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">4</span></pre></td><td class=\"code\"><pre><span class=\"line\">\t<span class=\"attr\">servicename:</span> <span class=\"comment\">#DNS name inside network</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">5</span></pre></td><td class=\"code\"><pre><span class=\"line\">\t\t<span class=\"attr\">image:</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">6</span></pre></td><td class=\"code\"><pre><span class=\"line\">\t\t<span class=\"attr\">command:</span> <span class=\"comment\">#replace the default CMD specified by the image</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">7</span></pre></td><td class=\"code\"><pre><span class=\"line\">\t\t<span class=\"attr\">environment:</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">8</span></pre></td><td class=\"code\"><pre><span class=\"line\">\t\t<span class=\"attr\">volumes:</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">9</span></pre></td><td class=\"code\"><pre><span class=\"line\">\t\t<span class=\"attr\">ports:</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">10</span></pre></td><td class=\"code\"><pre><span class=\"line\">\t\t  <span class=\"bullet\">-</span> <span class=\"number\">80</span><span class=\"string\">:80</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">11</span></pre></td><td class=\"code\"><pre><span class=\"line\">\t<span class=\"attr\">servicename2:</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">12</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">13</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">volumes:</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">14</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">15</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">networks:</span></span></pre></td></tr></table></figure>\n<p>后台运行当前docker compose</p>\n<figure class=\"highlight plain\"><figcaption><span>up -d ```</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\">卸载docker compose</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; docker-compose down</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">4</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">5</span></pre></td><td class=\"code\"><pre><span class=\"line\">查看container中的services</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">6</span></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;docker compose top</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">7</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">8</span></pre></td><td class=\"code\"><pre><span class=\"line\">&#96;&#96;&#96;yml</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">9</span></pre></td><td class=\"code\"><pre><span class=\"line\">services:</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">10</span></pre></td><td class=\"code\"><pre><span class=\"line\">  proxy:</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">11</span></pre></td><td class=\"code\"><pre><span class=\"line\">    build:</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">12</span></pre></td><td class=\"code\"><pre><span class=\"line\">      context: .</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">13</span></pre></td><td class=\"code\"><pre><span class=\"line\">      dockerfile: nginx.Dockerfile</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">14</span></pre></td><td class=\"code\"><pre><span class=\"line\">  image: nginx-custom  </span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">15</span></pre></td><td class=\"code\"><pre><span class=\"line\">  ports:</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">16</span></pre></td><td class=\"code\"><pre><span class=\"line\">      - &#39;80:80&#39;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">17</span></pre></td><td class=\"code\"><pre><span class=\"line\">  web:</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">18</span></pre></td><td class=\"code\"><pre><span class=\"line\">    image: httpd</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">19</span></pre></td><td class=\"code\"><pre><span class=\"line\">    volumes:</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">20</span></pre></td><td class=\"code\"><pre><span class=\"line\">      - .&#x2F;html:&#x2F;usr&#x2F;local&#x2F;apache2&#x2F;htdocs&#x2F;</span></pre></td></tr></table></figure>\n<p>dockerfile指向当前目录自定义的dockerfile，这里是一个nginx的自定义image<br />\n第二个service是server，把当前html目录绑定到container里面，所以可以在runtime情况下改变网页文件<br />\n一般情况下会有第三个service作为database</p>\n<h2 id=\"docker-swarm\"><a class=\"markdownIt-Anchor\" href=\"#docker-swarm\"></a> Docker Swarm</h2>\n<p>docker swarm 是docker提供的非常易学高效的分布式部署方式</p>\n<h2 id=\"swarm集群初始化\"><a class=\"markdownIt-Anchor\" href=\"#swarm集群初始化\"></a> Swarm集群初始化</h2>\n<figure class=\"highlight docker\"><figcaption><span>swarm init [OPTIONS]```</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\">options:</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\">⋅⋅⋅*--advertise-addr: 多网卡的情况下，指定需要使用的ip</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">4</span></pre></td><td class=\"code\"><pre><span class=\"line\">⋅⋅⋅*--listen-addr: 指定监听的 ip 与端口</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">5</span></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!-- ⋅⋅⋅*--availability: 节点的有效性(<span class=\"string\">\"active\"</span>|<span class=\"string\">\"pause\"</span>|<span class=\"string\">\"drain\"</span>) --&gt;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">6</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">7</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">8</span></pre></td><td class=\"code\"><pre><span class=\"line\">```docker service``` 相当于docker container <span class=\"keyword\">run</span><span class=\"bash\">。区别在于这是给orchestration命令，让它放在queue里自动部署</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">9</span></pre></td><td class=\"code\"><pre><span class=\"line\">```docker service update```可以更新正在运行的services的一些参数，用于rolling update</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">10</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">11</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">12</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">13</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">## overlay network</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">14</span></pre></td><td class=\"code\"><pre><span class=\"line\">同一swarm下容器之间的访问。</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">15</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">16</span></pre></td><td class=\"code\"><pre><span class=\"line\">```docker network create --driver overlay NETWORK_NAME</span></pre></td></tr></table></figure>\n<p>然后用docker service部署在这个NETWORK_NAME网络中即可</p>\n<h2 id=\"routing-mesh\"><a class=\"markdownIt-Anchor\" href=\"#routing-mesh\"></a> Routing Mesh</h2>\n<p>Load balances Swarm services across their tasks<br />\n所以在公开接口上的请求都会被自动load balance到不同node上.<br />\n这个load balancer是在OSI Layer 3(TCP)上的，不是在Layer4(DNS)，并且是stateless<br />\n意思是只能在访问IP和port的时候才可以导流，如果一台服务器运行多个server并运行在一个swarm中，则需要在DNS的Layer上创建一个Nginx(stateful load balancers)</p>\n<p>在overlay network上，cluster中访问任意一个node的IP都可以得到相同的结果</p>\n<h2 id=\"docker-stack\"><a class=\"markdownIt-Anchor\" href=\"#docker-stack\"></a> Docker Stack</h2>\n<p>docker compose file for swarm</p>\n<figure class=\"highlight docker\"><figcaption><span>stack deploy```自动部署services，但deploy不支持build。需要把自己的image build一下并上传到repo中，在stack中换成repo中的image</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\">```yml</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\">version: <span class=\"string\">\"3\"</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">4</span></pre></td><td class=\"code\"><pre><span class=\"line\">services:</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">5</span></pre></td><td class=\"code\"><pre><span class=\"line\">  redis:</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">6</span></pre></td><td class=\"code\"><pre><span class=\"line\">    image: redis:alpine</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">7</span></pre></td><td class=\"code\"><pre><span class=\"line\">    ports:</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">8</span></pre></td><td class=\"code\"><pre><span class=\"line\">      - <span class=\"string\">\"6379\"</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">9</span></pre></td><td class=\"code\"><pre><span class=\"line\">    networks:</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">10</span></pre></td><td class=\"code\"><pre><span class=\"line\">      - frontend</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">11</span></pre></td><td class=\"code\"><pre><span class=\"line\">    deploy:</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">12</span></pre></td><td class=\"code\"><pre><span class=\"line\">      replicas: <span class=\"number\">2</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">13</span></pre></td><td class=\"code\"><pre><span class=\"line\">      update_config:</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">14</span></pre></td><td class=\"code\"><pre><span class=\"line\">        parallelism: <span class=\"number\">2</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">15</span></pre></td><td class=\"code\"><pre><span class=\"line\">        delay: <span class=\"number\">10</span>s</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">16</span></pre></td><td class=\"code\"><pre><span class=\"line\">      restart_policy:</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">17</span></pre></td><td class=\"code\"><pre><span class=\"line\">        condition: on-failure</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">18</span></pre></td><td class=\"code\"><pre><span class=\"line\">  db:</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">19</span></pre></td><td class=\"code\"><pre><span class=\"line\">    image: postgres:<span class=\"number\">9.4</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">20</span></pre></td><td class=\"code\"><pre><span class=\"line\">    volumes:</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">21</span></pre></td><td class=\"code\"><pre><span class=\"line\">      - db-data:/var/lib/postgresql/data</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">22</span></pre></td><td class=\"code\"><pre><span class=\"line\">    networks:</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">23</span></pre></td><td class=\"code\"><pre><span class=\"line\">      - backend</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">24</span></pre></td><td class=\"code\"><pre><span class=\"line\">    deploy:</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">25</span></pre></td><td class=\"code\"><pre><span class=\"line\">      placement:</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">26</span></pre></td><td class=\"code\"><pre><span class=\"line\">        constraints: [node.role == manager]</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">27</span></pre></td><td class=\"code\"><pre><span class=\"line\">  vote:</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">28</span></pre></td><td class=\"code\"><pre><span class=\"line\">    image: dockersamples/examplevotingapp_vote:before</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">29</span></pre></td><td class=\"code\"><pre><span class=\"line\">    ports:</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">30</span></pre></td><td class=\"code\"><pre><span class=\"line\">      - <span class=\"number\">5000</span>:<span class=\"number\">80</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">31</span></pre></td><td class=\"code\"><pre><span class=\"line\">    networks:</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">32</span></pre></td><td class=\"code\"><pre><span class=\"line\">      - frontend</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">33</span></pre></td><td class=\"code\"><pre><span class=\"line\">    depends_on:</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">34</span></pre></td><td class=\"code\"><pre><span class=\"line\">      - redis</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">35</span></pre></td><td class=\"code\"><pre><span class=\"line\">    deploy:</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">36</span></pre></td><td class=\"code\"><pre><span class=\"line\">      replicas: <span class=\"number\">2</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">37</span></pre></td><td class=\"code\"><pre><span class=\"line\">      update_config:</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">38</span></pre></td><td class=\"code\"><pre><span class=\"line\">        parallelism: <span class=\"number\">2</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">39</span></pre></td><td class=\"code\"><pre><span class=\"line\">      restart_policy:</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">40</span></pre></td><td class=\"code\"><pre><span class=\"line\">        condition: on-failure</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">41</span></pre></td><td class=\"code\"><pre><span class=\"line\">  result:</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">42</span></pre></td><td class=\"code\"><pre><span class=\"line\">    image: dockersamples/examplevotingapp_result:before</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">43</span></pre></td><td class=\"code\"><pre><span class=\"line\">    ports:</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">44</span></pre></td><td class=\"code\"><pre><span class=\"line\">      - <span class=\"number\">5001</span>:<span class=\"number\">80</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">45</span></pre></td><td class=\"code\"><pre><span class=\"line\">    networks:</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">46</span></pre></td><td class=\"code\"><pre><span class=\"line\">      - backend</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">47</span></pre></td><td class=\"code\"><pre><span class=\"line\">    depends_on:</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">48</span></pre></td><td class=\"code\"><pre><span class=\"line\">      - db</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">49</span></pre></td><td class=\"code\"><pre><span class=\"line\">    deploy:</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">50</span></pre></td><td class=\"code\"><pre><span class=\"line\">      replicas: <span class=\"number\">1</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">51</span></pre></td><td class=\"code\"><pre><span class=\"line\">      update_config:</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">52</span></pre></td><td class=\"code\"><pre><span class=\"line\">        parallelism: <span class=\"number\">2</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">53</span></pre></td><td class=\"code\"><pre><span class=\"line\">        delay: <span class=\"number\">10</span>s</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">54</span></pre></td><td class=\"code\"><pre><span class=\"line\">      restart_policy:</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">55</span></pre></td><td class=\"code\"><pre><span class=\"line\">        condition: on-failure</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">56</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">57</span></pre></td><td class=\"code\"><pre><span class=\"line\">  worker:</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">58</span></pre></td><td class=\"code\"><pre><span class=\"line\">    image: dockersamples/examplevotingapp_worker</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">59</span></pre></td><td class=\"code\"><pre><span class=\"line\">    networks:</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">60</span></pre></td><td class=\"code\"><pre><span class=\"line\">      - frontend</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">61</span></pre></td><td class=\"code\"><pre><span class=\"line\">      - backend</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">62</span></pre></td><td class=\"code\"><pre><span class=\"line\">    deploy:</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">63</span></pre></td><td class=\"code\"><pre><span class=\"line\">      mode: replicated</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">64</span></pre></td><td class=\"code\"><pre><span class=\"line\">      replicas: <span class=\"number\">5</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">65</span></pre></td><td class=\"code\"><pre><span class=\"line\">      labels: [APP=VOTING]</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">66</span></pre></td><td class=\"code\"><pre><span class=\"line\">      restart_policy:</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">67</span></pre></td><td class=\"code\"><pre><span class=\"line\">        condition: on-failure</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">68</span></pre></td><td class=\"code\"><pre><span class=\"line\">        delay: <span class=\"number\">10</span>s</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">69</span></pre></td><td class=\"code\"><pre><span class=\"line\">        max_attempts: <span class=\"number\">3</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">70</span></pre></td><td class=\"code\"><pre><span class=\"line\">        window: <span class=\"number\">120</span>s</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">71</span></pre></td><td class=\"code\"><pre><span class=\"line\">      placement:</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">72</span></pre></td><td class=\"code\"><pre><span class=\"line\">        constraints: [node.role == manager]</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">73</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">74</span></pre></td><td class=\"code\"><pre><span class=\"line\">  visualizer:</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">75</span></pre></td><td class=\"code\"><pre><span class=\"line\">    image: dockersamples/visualizer</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">76</span></pre></td><td class=\"code\"><pre><span class=\"line\">    ports:</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">77</span></pre></td><td class=\"code\"><pre><span class=\"line\">      - <span class=\"string\">\"8080:8080\"</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">78</span></pre></td><td class=\"code\"><pre><span class=\"line\">    stop_grace_period: <span class=\"number\">1</span>m30s</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">79</span></pre></td><td class=\"code\"><pre><span class=\"line\">    volumes:</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">80</span></pre></td><td class=\"code\"><pre><span class=\"line\">      - <span class=\"string\">\"/var/run/docker.sock:/var/run/docker.sock\"</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">81</span></pre></td><td class=\"code\"><pre><span class=\"line\">    deploy:</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">82</span></pre></td><td class=\"code\"><pre><span class=\"line\">      placement:</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">83</span></pre></td><td class=\"code\"><pre><span class=\"line\">        constraints: [node.role == manager]</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">84</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">85</span></pre></td><td class=\"code\"><pre><span class=\"line\">networks:</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">86</span></pre></td><td class=\"code\"><pre><span class=\"line\">  frontend:</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">87</span></pre></td><td class=\"code\"><pre><span class=\"line\">  backend:</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">88</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">89</span></pre></td><td class=\"code\"><pre><span class=\"line\">volumes:</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">90</span></pre></td><td class=\"code\"><pre><span class=\"line\">  db-data:</span></pre></td></tr></table></figure>\n<p>部署上面的代码：</p>\n<figure class=\"highlight docker\"><figcaption><span>stack deploy -c docker-stack.yml voteapp```</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\">```docker stack services STACK_NAME```可以查看此stack部署的services情况</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\">```docker stack ps STACK_NAME```可以查看这个stack怎样运行的</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">4</span></pre></td><td class=\"code\"><pre><span class=\"line\">基本和compose差不多，但是version要用<span class=\"number\">3</span>或以上.</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">5</span></pre></td><td class=\"code\"><pre><span class=\"line\">deploy可以设置部署多个实例，update时的设置之类的。</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">6</span></pre></td><td class=\"code\"><pre><span class=\"line\">deploy.placement.constraints可以说设置只部署在manager node上</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">7</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">8</span></pre></td><td class=\"code\"><pre><span class=\"line\">如果要update整个stack，最好先改stack file然后再运行```docker -c YML_FILE stack deploy```更新stack</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">9</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">10</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">11</span></pre></td><td class=\"code\"><pre><span class=\"line\">Swarm Secrect</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">12</span></pre></td><td class=\"code\"><pre><span class=\"line\">-----------</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">13</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#在service中</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">14</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">15</span></pre></td><td class=\"code\"><pre><span class=\"line\">Secrect会被加密储存在docker自己的Raft log中，并会分发给所有manager，当manager管理的worker需要secret时分发下去。</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">16</span></pre></td><td class=\"code\"><pre><span class=\"line\">所有的secrect都在/<span class=\"keyword\">run</span><span class=\"bash\">/secrets/的目录中, 作为一个file。</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">17</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">18</span></pre></td><td class=\"code\"><pre><span class=\"line\">如果在`docker service`中使用环境变量</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">19</span></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; docker service create -e ENV_VAR_FILE=/<span class=\"keyword\">run</span><span class=\"bash\">/secrets/SECRET_NAME SERVICE_NAME</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">20</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">21</span></pre></td><td class=\"code\"><pre><span class=\"line\">两种secret注入swarm的方法：</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">22</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">1</span>）文件注入:</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">23</span></pre></td><td class=\"code\"><pre><span class=\"line\">在当前目录创建包含secret的文件，运行</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">24</span></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; docker secret create SECRET_NAME SECRET_FILE.txt</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">25</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">26</span></pre></td><td class=\"code\"><pre><span class=\"line\">坏处：密码文件在服务器中，非常危险</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">27</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">28</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">2</span>）command line注入</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">29</span></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; echo <span class=\"string\">\"SECRET_NAME\"</span> | docker secret create SECRET_NAME -</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">30</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">31</span></pre></td><td class=\"code\"><pre><span class=\"line\">坏处：如果有人进去root，可以通过bash history查找到明文密码</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">32</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">33</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">34</span></pre></td><td class=\"code\"><pre><span class=\"line\">查看密码</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">35</span></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; docker secret inspect SECRET_NAME</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">36</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">37</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#在stack中</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">38</span></pre></td><td class=\"code\"><pre><span class=\"line\">stack yml file的version需要大于等于<span class=\"number\">3.1</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">39</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">40</span></pre></td><td class=\"code\"><pre><span class=\"line\">```yml</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">41</span></pre></td><td class=\"code\"><pre><span class=\"line\">version: <span class=\"string\">\"3.1\"</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">42</span></pre></td><td class=\"code\"><pre><span class=\"line\">  services:</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">43</span></pre></td><td class=\"code\"><pre><span class=\"line\">    psql:</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">44</span></pre></td><td class=\"code\"><pre><span class=\"line\">      image: postgres</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">45</span></pre></td><td class=\"code\"><pre><span class=\"line\">      secrets:</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">46</span></pre></td><td class=\"code\"><pre><span class=\"line\">        - psql_user</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">47</span></pre></td><td class=\"code\"><pre><span class=\"line\">        - psql_password</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">48</span></pre></td><td class=\"code\"><pre><span class=\"line\">      enviroment:</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">49</span></pre></td><td class=\"code\"><pre><span class=\"line\">        POSTGRES_PASSWORD_FILE: /<span class=\"keyword\">run</span><span class=\"bash\">/secrets/psql_password</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">50</span></pre></td><td class=\"code\"><pre><span class=\"line\">        POSTGRES_USER_FILE: /<span class=\"keyword\">run</span><span class=\"bash\">/secrets/psql_user</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">51</span></pre></td><td class=\"code\"><pre><span class=\"line\">secrets:</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">52</span></pre></td><td class=\"code\"><pre><span class=\"line\">  psql_user:</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">53</span></pre></td><td class=\"code\"><pre><span class=\"line\">    file: ./psql_user.txt</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">54</span></pre></td><td class=\"code\"><pre><span class=\"line\">  psql_password:</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">55</span></pre></td><td class=\"code\"><pre><span class=\"line\">    file: ./psql_password.txt</span></pre></td></tr></table></figure>\n<p>stack中secret同样有两种注入方法，一种是用file，第二中是先用command line提前注入<br />\n如果用CLI注入，需要用<code>external:</code>标签标明secrets来源</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">secrets:</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"attr\">psql_user:</span> </span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"attr\">external:</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">4</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"attr\">psql_password:</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">5</span></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"attr\">external:</span></span></pre></td></tr></table></figure>\n<p>secrets中还可以自定义permission，可以指定某系统用户才能使用secrets</p>\n<p><strong>当deploy完成之后，要及时清理bash history或secret file</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\">TCP port 2376 for secure Docker client communication. This port is required for Docker Machine to work. Docker Machine is used to orchestrate Docker hosts.</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\">TCP port 2377. This port is used for communication between the nodes of a Docker Swarm or cluster. It only needs to be opened on manager nodes.</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\">TCP and UDP port 7946 for communication among nodes (container network discovery).</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">4</span></pre></td><td class=\"code\"><pre><span class=\"line\">UDP port 4789 for overlay network traffic (container ingress networking).</span></pre></td></tr></table></figure>\n<p>CentOS7中防火墙默认关闭</p>\n<p>查看防火墙状态</p>\n<blockquote>\n<p>systemctl status firewalld</p>\n</blockquote>\n<p>开启防火墙</p>\n<blockquote>\n<p>systemctl start firewalld</p>\n</blockquote>\n<p>修改为默认开机启动</p>\n<blockquote>\n<p>systemctl enable firewalld</p>\n</blockquote>\n<p>【如果】在Manager的node上打开下列接口</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\">firewall-cmd --add-port&#x3D;2376&#x2F;tcp --permanent</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\">firewall-cmd --add-port&#x3D;2377&#x2F;tcp --permanent</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\">firewall-cmd --add-port&#x3D;7946&#x2F;tcp --permanent</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">4</span></pre></td><td class=\"code\"><pre><span class=\"line\">firewall-cmd --add-port&#x3D;7946&#x2F;udp --permanent</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">5</span></pre></td><td class=\"code\"><pre><span class=\"line\">firewall-cmd --add-port&#x3D;4789&#x2F;udp --permanent</span></pre></td></tr></table></figure>\n<p>【如果】<br />\n在worker的node上打开下列接口</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\">firewall-cmd --add-port&#x3D;2376&#x2F;tcp --permanent</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\">firewall-cmd --add-port&#x3D;7946&#x2F;tcp --permanent</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\">firewall-cmd --add-port&#x3D;7946&#x2F;udp --permanent</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">4</span></pre></td><td class=\"code\"><pre><span class=\"line\">firewall-cmd --add-port&#x3D;4789&#x2F;udp --permanent</span></pre></td></tr></table></figure>\n<p>重新加载防火墙</p>\n<blockquote>\n<p>firewall-cmd --reload</p>\n</blockquote>\n<p>重启Docker</p>\n<blockquote>\n<p>systemctl restart docker</p>\n</blockquote>\n<h2 id=\"docker-1809-版本更新\"><a class=\"markdownIt-Anchor\" href=\"#docker-1809-版本更新\"></a> Docker 18.09 版本更新</h2>\n<p>18.09以上的版本提供了ssh到docker的功能，具体方法是 <code>docker -H ssh://user@server</code> 然后再输入你想操作的docker指令。</p>\n<p>比如运行:<br />\n<code>docker -H ssh://user@server run -it --rm busybox</code></p>\n<p>这样我们就可以直接从本地SSH到服务器的docker，并把Secret传进去从而实现目前最安全的secret部署方法。</p>\n<p>首先授权给当前用户docker的使用权，我们就不需要每次都敲sudo了</p>\n<blockquote>\n<p>sudo usermod -aG docker USER_NAME</p>\n</blockquote>\n<p>然后打开terminal通过本地传secrete:</p>\n<blockquote>\n<p>echo “SECRET_NAME” | docker -H ssh://USER_NAME@YOUR_HOST secret create secret_name -<br />\n如果用file的当做secret的话<br />\ndocker -H ssh://USER_NAME@YOUR_HOST secret create secret_name.txt</p>\n</blockquote>\n<p>成功之后会打印出secret的ID<code>xtgwhpfr6cyvqp3gnmeevorws</code>，也可以ssh进服务器使用<code>docker secret ls</code>查看是否存在刚才注入的secret</p>\n<p>这样就在服务器中完全不留痕迹的注入了secret。</p>"},{"layout":"post","title":"Docker容器入门及实践","description":"根据Udemy上Docker Mastery by Bret Fisher的内容记录的一些笔记","keywords":"docker, swarm","date":"2018-10-03T16:00:00.000Z","hidden":true,"_content":"Docker学习笔记\n\n<!-- more -->\n\n#### 2019年3月更新\n* 更新docker swarm及secret\n\n为什么要用Docker\n-------------------\nDocker是一个轻量级的虚拟系统，我们叫它容器。因不同系统和版本的不同，部署服务器的时候总是会出现不同的错误，让开发效率大大降低。docker的出现让服务器开发不再受限于系统版本，让一套代码永远可以在不同服务器上一致运行。同时docker也是微服务架构中不可缺少的部分，让不同微服务之间协调效率高效。\n\n第一个Docker Container\n--------------------\n\n## Docker安装\nLinux可以通过[get.docker.com](https://get.docker.com/)快捷安装。\n复制文档前面注释中的代码脚步即可\n\n安装完成后，这是几个常用的CLI(command line interface)命令\n```\nsystemctl start docker   // 启动docker服务\nsystemctl stop docker    // 停止docker服务\nsystemctl restart docker // 重启docker服务\nsystemctl status docker  // 查看docker服务状态\nsystemctl enable docker  // 开机启动docker服务\nsystemctl disable docker // 取消开机启动docker服务\n```\n\n在运行`systemctl start docker`后，可以试一下`docker container run  hello-world`，之后会在命令栏中print出来行 hello-world即代表安装成功\n\n\n## 制作一个Nginx的容器\n每一个容器都相当于一个虚拟系统\n```\ndocker container run --publish 80:80 --detach --name webhost nginx\n```\n这行命令的运行流程：\n1. 从Dokcer hub下载nginx的镜像(image)\n2. 创建新的名为webhost的container\n3. `--publish 80:80`为开放容器的80接口\n4. 将来自host的80接口网络请求路由至80容器接口\n5. --detach 让这个container在后台运行\n\n容器部署成功后，运行下面的命令会显示本地活跃docker实例, 添加 -a会显示全部实例(包括已经停止的实例)\n```\ndocker container ls\n```\n停止一个容器\n```\ndocker container stop container-name\n```\n查看log\n```\ndocker container logs container-name\n```\n删除container。名称或id可以叠加用于删除多项container\n```\ndocker rm container-name\n```\n\n## Image镜像 vs Container容器\nContainer是Image的实例\n\n可以理解为Image是一个class类，container是新建的对象\n\nImage是如和新建Container的一个说明书\n\n## Cheat sheet\n向container里传递环境参数\n``` \n--env or -e \n```\n查看container里面的top process\n``` \ndocker container top container-name\n ```\n显示这个container的metadata（配置，网络等）\n\n``` \ndocker container insepct\n```\n\n显示实时信息（简单的监测）\n``` \ndocker container stats\n```\n\n进入容器交互(interactive)模式(就是进去虚拟系统)\n``` \ndocker container run -it CONTAINER_NAME bash\n```\n-t : pseudo-TTY\n\n-i : interactive\n\n\n## 创建一个ubuntu的容器\n``` \ndocker container run -it --name ubuntu ubuntu\n```\n\n如果退出后再次进入的命令会不一样:\n``` \ndocker container start -ai ubuntu\n```\n进入一个正在运行的container的shell（创建了一个多出的process）\n``` \ndocker container exec -it container-name bash\n```\n\n## Docker 网络\n-p 用来暴露你的网络接口\n\n* 每一个container接入一个私有虚拟网络“bridge”\n* 每一个虚拟网络通过NAT防火墙路由出去\n* 所有的container都可以在自己的虚拟网络内部交流（不用-p暴露给公网）\n* 最好为每一个独立App建立一个自己的虚拟网络（比如给mongo和node单独创建一个虚拟网络）\n\n```\ndocker container port container-name\n```\n\n显示路由\n\n``` \ndocker container inspect --format '\\{\\{ .NetworkSettings.IPAddress\\}\\}' container-name\n```\n\n查询container地址  --format 是filter\n\n![docker-network](../docker-note/docker-network.png) docker network\n\n``` \ndocker network ls\n```\n\n显示所有网络\nbirdge是默认网络，连接外网\nhost是绕过bridge直接连接外网（性能好，安全性低）\nnone什么都不连接\n\n``` \ndocker network inspect container-name\n```\n\n查看网络\ndocker network inspect bridge 可以查看哪些container正在连着bridge。“IPAM”是自动被赋值的IP地址。默认subnet “172.17.0.0/16”\n\n``` \ndokcer network create --drive\n```\n\n建立一个网络\n--drive 指定一个drive（bridge host none或者第三方dirve）默认bridge\n\n``` \ndocker network connet\n```\n\n连接一个网络\n一个container可以连接到两个network上\n\n``` \ndocker network disconnect\n```\n\n退出一个网络\n\n如果要让新的container连接到该网络:\n``` \ndocker container run -d --name new_nginx --network new_network_name nginx\n```\n\n## DNS\n因为container中的IP是不固定的，所以需要DNS\n两个在相同虚拟网络下的container可以默认通过名字互通\n\n``` \ndocker container exec -it con2 ping con1\n```\n\n其中con1和con2在同一网络下（需要先apt-get update && apt-get install -y inputils-ping）\n\n\n## DNS Round Robin Test\n\n1. 新建一个虚拟网络\n2. 创建两个elasticsearch:2的镜像\n\n``` \neg: docker container run --name elastic1 -d --network test --network-alias search elasticsearch:1\n```\n\n3. 使用--network-alias为两个container标记alias\n4. 运行docker container run --rm --net ass centos curl -s search:9200 附加为--net查看同样DNS名称下的两个网络\n5. centos curl -s search:9200 --net\n\n## Docker image\n``` \ndocker pull nginx:latest\n```\n\n生产环境下，最好为Image标注一个固定的版本号，不要用latest\n\n\n``` \ndocker history nginx:latest\n```\n\n显示全部nginx的历史layer，每一个layer都代表了一次更新，每一层layer共同组成了一个image\n共同使用的layer不会被下载，每一个layer有唯一的SHA区分\n\n``` \ndocker inspect nginx:latest\n```\n\n显示这个image的metadata比如“ContainerConfig”: \"ExpposedPorts\"说明哪个接口会被期望被开通，\"Cmd\"显示哪些command在运行时会被运行...\n\n``` \ndocker image tag nginx dockerHubName/nginx\n```\n\n为image加一个tag,tag不会改变Image ID，如果后面不添加tag（详情下一行）,默认latest\n需要加自己dockerhub的tag才可以push上去\n\n``` \ndocker image tag nginx dockerHubName/ngnix dockerHubName/nginx:testing\n```\n\n为这个Image添加一个testing的tag\n\n如果想让repo是私人的，现在docker hub上创建一个private repo再push\n\n## Dockerfile\n> docker build -f some-dockerfile\n\n> FROM: required\n\n选择一个minimal distribution. (debian, centos), 很多工具都不具备\n\n> WORKDIR /etc/nginx\n\n相当于cd\n\n> COPY\n\n复制source code从local\n\n> EVN: \n\neg. NGINX_VERSION 1.11.10-jessie\n导入环境变量\n\n> RUN:\n\n运行Shell command, 两个command之间可以用&&连接，表示在同一layer\nRUN可以有多个\n\n**Docker有自己的log file(stdout, stderr)，所以用Nginx自带的log并不是最理性的解决方案\n```\nRUN ln -sf /dev/stdout /var/log/nginx/access.log && ln -sf /dev/stderr /var/log/nginx/error.log\n```\n\n将nginx的log导入进docker\n\n> EXPOSE:\n\n允许暴露的接口，比如web需要暴露 **EXPOSE: 80 443**\n但是这只是允许权限,还是需要用**-p**在host中暴露这些接口\n\n> CMD: []  required 但是可以inherit from FROM image\n\n当container运行的时候运行的命令，Dockerfile中只能存在一个CMD，如果存在多个，最后一个优先级最高\n\n## Build Dockerfile\n``` \ndokcer image build -t customnginx .\n```\n\n第一次build时间较长，但是所有步骤会被存cache。\n修改一行Dockerfile中的文件后，这一行之后的所有步骤都会重新build，所以文件order很重要，把多变的代码放在后面。\n\n## 小节\n创建Dockerfile，如果能用offical repo的base image就用official的，如果不能满足要求就去Docker hub看看有没有可靠高的image。都不能满足要求可以自己用minimal distribution创建自己的Dockerfile。\n``` \ndocker image build -t tag-name .\n```\n\nbuild已创建的Dockerfile并标注tag\n```\ndocker container run -p 80:80 tag-name\n```\n\n运行刚刚创建的image\n``` \ndocker image tag tag-name:additional-tag dockerHubName/tag-name:additional-tag\ndocker push dockerHubName/tag-name:additional-tag\n```\n\n## 数据保存\ncontainer是不可更改，稍纵即逝的，不应该用于保存数据。\nDocker有两种解决方式：Volumes和Bind Mounts\nVolumes是在container外部规定一个区域用来存储数据\nBind Mounts用来加载外部数据。\n\n### Volumes\n在Dockerfile中添加Volume规则\n> VOLUME /path/to/db\n删除container后不会影响Volume，需要多一个步骤将其删除。\n\n```\ndocker volume ls\n```\n可以用来查看当前机器创建了多少Volumes\n```\ndocker volume inspect XXX\n```\n如果在linux机器上，通过Mountpoint地址可以看到数据。Mac和Windows看不到(在linux VM里)\n\n如果需要创建Volume，记得在docker container run的时候添加 -v name:/path/to/db 来定义Volume名称。否则很难区分Volume对应的container\n\n> docker volume create \n\n\n## Bind Mounting\n将host的文件或目录映射到container的文件或目录。\n无法在Dockerfile里写，只能通过```container run -v /Users/username/stuff:/path/container```实现。\n```\ndocker container run -d --name nginx -p 80:80 -v $(pwd):/usr/share/nginx/html nginx\n```\n将当前目录$(pwd)映射到/usr/share/nginx/html里面，当当前目录变的时候，container里面的文件也会变。\n\n\nDocker Compose\n-----------------\n* 保存docker run settings\n* 使用YAML\n* CLI tool\n\n```yml\nversion: '3.1'\n\nservice:\n\tservicename: #DNS name inside network\n\t\timage:\n\t\tcommand: #replace the default CMD specified by the image\n\t\tenvironment:\n\t\tvolumes:\n\t\tports:\n\t\t  - 80:80\n\tservicename2:\n\nvolumes:\n\nnetworks:\n```\n\n\n后台运行当前docker compose\n\n``` docker-compose up -d ```\n\n卸载docker compose\n> docker-compose down\n\n查看container中的services\n>docker compose top\n\n```yml\nservices:\n  proxy:\n    build:\n      context: .\n      dockerfile: nginx.Dockerfile\n  image: nginx-custom  \n  ports:\n      - '80:80'\n  web:\n    image: httpd\n    volumes:\n      - ./html:/usr/local/apache2/htdocs/\n```\ndockerfile指向当前目录自定义的dockerfile，这里是一个nginx的自定义image  \n第二个service是server，把当前html目录绑定到container里面，所以可以在runtime情况下改变网页文件  \n一般情况下会有第三个service作为database  \n\n\n\nDocker Swarm\n---------------\ndocker swarm 是docker提供的非常易学高效的分布式部署方式\n\n## Swarm集群初始化\n```docker swarm init [OPTIONS]```\n\noptions:\n⋅⋅⋅*--advertise-addr: 多网卡的情况下，指定需要使用的ip\n⋅⋅⋅*--listen-addr: 指定监听的 ip 与端口\n<!-- ⋅⋅⋅*--availability: 节点的有效性(\"active\"|\"pause\"|\"drain\") -->\n\n\n```docker service``` 相当于docker container run。区别在于这是给orchestration命令，让它放在queue里自动部署\n```docker service update```可以更新正在运行的services的一些参数，用于rolling update\n\n\n\n## overlay network\n同一swarm下容器之间的访问。\n\n```docker network create --driver overlay NETWORK_NAME```\n\n然后用docker service部署在这个NETWORK_NAME网络中即可\n\n## Routing Mesh\nLoad balances Swarm services across their tasks\n所以在公开接口上的请求都会被自动load balance到不同node上.\n这个load balancer是在OSI Layer 3(TCP)上的，不是在Layer4(DNS)，并且是stateless\n意思是只能在访问IP和port的时候才可以导流，如果一台服务器运行多个server并运行在一个swarm中，则需要在DNS的Layer上创建一个Nginx(stateful load balancers)\n\n在overlay network上，cluster中访问任意一个node的IP都可以得到相同的结果\n\n\nDocker Stack\n-------------\ndocker compose file for swarm\n\n```docker stack deploy```自动部署services，但deploy不支持build。需要把自己的image build一下并上传到repo中，在stack中换成repo中的image\n\n```yml\nversion: \"3\"\nservices:\n  redis:\n    image: redis:alpine\n    ports:\n      - \"6379\"\n    networks:\n      - frontend\n    deploy:\n      replicas: 2\n      update_config:\n        parallelism: 2\n        delay: 10s\n      restart_policy:\n        condition: on-failure\n  db:\n    image: postgres:9.4\n    volumes:\n      - db-data:/var/lib/postgresql/data\n    networks:\n      - backend\n    deploy:\n      placement:\n        constraints: [node.role == manager]\n  vote:\n    image: dockersamples/examplevotingapp_vote:before\n    ports:\n      - 5000:80\n    networks:\n      - frontend\n    depends_on:\n      - redis\n    deploy:\n      replicas: 2\n      update_config:\n        parallelism: 2\n      restart_policy:\n        condition: on-failure\n  result:\n    image: dockersamples/examplevotingapp_result:before\n    ports:\n      - 5001:80\n    networks:\n      - backend\n    depends_on:\n      - db\n    deploy:\n      replicas: 1\n      update_config:\n        parallelism: 2\n        delay: 10s\n      restart_policy:\n        condition: on-failure\n\n  worker:\n    image: dockersamples/examplevotingapp_worker\n    networks:\n      - frontend\n      - backend\n    deploy:\n      mode: replicated\n      replicas: 5\n      labels: [APP=VOTING]\n      restart_policy:\n        condition: on-failure\n        delay: 10s\n        max_attempts: 3\n        window: 120s\n      placement:\n        constraints: [node.role == manager]\n\n  visualizer:\n    image: dockersamples/visualizer\n    ports:\n      - \"8080:8080\"\n    stop_grace_period: 1m30s\n    volumes:\n      - \"/var/run/docker.sock:/var/run/docker.sock\"\n    deploy:\n      placement:\n        constraints: [node.role == manager]\n\nnetworks:\n  frontend:\n  backend:\n\nvolumes:\n  db-data:\n```\n\n部署上面的代码：\n```docker stack deploy -c docker-stack.yml voteapp```\n\n```docker stack services STACK_NAME```可以查看此stack部署的services情况\n```docker stack ps STACK_NAME```可以查看这个stack怎样运行的\n基本和compose差不多，但是version要用3或以上.\ndeploy可以设置部署多个实例，update时的设置之类的。\ndeploy.placement.constraints可以说设置只部署在manager node上\n\n如果要update整个stack，最好先改stack file然后再运行```docker -c YML_FILE stack deploy```更新stack\n\n\nSwarm Secrect\n-----------\n#在service中\n\nSecrect会被加密储存在docker自己的Raft log中，并会分发给所有manager，当manager管理的worker需要secret时分发下去。\n所有的secrect都在/run/secrets/的目录中, 作为一个file。\n\n如果在`docker service`中使用环境变量\n> docker service create -e ENV_VAR_FILE=/run/secrets/SECRET_NAME SERVICE_NAME\n\n两种secret注入swarm的方法：\n1）文件注入:\n在当前目录创建包含secret的文件，运行\n> docker secret create SECRET_NAME SECRET_FILE.txt\n\n坏处：密码文件在服务器中，非常危险\n\n2）command line注入\n> echo \"SECRET_NAME\" | docker secret create SECRET_NAME -\n\n坏处：如果有人进去root，可以通过bash history查找到明文密码\n\n\n查看密码\n> docker secret inspect SECRET_NAME\n\n#在stack中\nstack yml file的version需要大于等于3.1\n\n```yml\nversion: \"3.1\"\n  services:\n    psql:\n      image: postgres\n      secrets:\n        - psql_user\n        - psql_password\n      enviroment:\n        POSTGRES_PASSWORD_FILE: /run/secrets/psql_password\n        POSTGRES_USER_FILE: /run/secrets/psql_user\nsecrets:\n  psql_user:\n    file: ./psql_user.txt\n  psql_password:\n    file: ./psql_password.txt\n```\nstack中secret同样有两种注入方法，一种是用file，第二中是先用command line提前注入\n如果用CLI注入，需要用`external:`标签标明secrets来源\n```yml\nsecrets:\n  psql_user: \n    external:\n  psql_password:\n    external:\n```\n\nsecrets中还可以自定义permission，可以指定某系统用户才能使用secrets\n\n**当deploy完成之后，要及时清理bash history或secret file**\n\n\n```\nTCP port 2376 for secure Docker client communication. This port is required for Docker Machine to work. Docker Machine is used to orchestrate Docker hosts.\nTCP port 2377. This port is used for communication between the nodes of a Docker Swarm or cluster. It only needs to be opened on manager nodes.\nTCP and UDP port 7946 for communication among nodes (container network discovery).\nUDP port 4789 for overlay network traffic (container ingress networking).\n```\n\nCentOS7中防火墙默认关闭\n\n查看防火墙状态\n> systemctl status firewalld\n\n开启防火墙\n> systemctl start firewalld\n\n修改为默认开机启动\n> systemctl enable firewalld\n\n【如果】在Manager的node上打开下列接口\n```\nfirewall-cmd --add-port=2376/tcp --permanent\nfirewall-cmd --add-port=2377/tcp --permanent\nfirewall-cmd --add-port=7946/tcp --permanent\nfirewall-cmd --add-port=7946/udp --permanent\nfirewall-cmd --add-port=4789/udp --permanent\n```\n\n【如果】\n在worker的node上打开下列接口\n```\nfirewall-cmd --add-port=2376/tcp --permanent\nfirewall-cmd --add-port=7946/tcp --permanent\nfirewall-cmd --add-port=7946/udp --permanent\nfirewall-cmd --add-port=4789/udp --permanent\n```\n\n重新加载防火墙\n> firewall-cmd --reload\n\n重启Docker\n> systemctl restart docker\n\n\n\n## Docker 18.09 版本更新\n\n18.09以上的版本提供了ssh到docker的功能，具体方法是 `docker -H ssh://user@server` 然后再输入你想操作的docker指令。\n\n比如运行: \n`docker -H ssh://user@server run -it --rm busybox`\n\n这样我们就可以直接从本地SSH到服务器的docker，并把Secret传进去从而实现目前最安全的secret部署方法。\n\n首先授权给当前用户docker的使用权，我们就不需要每次都敲sudo了\n> sudo usermod -aG docker USER_NAME\n\n然后打开terminal通过本地传secrete:\n> echo \"SECRET_NAME\" | docker -H ssh://USER_NAME@YOUR_HOST secret create secret_name -\n如果用file的当做secret的话\n> docker -H ssh://USER_NAME@YOUR_HOST secret create secret_name.txt\n\n成功之后会打印出secret的ID`xtgwhpfr6cyvqp3gnmeevorws`，也可以ssh进服务器使用`docker secret ls`查看是否存在刚才注入的secret\n\n这样就在服务器中完全不留痕迹的注入了secret。","source":"_posts/docker-note.md","raw":"---\nlayout: post\ntitle: Docker容器入门及实践\ncategories: [docker, docker swarm]\ndescription: 根据Udemy上Docker Mastery by Bret Fisher的内容记录的一些笔记\nkeywords: docker, swarm\ndate: 2018-10-04 00:00:00\nhidden: true\n---\nDocker学习笔记\n\n<!-- more -->\n\n#### 2019年3月更新\n* 更新docker swarm及secret\n\n为什么要用Docker\n-------------------\nDocker是一个轻量级的虚拟系统，我们叫它容器。因不同系统和版本的不同，部署服务器的时候总是会出现不同的错误，让开发效率大大降低。docker的出现让服务器开发不再受限于系统版本，让一套代码永远可以在不同服务器上一致运行。同时docker也是微服务架构中不可缺少的部分，让不同微服务之间协调效率高效。\n\n第一个Docker Container\n--------------------\n\n## Docker安装\nLinux可以通过[get.docker.com](https://get.docker.com/)快捷安装。\n复制文档前面注释中的代码脚步即可\n\n安装完成后，这是几个常用的CLI(command line interface)命令\n```\nsystemctl start docker   // 启动docker服务\nsystemctl stop docker    // 停止docker服务\nsystemctl restart docker // 重启docker服务\nsystemctl status docker  // 查看docker服务状态\nsystemctl enable docker  // 开机启动docker服务\nsystemctl disable docker // 取消开机启动docker服务\n```\n\n在运行`systemctl start docker`后，可以试一下`docker container run  hello-world`，之后会在命令栏中print出来行 hello-world即代表安装成功\n\n\n## 制作一个Nginx的容器\n每一个容器都相当于一个虚拟系统\n```\ndocker container run --publish 80:80 --detach --name webhost nginx\n```\n这行命令的运行流程：\n1. 从Dokcer hub下载nginx的镜像(image)\n2. 创建新的名为webhost的container\n3. `--publish 80:80`为开放容器的80接口\n4. 将来自host的80接口网络请求路由至80容器接口\n5. --detach 让这个container在后台运行\n\n容器部署成功后，运行下面的命令会显示本地活跃docker实例, 添加 -a会显示全部实例(包括已经停止的实例)\n```\ndocker container ls\n```\n停止一个容器\n```\ndocker container stop container-name\n```\n查看log\n```\ndocker container logs container-name\n```\n删除container。名称或id可以叠加用于删除多项container\n```\ndocker rm container-name\n```\n\n## Image镜像 vs Container容器\nContainer是Image的实例\n\n可以理解为Image是一个class类，container是新建的对象\n\nImage是如和新建Container的一个说明书\n\n## Cheat sheet\n向container里传递环境参数\n``` \n--env or -e \n```\n查看container里面的top process\n``` \ndocker container top container-name\n ```\n显示这个container的metadata（配置，网络等）\n\n``` \ndocker container insepct\n```\n\n显示实时信息（简单的监测）\n``` \ndocker container stats\n```\n\n进入容器交互(interactive)模式(就是进去虚拟系统)\n``` \ndocker container run -it CONTAINER_NAME bash\n```\n-t : pseudo-TTY\n\n-i : interactive\n\n\n## 创建一个ubuntu的容器\n``` \ndocker container run -it --name ubuntu ubuntu\n```\n\n如果退出后再次进入的命令会不一样:\n``` \ndocker container start -ai ubuntu\n```\n进入一个正在运行的container的shell（创建了一个多出的process）\n``` \ndocker container exec -it container-name bash\n```\n\n## Docker 网络\n-p 用来暴露你的网络接口\n\n* 每一个container接入一个私有虚拟网络“bridge”\n* 每一个虚拟网络通过NAT防火墙路由出去\n* 所有的container都可以在自己的虚拟网络内部交流（不用-p暴露给公网）\n* 最好为每一个独立App建立一个自己的虚拟网络（比如给mongo和node单独创建一个虚拟网络）\n\n```\ndocker container port container-name\n```\n\n显示路由\n\n``` \ndocker container inspect --format '\\{\\{ .NetworkSettings.IPAddress\\}\\}' container-name\n```\n\n查询container地址  --format 是filter\n\n![docker-network](../docker-note/docker-network.png) docker network\n\n``` \ndocker network ls\n```\n\n显示所有网络\nbirdge是默认网络，连接外网\nhost是绕过bridge直接连接外网（性能好，安全性低）\nnone什么都不连接\n\n``` \ndocker network inspect container-name\n```\n\n查看网络\ndocker network inspect bridge 可以查看哪些container正在连着bridge。“IPAM”是自动被赋值的IP地址。默认subnet “172.17.0.0/16”\n\n``` \ndokcer network create --drive\n```\n\n建立一个网络\n--drive 指定一个drive（bridge host none或者第三方dirve）默认bridge\n\n``` \ndocker network connet\n```\n\n连接一个网络\n一个container可以连接到两个network上\n\n``` \ndocker network disconnect\n```\n\n退出一个网络\n\n如果要让新的container连接到该网络:\n``` \ndocker container run -d --name new_nginx --network new_network_name nginx\n```\n\n## DNS\n因为container中的IP是不固定的，所以需要DNS\n两个在相同虚拟网络下的container可以默认通过名字互通\n\n``` \ndocker container exec -it con2 ping con1\n```\n\n其中con1和con2在同一网络下（需要先apt-get update && apt-get install -y inputils-ping）\n\n\n## DNS Round Robin Test\n\n1. 新建一个虚拟网络\n2. 创建两个elasticsearch:2的镜像\n\n``` \neg: docker container run --name elastic1 -d --network test --network-alias search elasticsearch:1\n```\n\n3. 使用--network-alias为两个container标记alias\n4. 运行docker container run --rm --net ass centos curl -s search:9200 附加为--net查看同样DNS名称下的两个网络\n5. centos curl -s search:9200 --net\n\n## Docker image\n``` \ndocker pull nginx:latest\n```\n\n生产环境下，最好为Image标注一个固定的版本号，不要用latest\n\n\n``` \ndocker history nginx:latest\n```\n\n显示全部nginx的历史layer，每一个layer都代表了一次更新，每一层layer共同组成了一个image\n共同使用的layer不会被下载，每一个layer有唯一的SHA区分\n\n``` \ndocker inspect nginx:latest\n```\n\n显示这个image的metadata比如“ContainerConfig”: \"ExpposedPorts\"说明哪个接口会被期望被开通，\"Cmd\"显示哪些command在运行时会被运行...\n\n``` \ndocker image tag nginx dockerHubName/nginx\n```\n\n为image加一个tag,tag不会改变Image ID，如果后面不添加tag（详情下一行）,默认latest\n需要加自己dockerhub的tag才可以push上去\n\n``` \ndocker image tag nginx dockerHubName/ngnix dockerHubName/nginx:testing\n```\n\n为这个Image添加一个testing的tag\n\n如果想让repo是私人的，现在docker hub上创建一个private repo再push\n\n## Dockerfile\n> docker build -f some-dockerfile\n\n> FROM: required\n\n选择一个minimal distribution. (debian, centos), 很多工具都不具备\n\n> WORKDIR /etc/nginx\n\n相当于cd\n\n> COPY\n\n复制source code从local\n\n> EVN: \n\neg. NGINX_VERSION 1.11.10-jessie\n导入环境变量\n\n> RUN:\n\n运行Shell command, 两个command之间可以用&&连接，表示在同一layer\nRUN可以有多个\n\n**Docker有自己的log file(stdout, stderr)，所以用Nginx自带的log并不是最理性的解决方案\n```\nRUN ln -sf /dev/stdout /var/log/nginx/access.log && ln -sf /dev/stderr /var/log/nginx/error.log\n```\n\n将nginx的log导入进docker\n\n> EXPOSE:\n\n允许暴露的接口，比如web需要暴露 **EXPOSE: 80 443**\n但是这只是允许权限,还是需要用**-p**在host中暴露这些接口\n\n> CMD: []  required 但是可以inherit from FROM image\n\n当container运行的时候运行的命令，Dockerfile中只能存在一个CMD，如果存在多个，最后一个优先级最高\n\n## Build Dockerfile\n``` \ndokcer image build -t customnginx .\n```\n\n第一次build时间较长，但是所有步骤会被存cache。\n修改一行Dockerfile中的文件后，这一行之后的所有步骤都会重新build，所以文件order很重要，把多变的代码放在后面。\n\n## 小节\n创建Dockerfile，如果能用offical repo的base image就用official的，如果不能满足要求就去Docker hub看看有没有可靠高的image。都不能满足要求可以自己用minimal distribution创建自己的Dockerfile。\n``` \ndocker image build -t tag-name .\n```\n\nbuild已创建的Dockerfile并标注tag\n```\ndocker container run -p 80:80 tag-name\n```\n\n运行刚刚创建的image\n``` \ndocker image tag tag-name:additional-tag dockerHubName/tag-name:additional-tag\ndocker push dockerHubName/tag-name:additional-tag\n```\n\n## 数据保存\ncontainer是不可更改，稍纵即逝的，不应该用于保存数据。\nDocker有两种解决方式：Volumes和Bind Mounts\nVolumes是在container外部规定一个区域用来存储数据\nBind Mounts用来加载外部数据。\n\n### Volumes\n在Dockerfile中添加Volume规则\n> VOLUME /path/to/db\n删除container后不会影响Volume，需要多一个步骤将其删除。\n\n```\ndocker volume ls\n```\n可以用来查看当前机器创建了多少Volumes\n```\ndocker volume inspect XXX\n```\n如果在linux机器上，通过Mountpoint地址可以看到数据。Mac和Windows看不到(在linux VM里)\n\n如果需要创建Volume，记得在docker container run的时候添加 -v name:/path/to/db 来定义Volume名称。否则很难区分Volume对应的container\n\n> docker volume create \n\n\n## Bind Mounting\n将host的文件或目录映射到container的文件或目录。\n无法在Dockerfile里写，只能通过```container run -v /Users/username/stuff:/path/container```实现。\n```\ndocker container run -d --name nginx -p 80:80 -v $(pwd):/usr/share/nginx/html nginx\n```\n将当前目录$(pwd)映射到/usr/share/nginx/html里面，当当前目录变的时候，container里面的文件也会变。\n\n\nDocker Compose\n-----------------\n* 保存docker run settings\n* 使用YAML\n* CLI tool\n\n```yml\nversion: '3.1'\n\nservice:\n\tservicename: #DNS name inside network\n\t\timage:\n\t\tcommand: #replace the default CMD specified by the image\n\t\tenvironment:\n\t\tvolumes:\n\t\tports:\n\t\t  - 80:80\n\tservicename2:\n\nvolumes:\n\nnetworks:\n```\n\n\n后台运行当前docker compose\n\n``` docker-compose up -d ```\n\n卸载docker compose\n> docker-compose down\n\n查看container中的services\n>docker compose top\n\n```yml\nservices:\n  proxy:\n    build:\n      context: .\n      dockerfile: nginx.Dockerfile\n  image: nginx-custom  \n  ports:\n      - '80:80'\n  web:\n    image: httpd\n    volumes:\n      - ./html:/usr/local/apache2/htdocs/\n```\ndockerfile指向当前目录自定义的dockerfile，这里是一个nginx的自定义image  \n第二个service是server，把当前html目录绑定到container里面，所以可以在runtime情况下改变网页文件  \n一般情况下会有第三个service作为database  \n\n\n\nDocker Swarm\n---------------\ndocker swarm 是docker提供的非常易学高效的分布式部署方式\n\n## Swarm集群初始化\n```docker swarm init [OPTIONS]```\n\noptions:\n⋅⋅⋅*--advertise-addr: 多网卡的情况下，指定需要使用的ip\n⋅⋅⋅*--listen-addr: 指定监听的 ip 与端口\n<!-- ⋅⋅⋅*--availability: 节点的有效性(\"active\"|\"pause\"|\"drain\") -->\n\n\n```docker service``` 相当于docker container run。区别在于这是给orchestration命令，让它放在queue里自动部署\n```docker service update```可以更新正在运行的services的一些参数，用于rolling update\n\n\n\n## overlay network\n同一swarm下容器之间的访问。\n\n```docker network create --driver overlay NETWORK_NAME```\n\n然后用docker service部署在这个NETWORK_NAME网络中即可\n\n## Routing Mesh\nLoad balances Swarm services across their tasks\n所以在公开接口上的请求都会被自动load balance到不同node上.\n这个load balancer是在OSI Layer 3(TCP)上的，不是在Layer4(DNS)，并且是stateless\n意思是只能在访问IP和port的时候才可以导流，如果一台服务器运行多个server并运行在一个swarm中，则需要在DNS的Layer上创建一个Nginx(stateful load balancers)\n\n在overlay network上，cluster中访问任意一个node的IP都可以得到相同的结果\n\n\nDocker Stack\n-------------\ndocker compose file for swarm\n\n```docker stack deploy```自动部署services，但deploy不支持build。需要把自己的image build一下并上传到repo中，在stack中换成repo中的image\n\n```yml\nversion: \"3\"\nservices:\n  redis:\n    image: redis:alpine\n    ports:\n      - \"6379\"\n    networks:\n      - frontend\n    deploy:\n      replicas: 2\n      update_config:\n        parallelism: 2\n        delay: 10s\n      restart_policy:\n        condition: on-failure\n  db:\n    image: postgres:9.4\n    volumes:\n      - db-data:/var/lib/postgresql/data\n    networks:\n      - backend\n    deploy:\n      placement:\n        constraints: [node.role == manager]\n  vote:\n    image: dockersamples/examplevotingapp_vote:before\n    ports:\n      - 5000:80\n    networks:\n      - frontend\n    depends_on:\n      - redis\n    deploy:\n      replicas: 2\n      update_config:\n        parallelism: 2\n      restart_policy:\n        condition: on-failure\n  result:\n    image: dockersamples/examplevotingapp_result:before\n    ports:\n      - 5001:80\n    networks:\n      - backend\n    depends_on:\n      - db\n    deploy:\n      replicas: 1\n      update_config:\n        parallelism: 2\n        delay: 10s\n      restart_policy:\n        condition: on-failure\n\n  worker:\n    image: dockersamples/examplevotingapp_worker\n    networks:\n      - frontend\n      - backend\n    deploy:\n      mode: replicated\n      replicas: 5\n      labels: [APP=VOTING]\n      restart_policy:\n        condition: on-failure\n        delay: 10s\n        max_attempts: 3\n        window: 120s\n      placement:\n        constraints: [node.role == manager]\n\n  visualizer:\n    image: dockersamples/visualizer\n    ports:\n      - \"8080:8080\"\n    stop_grace_period: 1m30s\n    volumes:\n      - \"/var/run/docker.sock:/var/run/docker.sock\"\n    deploy:\n      placement:\n        constraints: [node.role == manager]\n\nnetworks:\n  frontend:\n  backend:\n\nvolumes:\n  db-data:\n```\n\n部署上面的代码：\n```docker stack deploy -c docker-stack.yml voteapp```\n\n```docker stack services STACK_NAME```可以查看此stack部署的services情况\n```docker stack ps STACK_NAME```可以查看这个stack怎样运行的\n基本和compose差不多，但是version要用3或以上.\ndeploy可以设置部署多个实例，update时的设置之类的。\ndeploy.placement.constraints可以说设置只部署在manager node上\n\n如果要update整个stack，最好先改stack file然后再运行```docker -c YML_FILE stack deploy```更新stack\n\n\nSwarm Secrect\n-----------\n#在service中\n\nSecrect会被加密储存在docker自己的Raft log中，并会分发给所有manager，当manager管理的worker需要secret时分发下去。\n所有的secrect都在/run/secrets/的目录中, 作为一个file。\n\n如果在`docker service`中使用环境变量\n> docker service create -e ENV_VAR_FILE=/run/secrets/SECRET_NAME SERVICE_NAME\n\n两种secret注入swarm的方法：\n1）文件注入:\n在当前目录创建包含secret的文件，运行\n> docker secret create SECRET_NAME SECRET_FILE.txt\n\n坏处：密码文件在服务器中，非常危险\n\n2）command line注入\n> echo \"SECRET_NAME\" | docker secret create SECRET_NAME -\n\n坏处：如果有人进去root，可以通过bash history查找到明文密码\n\n\n查看密码\n> docker secret inspect SECRET_NAME\n\n#在stack中\nstack yml file的version需要大于等于3.1\n\n```yml\nversion: \"3.1\"\n  services:\n    psql:\n      image: postgres\n      secrets:\n        - psql_user\n        - psql_password\n      enviroment:\n        POSTGRES_PASSWORD_FILE: /run/secrets/psql_password\n        POSTGRES_USER_FILE: /run/secrets/psql_user\nsecrets:\n  psql_user:\n    file: ./psql_user.txt\n  psql_password:\n    file: ./psql_password.txt\n```\nstack中secret同样有两种注入方法，一种是用file，第二中是先用command line提前注入\n如果用CLI注入，需要用`external:`标签标明secrets来源\n```yml\nsecrets:\n  psql_user: \n    external:\n  psql_password:\n    external:\n```\n\nsecrets中还可以自定义permission，可以指定某系统用户才能使用secrets\n\n**当deploy完成之后，要及时清理bash history或secret file**\n\n\n```\nTCP port 2376 for secure Docker client communication. This port is required for Docker Machine to work. Docker Machine is used to orchestrate Docker hosts.\nTCP port 2377. This port is used for communication between the nodes of a Docker Swarm or cluster. It only needs to be opened on manager nodes.\nTCP and UDP port 7946 for communication among nodes (container network discovery).\nUDP port 4789 for overlay network traffic (container ingress networking).\n```\n\nCentOS7中防火墙默认关闭\n\n查看防火墙状态\n> systemctl status firewalld\n\n开启防火墙\n> systemctl start firewalld\n\n修改为默认开机启动\n> systemctl enable firewalld\n\n【如果】在Manager的node上打开下列接口\n```\nfirewall-cmd --add-port=2376/tcp --permanent\nfirewall-cmd --add-port=2377/tcp --permanent\nfirewall-cmd --add-port=7946/tcp --permanent\nfirewall-cmd --add-port=7946/udp --permanent\nfirewall-cmd --add-port=4789/udp --permanent\n```\n\n【如果】\n在worker的node上打开下列接口\n```\nfirewall-cmd --add-port=2376/tcp --permanent\nfirewall-cmd --add-port=7946/tcp --permanent\nfirewall-cmd --add-port=7946/udp --permanent\nfirewall-cmd --add-port=4789/udp --permanent\n```\n\n重新加载防火墙\n> firewall-cmd --reload\n\n重启Docker\n> systemctl restart docker\n\n\n\n## Docker 18.09 版本更新\n\n18.09以上的版本提供了ssh到docker的功能，具体方法是 `docker -H ssh://user@server` 然后再输入你想操作的docker指令。\n\n比如运行: \n`docker -H ssh://user@server run -it --rm busybox`\n\n这样我们就可以直接从本地SSH到服务器的docker，并把Secret传进去从而实现目前最安全的secret部署方法。\n\n首先授权给当前用户docker的使用权，我们就不需要每次都敲sudo了\n> sudo usermod -aG docker USER_NAME\n\n然后打开terminal通过本地传secrete:\n> echo \"SECRET_NAME\" | docker -H ssh://USER_NAME@YOUR_HOST secret create secret_name -\n如果用file的当做secret的话\n> docker -H ssh://USER_NAME@YOUR_HOST secret create secret_name.txt\n\n成功之后会打印出secret的ID`xtgwhpfr6cyvqp3gnmeevorws`，也可以ssh进服务器使用`docker secret ls`查看是否存在刚才注入的secret\n\n这样就在服务器中完全不留痕迹的注入了secret。","slug":"docker-note","published":1,"updated":"2019-12-07T08:01:01.624Z","comments":1,"photos":[],"link":"","_id":"ck4ddyiug0012phvph6cc3yjv","content":"<p>Docker学习笔记</p>\n<a id=\"more\"></a>\n<h4 id=\"2019年3月更新\"><a class=\"markdownIt-Anchor\" href=\"#2019年3月更新\"></a> 2019年3月更新</h4>\n<ul>\n<li>更新docker swarm及secret</li>\n</ul>\n<h2 id=\"为什么要用docker\"><a class=\"markdownIt-Anchor\" href=\"#为什么要用docker\"></a> 为什么要用Docker</h2>\n<p>Docker是一个轻量级的虚拟系统，我们叫它容器。因不同系统和版本的不同，部署服务器的时候总是会出现不同的错误，让开发效率大大降低。docker的出现让服务器开发不再受限于系统版本，让一套代码永远可以在不同服务器上一致运行。同时docker也是微服务架构中不可缺少的部分，让不同微服务之间协调效率高效。</p>\n<h2 id=\"第一个docker-container\"><a class=\"markdownIt-Anchor\" href=\"#第一个docker-container\"></a> 第一个Docker Container</h2>\n<h2 id=\"docker安装\"><a class=\"markdownIt-Anchor\" href=\"#docker安装\"></a> Docker安装</h2>\n<p>Linux可以通过<a href=\"https://get.docker.com/\" target=\"_blank\" rel=\"noopener\">get.docker.com</a>快捷安装。<br />\n复制文档前面注释中的代码脚步即可</p>\n<p>安装完成后，这是几个常用的CLI(command line interface)命令</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\">systemctl start docker   &#x2F;&#x2F; 启动docker服务</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\">systemctl stop docker    &#x2F;&#x2F; 停止docker服务</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\">systemctl restart docker &#x2F;&#x2F; 重启docker服务</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">4</span></pre></td><td class=\"code\"><pre><span class=\"line\">systemctl status docker  &#x2F;&#x2F; 查看docker服务状态</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">5</span></pre></td><td class=\"code\"><pre><span class=\"line\">systemctl enable docker  &#x2F;&#x2F; 开机启动docker服务</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">6</span></pre></td><td class=\"code\"><pre><span class=\"line\">systemctl disable docker &#x2F;&#x2F; 取消开机启动docker服务</span></pre></td></tr></table></figure>\n<p>在运行<code>systemctl start docker</code>后，可以试一下<code>docker container run hello-world</code>，之后会在命令栏中print出来行 hello-world即代表安装成功</p>\n<h2 id=\"制作一个nginx的容器\"><a class=\"markdownIt-Anchor\" href=\"#制作一个nginx的容器\"></a> 制作一个Nginx的容器</h2>\n<p>每一个容器都相当于一个虚拟系统</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\">docker container run --publish 80:80 --detach --name webhost nginx</span></pre></td></tr></table></figure>\n<p>这行命令的运行流程：</p>\n<ol>\n<li>从Dokcer hub下载nginx的镜像(image)</li>\n<li>创建新的名为webhost的container</li>\n<li><code>--publish 80:80</code>为开放容器的80接口</li>\n<li>将来自host的80接口网络请求路由至80容器接口</li>\n<li>–detach 让这个container在后台运行</li>\n</ol>\n<p>容器部署成功后，运行下面的命令会显示本地活跃docker实例, 添加 -a会显示全部实例(包括已经停止的实例)</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\">docker container ls</span></pre></td></tr></table></figure>\n<p>停止一个容器</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\">docker container stop container-name</span></pre></td></tr></table></figure>\n<p>查看log</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\">docker container logs container-name</span></pre></td></tr></table></figure>\n<p>删除container。名称或id可以叠加用于删除多项container</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\">docker rm container-name</span></pre></td></tr></table></figure>\n<h2 id=\"image镜像-vs-container容器\"><a class=\"markdownIt-Anchor\" href=\"#image镜像-vs-container容器\"></a> Image镜像 vs Container容器</h2>\n<p>Container是Image的实例</p>\n<p>可以理解为Image是一个class类，container是新建的对象</p>\n<p>Image是如和新建Container的一个说明书</p>\n<h2 id=\"cheat-sheet\"><a class=\"markdownIt-Anchor\" href=\"#cheat-sheet\"></a> Cheat sheet</h2>\n<p>向container里传递环境参数</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\">--env or -e</span></pre></td></tr></table></figure>\n<p>查看container里面的top process</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\">docker container top container-name</span></pre></td></tr></table></figure>\n<p>显示这个container的metadata（配置，网络等）</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\">docker container insepct</span></pre></td></tr></table></figure>\n<p>显示实时信息（简单的监测）</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\">docker container stats</span></pre></td></tr></table></figure>\n<p>进入容器交互(interactive)模式(就是进去虚拟系统)</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\">docker container run -it CONTAINER_NAME bash</span></pre></td></tr></table></figure>\n<p>-t : pseudo-TTY</p>\n<p>-i : interactive</p>\n<h2 id=\"创建一个ubuntu的容器\"><a class=\"markdownIt-Anchor\" href=\"#创建一个ubuntu的容器\"></a> 创建一个ubuntu的容器</h2>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\">docker container run -it --name ubuntu ubuntu</span></pre></td></tr></table></figure>\n<p>如果退出后再次进入的命令会不一样:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\">docker container start -ai ubuntu</span></pre></td></tr></table></figure>\n<p>进入一个正在运行的container的shell（创建了一个多出的process）</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\">docker container exec -it container-name bash</span></pre></td></tr></table></figure>\n<h2 id=\"docker-网络\"><a class=\"markdownIt-Anchor\" href=\"#docker-网络\"></a> Docker 网络</h2>\n<p>-p 用来暴露你的网络接口</p>\n<ul>\n<li>每一个container接入一个私有虚拟网络“bridge”</li>\n<li>每一个虚拟网络通过NAT防火墙路由出去</li>\n<li>所有的container都可以在自己的虚拟网络内部交流（不用-p暴露给公网）</li>\n<li>最好为每一个独立App建立一个自己的虚拟网络（比如给mongo和node单独创建一个虚拟网络）</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\">docker container port container-name</span></pre></td></tr></table></figure>\n<p>显示路由</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\">docker container inspect --format &#39;\\&#123;\\&#123; .NetworkSettings.IPAddress\\&#125;\\&#125;&#39; container-name</span></pre></td></tr></table></figure>\n<p>查询container地址  --format 是filter</p>\n<p><img src=\"../docker-note/docker-network.png\" alt=\"docker-network\" /> docker network</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\">docker network ls</span></pre></td></tr></table></figure>\n<p>显示所有网络<br />\nbirdge是默认网络，连接外网<br />\nhost是绕过bridge直接连接外网（性能好，安全性低）<br />\nnone什么都不连接</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\">docker network inspect container-name</span></pre></td></tr></table></figure>\n<p>查看网络<br />\ndocker network inspect bridge 可以查看哪些container正在连着bridge。“IPAM”是自动被赋值的IP地址。默认subnet “172.17.0.0/16”</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\">dokcer network create --drive</span></pre></td></tr></table></figure>\n<p>建立一个网络<br />\n–drive 指定一个drive（bridge host none或者第三方dirve）默认bridge</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\">docker network connet</span></pre></td></tr></table></figure>\n<p>连接一个网络<br />\n一个container可以连接到两个network上</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\">docker network disconnect</span></pre></td></tr></table></figure>\n<p>退出一个网络</p>\n<p>如果要让新的container连接到该网络:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\">docker container run -d --name new_nginx --network new_network_name nginx</span></pre></td></tr></table></figure>\n<h2 id=\"dns\"><a class=\"markdownIt-Anchor\" href=\"#dns\"></a> DNS</h2>\n<p>因为container中的IP是不固定的，所以需要DNS<br />\n两个在相同虚拟网络下的container可以默认通过名字互通</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\">docker container exec -it con2 ping con1</span></pre></td></tr></table></figure>\n<p>其中con1和con2在同一网络下（需要先apt-get update &amp;&amp; apt-get install -y inputils-ping）</p>\n<h2 id=\"dns-round-robin-test\"><a class=\"markdownIt-Anchor\" href=\"#dns-round-robin-test\"></a> DNS Round Robin Test</h2>\n<ol>\n<li>新建一个虚拟网络</li>\n<li>创建两个elasticsearch:2的镜像</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\">eg: docker container run --name elastic1 -d --network test --network-alias search elasticsearch:1</span></pre></td></tr></table></figure>\n<ol start=\"3\">\n<li>使用–network-alias为两个container标记alias</li>\n<li>运行docker container run --rm --net ass centos curl -s search:9200 附加为–net查看同样DNS名称下的两个网络</li>\n<li>centos curl -s search:9200 --net</li>\n</ol>\n<h2 id=\"docker-image\"><a class=\"markdownIt-Anchor\" href=\"#docker-image\"></a> Docker image</h2>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\">docker pull nginx:latest</span></pre></td></tr></table></figure>\n<p>生产环境下，最好为Image标注一个固定的版本号，不要用latest</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\">docker history nginx:latest</span></pre></td></tr></table></figure>\n<p>显示全部nginx的历史layer，每一个layer都代表了一次更新，每一层layer共同组成了一个image<br />\n共同使用的layer不会被下载，每一个layer有唯一的SHA区分</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\">docker inspect nginx:latest</span></pre></td></tr></table></figure>\n<p>显示这个image的metadata比如“ContainerConfig”: &quot;ExpposedPorts&quot;说明哪个接口会被期望被开通，&quot;Cmd&quot;显示哪些command在运行时会被运行…</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\">docker image tag nginx dockerHubName&#x2F;nginx</span></pre></td></tr></table></figure>\n<p>为image加一个tag,tag不会改变Image ID，如果后面不添加tag（详情下一行）,默认latest<br />\n需要加自己dockerhub的tag才可以push上去</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\">docker image tag nginx dockerHubName&#x2F;ngnix dockerHubName&#x2F;nginx:testing</span></pre></td></tr></table></figure>\n<p>为这个Image添加一个testing的tag</p>\n<p>如果想让repo是私人的，现在docker hub上创建一个private repo再push</p>\n<h2 id=\"dockerfile\"><a class=\"markdownIt-Anchor\" href=\"#dockerfile\"></a> Dockerfile</h2>\n<blockquote>\n<p>docker build -f some-dockerfile</p>\n</blockquote>\n<blockquote>\n<p>FROM: required</p>\n</blockquote>\n<p>选择一个minimal distribution. (debian, centos), 很多工具都不具备</p>\n<blockquote>\n<p>WORKDIR /etc/nginx</p>\n</blockquote>\n<p>相当于cd</p>\n<blockquote>\n<p>COPY</p>\n</blockquote>\n<p>复制source code从local</p>\n<blockquote>\n<p>EVN:</p>\n</blockquote>\n<p>eg. NGINX_VERSION 1.11.10-jessie<br />\n导入环境变量</p>\n<blockquote>\n<p>RUN:</p>\n</blockquote>\n<p>运行Shell command, 两个command之间可以用&amp;&amp;连接，表示在同一layer<br />\nRUN可以有多个</p>\n<p>**Docker有自己的log file(stdout, stderr)，所以用Nginx自带的log并不是最理性的解决方案</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\">RUN ln -sf &#x2F;dev&#x2F;stdout &#x2F;var&#x2F;log&#x2F;nginx&#x2F;access.log &amp;&amp; ln -sf &#x2F;dev&#x2F;stderr &#x2F;var&#x2F;log&#x2F;nginx&#x2F;error.log</span></pre></td></tr></table></figure>\n<p>将nginx的log导入进docker</p>\n<blockquote>\n<p>EXPOSE:</p>\n</blockquote>\n<p>允许暴露的接口，比如web需要暴露 <strong>EXPOSE: 80 443</strong><br />\n但是这只是允许权限,还是需要用**-p**在host中暴露这些接口</p>\n<blockquote>\n<p>CMD: []  required 但是可以inherit from FROM image</p>\n</blockquote>\n<p>当container运行的时候运行的命令，Dockerfile中只能存在一个CMD，如果存在多个，最后一个优先级最高</p>\n<h2 id=\"build-dockerfile\"><a class=\"markdownIt-Anchor\" href=\"#build-dockerfile\"></a> Build Dockerfile</h2>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\">dokcer image build -t customnginx .</span></pre></td></tr></table></figure>\n<p>第一次build时间较长，但是所有步骤会被存cache。<br />\n修改一行Dockerfile中的文件后，这一行之后的所有步骤都会重新build，所以文件order很重要，把多变的代码放在后面。</p>\n<h2 id=\"小节\"><a class=\"markdownIt-Anchor\" href=\"#小节\"></a> 小节</h2>\n<p>创建Dockerfile，如果能用offical repo的base image就用official的，如果不能满足要求就去Docker hub看看有没有可靠高的image。都不能满足要求可以自己用minimal distribution创建自己的Dockerfile。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\">docker image build -t tag-name .</span></pre></td></tr></table></figure>\n<p>build已创建的Dockerfile并标注tag</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\">docker container run -p 80:80 tag-name</span></pre></td></tr></table></figure>\n<p>运行刚刚创建的image</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\">docker image tag tag-name:additional-tag dockerHubName&#x2F;tag-name:additional-tag</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\">docker push dockerHubName&#x2F;tag-name:additional-tag</span></pre></td></tr></table></figure>\n<h2 id=\"数据保存\"><a class=\"markdownIt-Anchor\" href=\"#数据保存\"></a> 数据保存</h2>\n<p>container是不可更改，稍纵即逝的，不应该用于保存数据。<br />\nDocker有两种解决方式：Volumes和Bind Mounts<br />\nVolumes是在container外部规定一个区域用来存储数据<br />\nBind Mounts用来加载外部数据。</p>\n<h3 id=\"volumes\"><a class=\"markdownIt-Anchor\" href=\"#volumes\"></a> Volumes</h3>\n<p>在Dockerfile中添加Volume规则</p>\n<blockquote>\n<p>VOLUME /path/to/db<br />\n删除container后不会影响Volume，需要多一个步骤将其删除。</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\">docker volume ls</span></pre></td></tr></table></figure>\n<p>可以用来查看当前机器创建了多少Volumes</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\">docker volume inspect XXX</span></pre></td></tr></table></figure>\n<p>如果在linux机器上，通过Mountpoint地址可以看到数据。Mac和Windows看不到(在linux VM里)</p>\n<p>如果需要创建Volume，记得在docker container run的时候添加 -v name:/path/to/db 来定义Volume名称。否则很难区分Volume对应的container</p>\n<blockquote>\n<p>docker volume create</p>\n</blockquote>\n<h2 id=\"bind-mounting\"><a class=\"markdownIt-Anchor\" href=\"#bind-mounting\"></a> Bind Mounting</h2>\n<p>将host的文件或目录映射到container的文件或目录。<br />\n无法在Dockerfile里写，只能通过<code>container run -v /Users/username/stuff:/path/container</code>实现。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\">docker container run -d --name nginx -p 80:80 -v $(pwd):&#x2F;usr&#x2F;share&#x2F;nginx&#x2F;html nginx</span></pre></td></tr></table></figure>\n<p>将当前目录$(pwd)映射到/usr/share/nginx/html里面，当当前目录变的时候，container里面的文件也会变。</p>\n<h2 id=\"docker-compose\"><a class=\"markdownIt-Anchor\" href=\"#docker-compose\"></a> Docker Compose</h2>\n<ul>\n<li>保存docker run settings</li>\n<li>使用YAML</li>\n<li>CLI tool</li>\n</ul>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">version:</span> <span class=\"string\">'3.1'</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">service:</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">4</span></pre></td><td class=\"code\"><pre><span class=\"line\">\t<span class=\"attr\">servicename:</span> <span class=\"comment\">#DNS name inside network</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">5</span></pre></td><td class=\"code\"><pre><span class=\"line\">\t\t<span class=\"attr\">image:</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">6</span></pre></td><td class=\"code\"><pre><span class=\"line\">\t\t<span class=\"attr\">command:</span> <span class=\"comment\">#replace the default CMD specified by the image</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">7</span></pre></td><td class=\"code\"><pre><span class=\"line\">\t\t<span class=\"attr\">environment:</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">8</span></pre></td><td class=\"code\"><pre><span class=\"line\">\t\t<span class=\"attr\">volumes:</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">9</span></pre></td><td class=\"code\"><pre><span class=\"line\">\t\t<span class=\"attr\">ports:</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">10</span></pre></td><td class=\"code\"><pre><span class=\"line\">\t\t  <span class=\"bullet\">-</span> <span class=\"number\">80</span><span class=\"string\">:80</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">11</span></pre></td><td class=\"code\"><pre><span class=\"line\">\t<span class=\"attr\">servicename2:</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">12</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">13</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">volumes:</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">14</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">15</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">networks:</span></span></pre></td></tr></table></figure>\n<p>后台运行当前docker compose</p>\n<figure class=\"highlight plain\"><figcaption><span>up -d ```</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\">卸载docker compose</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; docker-compose down</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">4</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">5</span></pre></td><td class=\"code\"><pre><span class=\"line\">查看container中的services</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">6</span></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;docker compose top</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">7</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">8</span></pre></td><td class=\"code\"><pre><span class=\"line\">&#96;&#96;&#96;yml</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">9</span></pre></td><td class=\"code\"><pre><span class=\"line\">services:</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">10</span></pre></td><td class=\"code\"><pre><span class=\"line\">  proxy:</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">11</span></pre></td><td class=\"code\"><pre><span class=\"line\">    build:</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">12</span></pre></td><td class=\"code\"><pre><span class=\"line\">      context: .</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">13</span></pre></td><td class=\"code\"><pre><span class=\"line\">      dockerfile: nginx.Dockerfile</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">14</span></pre></td><td class=\"code\"><pre><span class=\"line\">  image: nginx-custom  </span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">15</span></pre></td><td class=\"code\"><pre><span class=\"line\">  ports:</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">16</span></pre></td><td class=\"code\"><pre><span class=\"line\">      - &#39;80:80&#39;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">17</span></pre></td><td class=\"code\"><pre><span class=\"line\">  web:</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">18</span></pre></td><td class=\"code\"><pre><span class=\"line\">    image: httpd</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">19</span></pre></td><td class=\"code\"><pre><span class=\"line\">    volumes:</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">20</span></pre></td><td class=\"code\"><pre><span class=\"line\">      - .&#x2F;html:&#x2F;usr&#x2F;local&#x2F;apache2&#x2F;htdocs&#x2F;</span></pre></td></tr></table></figure>\n<p>dockerfile指向当前目录自定义的dockerfile，这里是一个nginx的自定义image<br />\n第二个service是server，把当前html目录绑定到container里面，所以可以在runtime情况下改变网页文件<br />\n一般情况下会有第三个service作为database</p>\n<h2 id=\"docker-swarm\"><a class=\"markdownIt-Anchor\" href=\"#docker-swarm\"></a> Docker Swarm</h2>\n<p>docker swarm 是docker提供的非常易学高效的分布式部署方式</p>\n<h2 id=\"swarm集群初始化\"><a class=\"markdownIt-Anchor\" href=\"#swarm集群初始化\"></a> Swarm集群初始化</h2>\n<figure class=\"highlight docker\"><figcaption><span>swarm init [OPTIONS]```</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\">options:</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\">⋅⋅⋅*--advertise-addr: 多网卡的情况下，指定需要使用的ip</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">4</span></pre></td><td class=\"code\"><pre><span class=\"line\">⋅⋅⋅*--listen-addr: 指定监听的 ip 与端口</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">5</span></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!-- ⋅⋅⋅*--availability: 节点的有效性(<span class=\"string\">\"active\"</span>|<span class=\"string\">\"pause\"</span>|<span class=\"string\">\"drain\"</span>) --&gt;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">6</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">7</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">8</span></pre></td><td class=\"code\"><pre><span class=\"line\">```docker service``` 相当于docker container <span class=\"keyword\">run</span><span class=\"bash\">。区别在于这是给orchestration命令，让它放在queue里自动部署</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">9</span></pre></td><td class=\"code\"><pre><span class=\"line\">```docker service update```可以更新正在运行的services的一些参数，用于rolling update</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">10</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">11</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">12</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">13</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">## overlay network</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">14</span></pre></td><td class=\"code\"><pre><span class=\"line\">同一swarm下容器之间的访问。</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">15</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">16</span></pre></td><td class=\"code\"><pre><span class=\"line\">```docker network create --driver overlay NETWORK_NAME</span></pre></td></tr></table></figure>\n<p>然后用docker service部署在这个NETWORK_NAME网络中即可</p>\n<h2 id=\"routing-mesh\"><a class=\"markdownIt-Anchor\" href=\"#routing-mesh\"></a> Routing Mesh</h2>\n<p>Load balances Swarm services across their tasks<br />\n所以在公开接口上的请求都会被自动load balance到不同node上.<br />\n这个load balancer是在OSI Layer 3(TCP)上的，不是在Layer4(DNS)，并且是stateless<br />\n意思是只能在访问IP和port的时候才可以导流，如果一台服务器运行多个server并运行在一个swarm中，则需要在DNS的Layer上创建一个Nginx(stateful load balancers)</p>\n<p>在overlay network上，cluster中访问任意一个node的IP都可以得到相同的结果</p>\n<h2 id=\"docker-stack\"><a class=\"markdownIt-Anchor\" href=\"#docker-stack\"></a> Docker Stack</h2>\n<p>docker compose file for swarm</p>\n<figure class=\"highlight docker\"><figcaption><span>stack deploy```自动部署services，但deploy不支持build。需要把自己的image build一下并上传到repo中，在stack中换成repo中的image</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\">```yml</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\">version: <span class=\"string\">\"3\"</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">4</span></pre></td><td class=\"code\"><pre><span class=\"line\">services:</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">5</span></pre></td><td class=\"code\"><pre><span class=\"line\">  redis:</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">6</span></pre></td><td class=\"code\"><pre><span class=\"line\">    image: redis:alpine</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">7</span></pre></td><td class=\"code\"><pre><span class=\"line\">    ports:</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">8</span></pre></td><td class=\"code\"><pre><span class=\"line\">      - <span class=\"string\">\"6379\"</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">9</span></pre></td><td class=\"code\"><pre><span class=\"line\">    networks:</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">10</span></pre></td><td class=\"code\"><pre><span class=\"line\">      - frontend</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">11</span></pre></td><td class=\"code\"><pre><span class=\"line\">    deploy:</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">12</span></pre></td><td class=\"code\"><pre><span class=\"line\">      replicas: <span class=\"number\">2</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">13</span></pre></td><td class=\"code\"><pre><span class=\"line\">      update_config:</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">14</span></pre></td><td class=\"code\"><pre><span class=\"line\">        parallelism: <span class=\"number\">2</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">15</span></pre></td><td class=\"code\"><pre><span class=\"line\">        delay: <span class=\"number\">10</span>s</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">16</span></pre></td><td class=\"code\"><pre><span class=\"line\">      restart_policy:</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">17</span></pre></td><td class=\"code\"><pre><span class=\"line\">        condition: on-failure</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">18</span></pre></td><td class=\"code\"><pre><span class=\"line\">  db:</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">19</span></pre></td><td class=\"code\"><pre><span class=\"line\">    image: postgres:<span class=\"number\">9.4</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">20</span></pre></td><td class=\"code\"><pre><span class=\"line\">    volumes:</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">21</span></pre></td><td class=\"code\"><pre><span class=\"line\">      - db-data:/var/lib/postgresql/data</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">22</span></pre></td><td class=\"code\"><pre><span class=\"line\">    networks:</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">23</span></pre></td><td class=\"code\"><pre><span class=\"line\">      - backend</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">24</span></pre></td><td class=\"code\"><pre><span class=\"line\">    deploy:</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">25</span></pre></td><td class=\"code\"><pre><span class=\"line\">      placement:</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">26</span></pre></td><td class=\"code\"><pre><span class=\"line\">        constraints: [node.role == manager]</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">27</span></pre></td><td class=\"code\"><pre><span class=\"line\">  vote:</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">28</span></pre></td><td class=\"code\"><pre><span class=\"line\">    image: dockersamples/examplevotingapp_vote:before</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">29</span></pre></td><td class=\"code\"><pre><span class=\"line\">    ports:</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">30</span></pre></td><td class=\"code\"><pre><span class=\"line\">      - <span class=\"number\">5000</span>:<span class=\"number\">80</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">31</span></pre></td><td class=\"code\"><pre><span class=\"line\">    networks:</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">32</span></pre></td><td class=\"code\"><pre><span class=\"line\">      - frontend</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">33</span></pre></td><td class=\"code\"><pre><span class=\"line\">    depends_on:</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">34</span></pre></td><td class=\"code\"><pre><span class=\"line\">      - redis</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">35</span></pre></td><td class=\"code\"><pre><span class=\"line\">    deploy:</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">36</span></pre></td><td class=\"code\"><pre><span class=\"line\">      replicas: <span class=\"number\">2</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">37</span></pre></td><td class=\"code\"><pre><span class=\"line\">      update_config:</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">38</span></pre></td><td class=\"code\"><pre><span class=\"line\">        parallelism: <span class=\"number\">2</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">39</span></pre></td><td class=\"code\"><pre><span class=\"line\">      restart_policy:</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">40</span></pre></td><td class=\"code\"><pre><span class=\"line\">        condition: on-failure</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">41</span></pre></td><td class=\"code\"><pre><span class=\"line\">  result:</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">42</span></pre></td><td class=\"code\"><pre><span class=\"line\">    image: dockersamples/examplevotingapp_result:before</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">43</span></pre></td><td class=\"code\"><pre><span class=\"line\">    ports:</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">44</span></pre></td><td class=\"code\"><pre><span class=\"line\">      - <span class=\"number\">5001</span>:<span class=\"number\">80</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">45</span></pre></td><td class=\"code\"><pre><span class=\"line\">    networks:</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">46</span></pre></td><td class=\"code\"><pre><span class=\"line\">      - backend</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">47</span></pre></td><td class=\"code\"><pre><span class=\"line\">    depends_on:</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">48</span></pre></td><td class=\"code\"><pre><span class=\"line\">      - db</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">49</span></pre></td><td class=\"code\"><pre><span class=\"line\">    deploy:</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">50</span></pre></td><td class=\"code\"><pre><span class=\"line\">      replicas: <span class=\"number\">1</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">51</span></pre></td><td class=\"code\"><pre><span class=\"line\">      update_config:</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">52</span></pre></td><td class=\"code\"><pre><span class=\"line\">        parallelism: <span class=\"number\">2</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">53</span></pre></td><td class=\"code\"><pre><span class=\"line\">        delay: <span class=\"number\">10</span>s</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">54</span></pre></td><td class=\"code\"><pre><span class=\"line\">      restart_policy:</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">55</span></pre></td><td class=\"code\"><pre><span class=\"line\">        condition: on-failure</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">56</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">57</span></pre></td><td class=\"code\"><pre><span class=\"line\">  worker:</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">58</span></pre></td><td class=\"code\"><pre><span class=\"line\">    image: dockersamples/examplevotingapp_worker</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">59</span></pre></td><td class=\"code\"><pre><span class=\"line\">    networks:</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">60</span></pre></td><td class=\"code\"><pre><span class=\"line\">      - frontend</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">61</span></pre></td><td class=\"code\"><pre><span class=\"line\">      - backend</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">62</span></pre></td><td class=\"code\"><pre><span class=\"line\">    deploy:</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">63</span></pre></td><td class=\"code\"><pre><span class=\"line\">      mode: replicated</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">64</span></pre></td><td class=\"code\"><pre><span class=\"line\">      replicas: <span class=\"number\">5</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">65</span></pre></td><td class=\"code\"><pre><span class=\"line\">      labels: [APP=VOTING]</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">66</span></pre></td><td class=\"code\"><pre><span class=\"line\">      restart_policy:</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">67</span></pre></td><td class=\"code\"><pre><span class=\"line\">        condition: on-failure</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">68</span></pre></td><td class=\"code\"><pre><span class=\"line\">        delay: <span class=\"number\">10</span>s</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">69</span></pre></td><td class=\"code\"><pre><span class=\"line\">        max_attempts: <span class=\"number\">3</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">70</span></pre></td><td class=\"code\"><pre><span class=\"line\">        window: <span class=\"number\">120</span>s</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">71</span></pre></td><td class=\"code\"><pre><span class=\"line\">      placement:</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">72</span></pre></td><td class=\"code\"><pre><span class=\"line\">        constraints: [node.role == manager]</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">73</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">74</span></pre></td><td class=\"code\"><pre><span class=\"line\">  visualizer:</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">75</span></pre></td><td class=\"code\"><pre><span class=\"line\">    image: dockersamples/visualizer</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">76</span></pre></td><td class=\"code\"><pre><span class=\"line\">    ports:</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">77</span></pre></td><td class=\"code\"><pre><span class=\"line\">      - <span class=\"string\">\"8080:8080\"</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">78</span></pre></td><td class=\"code\"><pre><span class=\"line\">    stop_grace_period: <span class=\"number\">1</span>m30s</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">79</span></pre></td><td class=\"code\"><pre><span class=\"line\">    volumes:</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">80</span></pre></td><td class=\"code\"><pre><span class=\"line\">      - <span class=\"string\">\"/var/run/docker.sock:/var/run/docker.sock\"</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">81</span></pre></td><td class=\"code\"><pre><span class=\"line\">    deploy:</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">82</span></pre></td><td class=\"code\"><pre><span class=\"line\">      placement:</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">83</span></pre></td><td class=\"code\"><pre><span class=\"line\">        constraints: [node.role == manager]</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">84</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">85</span></pre></td><td class=\"code\"><pre><span class=\"line\">networks:</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">86</span></pre></td><td class=\"code\"><pre><span class=\"line\">  frontend:</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">87</span></pre></td><td class=\"code\"><pre><span class=\"line\">  backend:</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">88</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">89</span></pre></td><td class=\"code\"><pre><span class=\"line\">volumes:</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">90</span></pre></td><td class=\"code\"><pre><span class=\"line\">  db-data:</span></pre></td></tr></table></figure>\n<p>部署上面的代码：</p>\n<figure class=\"highlight docker\"><figcaption><span>stack deploy -c docker-stack.yml voteapp```</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\">```docker stack services STACK_NAME```可以查看此stack部署的services情况</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\">```docker stack ps STACK_NAME```可以查看这个stack怎样运行的</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">4</span></pre></td><td class=\"code\"><pre><span class=\"line\">基本和compose差不多，但是version要用<span class=\"number\">3</span>或以上.</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">5</span></pre></td><td class=\"code\"><pre><span class=\"line\">deploy可以设置部署多个实例，update时的设置之类的。</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">6</span></pre></td><td class=\"code\"><pre><span class=\"line\">deploy.placement.constraints可以说设置只部署在manager node上</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">7</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">8</span></pre></td><td class=\"code\"><pre><span class=\"line\">如果要update整个stack，最好先改stack file然后再运行```docker -c YML_FILE stack deploy```更新stack</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">9</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">10</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">11</span></pre></td><td class=\"code\"><pre><span class=\"line\">Swarm Secrect</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">12</span></pre></td><td class=\"code\"><pre><span class=\"line\">-----------</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">13</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#在service中</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">14</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">15</span></pre></td><td class=\"code\"><pre><span class=\"line\">Secrect会被加密储存在docker自己的Raft log中，并会分发给所有manager，当manager管理的worker需要secret时分发下去。</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">16</span></pre></td><td class=\"code\"><pre><span class=\"line\">所有的secrect都在/<span class=\"keyword\">run</span><span class=\"bash\">/secrets/的目录中, 作为一个file。</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">17</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">18</span></pre></td><td class=\"code\"><pre><span class=\"line\">如果在`docker service`中使用环境变量</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">19</span></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; docker service create -e ENV_VAR_FILE=/<span class=\"keyword\">run</span><span class=\"bash\">/secrets/SECRET_NAME SERVICE_NAME</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">20</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">21</span></pre></td><td class=\"code\"><pre><span class=\"line\">两种secret注入swarm的方法：</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">22</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">1</span>）文件注入:</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">23</span></pre></td><td class=\"code\"><pre><span class=\"line\">在当前目录创建包含secret的文件，运行</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">24</span></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; docker secret create SECRET_NAME SECRET_FILE.txt</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">25</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">26</span></pre></td><td class=\"code\"><pre><span class=\"line\">坏处：密码文件在服务器中，非常危险</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">27</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">28</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">2</span>）command line注入</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">29</span></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; echo <span class=\"string\">\"SECRET_NAME\"</span> | docker secret create SECRET_NAME -</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">30</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">31</span></pre></td><td class=\"code\"><pre><span class=\"line\">坏处：如果有人进去root，可以通过bash history查找到明文密码</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">32</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">33</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">34</span></pre></td><td class=\"code\"><pre><span class=\"line\">查看密码</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">35</span></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; docker secret inspect SECRET_NAME</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">36</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">37</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#在stack中</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">38</span></pre></td><td class=\"code\"><pre><span class=\"line\">stack yml file的version需要大于等于<span class=\"number\">3.1</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">39</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">40</span></pre></td><td class=\"code\"><pre><span class=\"line\">```yml</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">41</span></pre></td><td class=\"code\"><pre><span class=\"line\">version: <span class=\"string\">\"3.1\"</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">42</span></pre></td><td class=\"code\"><pre><span class=\"line\">  services:</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">43</span></pre></td><td class=\"code\"><pre><span class=\"line\">    psql:</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">44</span></pre></td><td class=\"code\"><pre><span class=\"line\">      image: postgres</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">45</span></pre></td><td class=\"code\"><pre><span class=\"line\">      secrets:</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">46</span></pre></td><td class=\"code\"><pre><span class=\"line\">        - psql_user</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">47</span></pre></td><td class=\"code\"><pre><span class=\"line\">        - psql_password</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">48</span></pre></td><td class=\"code\"><pre><span class=\"line\">      enviroment:</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">49</span></pre></td><td class=\"code\"><pre><span class=\"line\">        POSTGRES_PASSWORD_FILE: /<span class=\"keyword\">run</span><span class=\"bash\">/secrets/psql_password</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">50</span></pre></td><td class=\"code\"><pre><span class=\"line\">        POSTGRES_USER_FILE: /<span class=\"keyword\">run</span><span class=\"bash\">/secrets/psql_user</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">51</span></pre></td><td class=\"code\"><pre><span class=\"line\">secrets:</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">52</span></pre></td><td class=\"code\"><pre><span class=\"line\">  psql_user:</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">53</span></pre></td><td class=\"code\"><pre><span class=\"line\">    file: ./psql_user.txt</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">54</span></pre></td><td class=\"code\"><pre><span class=\"line\">  psql_password:</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">55</span></pre></td><td class=\"code\"><pre><span class=\"line\">    file: ./psql_password.txt</span></pre></td></tr></table></figure>\n<p>stack中secret同样有两种注入方法，一种是用file，第二中是先用command line提前注入<br />\n如果用CLI注入，需要用<code>external:</code>标签标明secrets来源</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">secrets:</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"attr\">psql_user:</span> </span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"attr\">external:</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">4</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"attr\">psql_password:</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">5</span></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"attr\">external:</span></span></pre></td></tr></table></figure>\n<p>secrets中还可以自定义permission，可以指定某系统用户才能使用secrets</p>\n<p><strong>当deploy完成之后，要及时清理bash history或secret file</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\">TCP port 2376 for secure Docker client communication. This port is required for Docker Machine to work. Docker Machine is used to orchestrate Docker hosts.</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\">TCP port 2377. This port is used for communication between the nodes of a Docker Swarm or cluster. It only needs to be opened on manager nodes.</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\">TCP and UDP port 7946 for communication among nodes (container network discovery).</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">4</span></pre></td><td class=\"code\"><pre><span class=\"line\">UDP port 4789 for overlay network traffic (container ingress networking).</span></pre></td></tr></table></figure>\n<p>CentOS7中防火墙默认关闭</p>\n<p>查看防火墙状态</p>\n<blockquote>\n<p>systemctl status firewalld</p>\n</blockquote>\n<p>开启防火墙</p>\n<blockquote>\n<p>systemctl start firewalld</p>\n</blockquote>\n<p>修改为默认开机启动</p>\n<blockquote>\n<p>systemctl enable firewalld</p>\n</blockquote>\n<p>【如果】在Manager的node上打开下列接口</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\">firewall-cmd --add-port&#x3D;2376&#x2F;tcp --permanent</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\">firewall-cmd --add-port&#x3D;2377&#x2F;tcp --permanent</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\">firewall-cmd --add-port&#x3D;7946&#x2F;tcp --permanent</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">4</span></pre></td><td class=\"code\"><pre><span class=\"line\">firewall-cmd --add-port&#x3D;7946&#x2F;udp --permanent</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">5</span></pre></td><td class=\"code\"><pre><span class=\"line\">firewall-cmd --add-port&#x3D;4789&#x2F;udp --permanent</span></pre></td></tr></table></figure>\n<p>【如果】<br />\n在worker的node上打开下列接口</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\">firewall-cmd --add-port&#x3D;2376&#x2F;tcp --permanent</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\">firewall-cmd --add-port&#x3D;7946&#x2F;tcp --permanent</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\">firewall-cmd --add-port&#x3D;7946&#x2F;udp --permanent</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">4</span></pre></td><td class=\"code\"><pre><span class=\"line\">firewall-cmd --add-port&#x3D;4789&#x2F;udp --permanent</span></pre></td></tr></table></figure>\n<p>重新加载防火墙</p>\n<blockquote>\n<p>firewall-cmd --reload</p>\n</blockquote>\n<p>重启Docker</p>\n<blockquote>\n<p>systemctl restart docker</p>\n</blockquote>\n<h2 id=\"docker-1809-版本更新\"><a class=\"markdownIt-Anchor\" href=\"#docker-1809-版本更新\"></a> Docker 18.09 版本更新</h2>\n<p>18.09以上的版本提供了ssh到docker的功能，具体方法是 <code>docker -H ssh://user@server</code> 然后再输入你想操作的docker指令。</p>\n<p>比如运行:<br />\n<code>docker -H ssh://user@server run -it --rm busybox</code></p>\n<p>这样我们就可以直接从本地SSH到服务器的docker，并把Secret传进去从而实现目前最安全的secret部署方法。</p>\n<p>首先授权给当前用户docker的使用权，我们就不需要每次都敲sudo了</p>\n<blockquote>\n<p>sudo usermod -aG docker USER_NAME</p>\n</blockquote>\n<p>然后打开terminal通过本地传secrete:</p>\n<blockquote>\n<p>echo “SECRET_NAME” | docker -H ssh://USER_NAME@YOUR_HOST secret create secret_name -<br />\n如果用file的当做secret的话<br />\ndocker -H ssh://USER_NAME@YOUR_HOST secret create secret_name.txt</p>\n</blockquote>\n<p>成功之后会打印出secret的ID<code>xtgwhpfr6cyvqp3gnmeevorws</code>，也可以ssh进服务器使用<code>docker secret ls</code>查看是否存在刚才注入的secret</p>\n<p>这样就在服务器中完全不留痕迹的注入了secret。</p>\n<!-- flag of hidden posts -->","site":{"data":{}},"excerpt":"<p>Docker学习笔记</p>","more":"<h4 id=\"2019年3月更新\"><a class=\"markdownIt-Anchor\" href=\"#2019年3月更新\"></a> 2019年3月更新</h4>\n<ul>\n<li>更新docker swarm及secret</li>\n</ul>\n<h2 id=\"为什么要用docker\"><a class=\"markdownIt-Anchor\" href=\"#为什么要用docker\"></a> 为什么要用Docker</h2>\n<p>Docker是一个轻量级的虚拟系统，我们叫它容器。因不同系统和版本的不同，部署服务器的时候总是会出现不同的错误，让开发效率大大降低。docker的出现让服务器开发不再受限于系统版本，让一套代码永远可以在不同服务器上一致运行。同时docker也是微服务架构中不可缺少的部分，让不同微服务之间协调效率高效。</p>\n<h2 id=\"第一个docker-container\"><a class=\"markdownIt-Anchor\" href=\"#第一个docker-container\"></a> 第一个Docker Container</h2>\n<h2 id=\"docker安装\"><a class=\"markdownIt-Anchor\" href=\"#docker安装\"></a> Docker安装</h2>\n<p>Linux可以通过<a href=\"https://get.docker.com/\" target=\"_blank\" rel=\"noopener\">get.docker.com</a>快捷安装。<br />\n复制文档前面注释中的代码脚步即可</p>\n<p>安装完成后，这是几个常用的CLI(command line interface)命令</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\">systemctl start docker   &#x2F;&#x2F; 启动docker服务</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\">systemctl stop docker    &#x2F;&#x2F; 停止docker服务</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\">systemctl restart docker &#x2F;&#x2F; 重启docker服务</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">4</span></pre></td><td class=\"code\"><pre><span class=\"line\">systemctl status docker  &#x2F;&#x2F; 查看docker服务状态</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">5</span></pre></td><td class=\"code\"><pre><span class=\"line\">systemctl enable docker  &#x2F;&#x2F; 开机启动docker服务</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">6</span></pre></td><td class=\"code\"><pre><span class=\"line\">systemctl disable docker &#x2F;&#x2F; 取消开机启动docker服务</span></pre></td></tr></table></figure>\n<p>在运行<code>systemctl start docker</code>后，可以试一下<code>docker container run hello-world</code>，之后会在命令栏中print出来行 hello-world即代表安装成功</p>\n<h2 id=\"制作一个nginx的容器\"><a class=\"markdownIt-Anchor\" href=\"#制作一个nginx的容器\"></a> 制作一个Nginx的容器</h2>\n<p>每一个容器都相当于一个虚拟系统</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\">docker container run --publish 80:80 --detach --name webhost nginx</span></pre></td></tr></table></figure>\n<p>这行命令的运行流程：</p>\n<ol>\n<li>从Dokcer hub下载nginx的镜像(image)</li>\n<li>创建新的名为webhost的container</li>\n<li><code>--publish 80:80</code>为开放容器的80接口</li>\n<li>将来自host的80接口网络请求路由至80容器接口</li>\n<li>–detach 让这个container在后台运行</li>\n</ol>\n<p>容器部署成功后，运行下面的命令会显示本地活跃docker实例, 添加 -a会显示全部实例(包括已经停止的实例)</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\">docker container ls</span></pre></td></tr></table></figure>\n<p>停止一个容器</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\">docker container stop container-name</span></pre></td></tr></table></figure>\n<p>查看log</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\">docker container logs container-name</span></pre></td></tr></table></figure>\n<p>删除container。名称或id可以叠加用于删除多项container</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\">docker rm container-name</span></pre></td></tr></table></figure>\n<h2 id=\"image镜像-vs-container容器\"><a class=\"markdownIt-Anchor\" href=\"#image镜像-vs-container容器\"></a> Image镜像 vs Container容器</h2>\n<p>Container是Image的实例</p>\n<p>可以理解为Image是一个class类，container是新建的对象</p>\n<p>Image是如和新建Container的一个说明书</p>\n<h2 id=\"cheat-sheet\"><a class=\"markdownIt-Anchor\" href=\"#cheat-sheet\"></a> Cheat sheet</h2>\n<p>向container里传递环境参数</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\">--env or -e</span></pre></td></tr></table></figure>\n<p>查看container里面的top process</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\">docker container top container-name</span></pre></td></tr></table></figure>\n<p>显示这个container的metadata（配置，网络等）</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\">docker container insepct</span></pre></td></tr></table></figure>\n<p>显示实时信息（简单的监测）</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\">docker container stats</span></pre></td></tr></table></figure>\n<p>进入容器交互(interactive)模式(就是进去虚拟系统)</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\">docker container run -it CONTAINER_NAME bash</span></pre></td></tr></table></figure>\n<p>-t : pseudo-TTY</p>\n<p>-i : interactive</p>\n<h2 id=\"创建一个ubuntu的容器\"><a class=\"markdownIt-Anchor\" href=\"#创建一个ubuntu的容器\"></a> 创建一个ubuntu的容器</h2>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\">docker container run -it --name ubuntu ubuntu</span></pre></td></tr></table></figure>\n<p>如果退出后再次进入的命令会不一样:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\">docker container start -ai ubuntu</span></pre></td></tr></table></figure>\n<p>进入一个正在运行的container的shell（创建了一个多出的process）</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\">docker container exec -it container-name bash</span></pre></td></tr></table></figure>\n<h2 id=\"docker-网络\"><a class=\"markdownIt-Anchor\" href=\"#docker-网络\"></a> Docker 网络</h2>\n<p>-p 用来暴露你的网络接口</p>\n<ul>\n<li>每一个container接入一个私有虚拟网络“bridge”</li>\n<li>每一个虚拟网络通过NAT防火墙路由出去</li>\n<li>所有的container都可以在自己的虚拟网络内部交流（不用-p暴露给公网）</li>\n<li>最好为每一个独立App建立一个自己的虚拟网络（比如给mongo和node单独创建一个虚拟网络）</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\">docker container port container-name</span></pre></td></tr></table></figure>\n<p>显示路由</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\">docker container inspect --format &#39;\\&#123;\\&#123; .NetworkSettings.IPAddress\\&#125;\\&#125;&#39; container-name</span></pre></td></tr></table></figure>\n<p>查询container地址  --format 是filter</p>\n<p><img src=\"../docker-note/docker-network.png\" alt=\"docker-network\" /> docker network</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\">docker network ls</span></pre></td></tr></table></figure>\n<p>显示所有网络<br />\nbirdge是默认网络，连接外网<br />\nhost是绕过bridge直接连接外网（性能好，安全性低）<br />\nnone什么都不连接</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\">docker network inspect container-name</span></pre></td></tr></table></figure>\n<p>查看网络<br />\ndocker network inspect bridge 可以查看哪些container正在连着bridge。“IPAM”是自动被赋值的IP地址。默认subnet “172.17.0.0/16”</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\">dokcer network create --drive</span></pre></td></tr></table></figure>\n<p>建立一个网络<br />\n–drive 指定一个drive（bridge host none或者第三方dirve）默认bridge</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\">docker network connet</span></pre></td></tr></table></figure>\n<p>连接一个网络<br />\n一个container可以连接到两个network上</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\">docker network disconnect</span></pre></td></tr></table></figure>\n<p>退出一个网络</p>\n<p>如果要让新的container连接到该网络:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\">docker container run -d --name new_nginx --network new_network_name nginx</span></pre></td></tr></table></figure>\n<h2 id=\"dns\"><a class=\"markdownIt-Anchor\" href=\"#dns\"></a> DNS</h2>\n<p>因为container中的IP是不固定的，所以需要DNS<br />\n两个在相同虚拟网络下的container可以默认通过名字互通</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\">docker container exec -it con2 ping con1</span></pre></td></tr></table></figure>\n<p>其中con1和con2在同一网络下（需要先apt-get update &amp;&amp; apt-get install -y inputils-ping）</p>\n<h2 id=\"dns-round-robin-test\"><a class=\"markdownIt-Anchor\" href=\"#dns-round-robin-test\"></a> DNS Round Robin Test</h2>\n<ol>\n<li>新建一个虚拟网络</li>\n<li>创建两个elasticsearch:2的镜像</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\">eg: docker container run --name elastic1 -d --network test --network-alias search elasticsearch:1</span></pre></td></tr></table></figure>\n<ol start=\"3\">\n<li>使用–network-alias为两个container标记alias</li>\n<li>运行docker container run --rm --net ass centos curl -s search:9200 附加为–net查看同样DNS名称下的两个网络</li>\n<li>centos curl -s search:9200 --net</li>\n</ol>\n<h2 id=\"docker-image\"><a class=\"markdownIt-Anchor\" href=\"#docker-image\"></a> Docker image</h2>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\">docker pull nginx:latest</span></pre></td></tr></table></figure>\n<p>生产环境下，最好为Image标注一个固定的版本号，不要用latest</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\">docker history nginx:latest</span></pre></td></tr></table></figure>\n<p>显示全部nginx的历史layer，每一个layer都代表了一次更新，每一层layer共同组成了一个image<br />\n共同使用的layer不会被下载，每一个layer有唯一的SHA区分</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\">docker inspect nginx:latest</span></pre></td></tr></table></figure>\n<p>显示这个image的metadata比如“ContainerConfig”: &quot;ExpposedPorts&quot;说明哪个接口会被期望被开通，&quot;Cmd&quot;显示哪些command在运行时会被运行…</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\">docker image tag nginx dockerHubName&#x2F;nginx</span></pre></td></tr></table></figure>\n<p>为image加一个tag,tag不会改变Image ID，如果后面不添加tag（详情下一行）,默认latest<br />\n需要加自己dockerhub的tag才可以push上去</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\">docker image tag nginx dockerHubName&#x2F;ngnix dockerHubName&#x2F;nginx:testing</span></pre></td></tr></table></figure>\n<p>为这个Image添加一个testing的tag</p>\n<p>如果想让repo是私人的，现在docker hub上创建一个private repo再push</p>\n<h2 id=\"dockerfile\"><a class=\"markdownIt-Anchor\" href=\"#dockerfile\"></a> Dockerfile</h2>\n<blockquote>\n<p>docker build -f some-dockerfile</p>\n</blockquote>\n<blockquote>\n<p>FROM: required</p>\n</blockquote>\n<p>选择一个minimal distribution. (debian, centos), 很多工具都不具备</p>\n<blockquote>\n<p>WORKDIR /etc/nginx</p>\n</blockquote>\n<p>相当于cd</p>\n<blockquote>\n<p>COPY</p>\n</blockquote>\n<p>复制source code从local</p>\n<blockquote>\n<p>EVN:</p>\n</blockquote>\n<p>eg. NGINX_VERSION 1.11.10-jessie<br />\n导入环境变量</p>\n<blockquote>\n<p>RUN:</p>\n</blockquote>\n<p>运行Shell command, 两个command之间可以用&amp;&amp;连接，表示在同一layer<br />\nRUN可以有多个</p>\n<p>**Docker有自己的log file(stdout, stderr)，所以用Nginx自带的log并不是最理性的解决方案</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\">RUN ln -sf &#x2F;dev&#x2F;stdout &#x2F;var&#x2F;log&#x2F;nginx&#x2F;access.log &amp;&amp; ln -sf &#x2F;dev&#x2F;stderr &#x2F;var&#x2F;log&#x2F;nginx&#x2F;error.log</span></pre></td></tr></table></figure>\n<p>将nginx的log导入进docker</p>\n<blockquote>\n<p>EXPOSE:</p>\n</blockquote>\n<p>允许暴露的接口，比如web需要暴露 <strong>EXPOSE: 80 443</strong><br />\n但是这只是允许权限,还是需要用**-p**在host中暴露这些接口</p>\n<blockquote>\n<p>CMD: []  required 但是可以inherit from FROM image</p>\n</blockquote>\n<p>当container运行的时候运行的命令，Dockerfile中只能存在一个CMD，如果存在多个，最后一个优先级最高</p>\n<h2 id=\"build-dockerfile\"><a class=\"markdownIt-Anchor\" href=\"#build-dockerfile\"></a> Build Dockerfile</h2>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\">dokcer image build -t customnginx .</span></pre></td></tr></table></figure>\n<p>第一次build时间较长，但是所有步骤会被存cache。<br />\n修改一行Dockerfile中的文件后，这一行之后的所有步骤都会重新build，所以文件order很重要，把多变的代码放在后面。</p>\n<h2 id=\"小节\"><a class=\"markdownIt-Anchor\" href=\"#小节\"></a> 小节</h2>\n<p>创建Dockerfile，如果能用offical repo的base image就用official的，如果不能满足要求就去Docker hub看看有没有可靠高的image。都不能满足要求可以自己用minimal distribution创建自己的Dockerfile。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\">docker image build -t tag-name .</span></pre></td></tr></table></figure>\n<p>build已创建的Dockerfile并标注tag</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\">docker container run -p 80:80 tag-name</span></pre></td></tr></table></figure>\n<p>运行刚刚创建的image</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\">docker image tag tag-name:additional-tag dockerHubName&#x2F;tag-name:additional-tag</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\">docker push dockerHubName&#x2F;tag-name:additional-tag</span></pre></td></tr></table></figure>\n<h2 id=\"数据保存\"><a class=\"markdownIt-Anchor\" href=\"#数据保存\"></a> 数据保存</h2>\n<p>container是不可更改，稍纵即逝的，不应该用于保存数据。<br />\nDocker有两种解决方式：Volumes和Bind Mounts<br />\nVolumes是在container外部规定一个区域用来存储数据<br />\nBind Mounts用来加载外部数据。</p>\n<h3 id=\"volumes\"><a class=\"markdownIt-Anchor\" href=\"#volumes\"></a> Volumes</h3>\n<p>在Dockerfile中添加Volume规则</p>\n<blockquote>\n<p>VOLUME /path/to/db<br />\n删除container后不会影响Volume，需要多一个步骤将其删除。</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\">docker volume ls</span></pre></td></tr></table></figure>\n<p>可以用来查看当前机器创建了多少Volumes</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\">docker volume inspect XXX</span></pre></td></tr></table></figure>\n<p>如果在linux机器上，通过Mountpoint地址可以看到数据。Mac和Windows看不到(在linux VM里)</p>\n<p>如果需要创建Volume，记得在docker container run的时候添加 -v name:/path/to/db 来定义Volume名称。否则很难区分Volume对应的container</p>\n<blockquote>\n<p>docker volume create</p>\n</blockquote>\n<h2 id=\"bind-mounting\"><a class=\"markdownIt-Anchor\" href=\"#bind-mounting\"></a> Bind Mounting</h2>\n<p>将host的文件或目录映射到container的文件或目录。<br />\n无法在Dockerfile里写，只能通过<code>container run -v /Users/username/stuff:/path/container</code>实现。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\">docker container run -d --name nginx -p 80:80 -v $(pwd):&#x2F;usr&#x2F;share&#x2F;nginx&#x2F;html nginx</span></pre></td></tr></table></figure>\n<p>将当前目录$(pwd)映射到/usr/share/nginx/html里面，当当前目录变的时候，container里面的文件也会变。</p>\n<h2 id=\"docker-compose\"><a class=\"markdownIt-Anchor\" href=\"#docker-compose\"></a> Docker Compose</h2>\n<ul>\n<li>保存docker run settings</li>\n<li>使用YAML</li>\n<li>CLI tool</li>\n</ul>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">version:</span> <span class=\"string\">'3.1'</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">service:</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">4</span></pre></td><td class=\"code\"><pre><span class=\"line\">\t<span class=\"attr\">servicename:</span> <span class=\"comment\">#DNS name inside network</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">5</span></pre></td><td class=\"code\"><pre><span class=\"line\">\t\t<span class=\"attr\">image:</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">6</span></pre></td><td class=\"code\"><pre><span class=\"line\">\t\t<span class=\"attr\">command:</span> <span class=\"comment\">#replace the default CMD specified by the image</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">7</span></pre></td><td class=\"code\"><pre><span class=\"line\">\t\t<span class=\"attr\">environment:</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">8</span></pre></td><td class=\"code\"><pre><span class=\"line\">\t\t<span class=\"attr\">volumes:</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">9</span></pre></td><td class=\"code\"><pre><span class=\"line\">\t\t<span class=\"attr\">ports:</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">10</span></pre></td><td class=\"code\"><pre><span class=\"line\">\t\t  <span class=\"bullet\">-</span> <span class=\"number\">80</span><span class=\"string\">:80</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">11</span></pre></td><td class=\"code\"><pre><span class=\"line\">\t<span class=\"attr\">servicename2:</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">12</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">13</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">volumes:</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">14</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">15</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">networks:</span></span></pre></td></tr></table></figure>\n<p>后台运行当前docker compose</p>\n<figure class=\"highlight plain\"><figcaption><span>up -d ```</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\">卸载docker compose</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; docker-compose down</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">4</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">5</span></pre></td><td class=\"code\"><pre><span class=\"line\">查看container中的services</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">6</span></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;docker compose top</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">7</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">8</span></pre></td><td class=\"code\"><pre><span class=\"line\">&#96;&#96;&#96;yml</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">9</span></pre></td><td class=\"code\"><pre><span class=\"line\">services:</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">10</span></pre></td><td class=\"code\"><pre><span class=\"line\">  proxy:</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">11</span></pre></td><td class=\"code\"><pre><span class=\"line\">    build:</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">12</span></pre></td><td class=\"code\"><pre><span class=\"line\">      context: .</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">13</span></pre></td><td class=\"code\"><pre><span class=\"line\">      dockerfile: nginx.Dockerfile</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">14</span></pre></td><td class=\"code\"><pre><span class=\"line\">  image: nginx-custom  </span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">15</span></pre></td><td class=\"code\"><pre><span class=\"line\">  ports:</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">16</span></pre></td><td class=\"code\"><pre><span class=\"line\">      - &#39;80:80&#39;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">17</span></pre></td><td class=\"code\"><pre><span class=\"line\">  web:</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">18</span></pre></td><td class=\"code\"><pre><span class=\"line\">    image: httpd</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">19</span></pre></td><td class=\"code\"><pre><span class=\"line\">    volumes:</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">20</span></pre></td><td class=\"code\"><pre><span class=\"line\">      - .&#x2F;html:&#x2F;usr&#x2F;local&#x2F;apache2&#x2F;htdocs&#x2F;</span></pre></td></tr></table></figure>\n<p>dockerfile指向当前目录自定义的dockerfile，这里是一个nginx的自定义image<br />\n第二个service是server，把当前html目录绑定到container里面，所以可以在runtime情况下改变网页文件<br />\n一般情况下会有第三个service作为database</p>\n<h2 id=\"docker-swarm\"><a class=\"markdownIt-Anchor\" href=\"#docker-swarm\"></a> Docker Swarm</h2>\n<p>docker swarm 是docker提供的非常易学高效的分布式部署方式</p>\n<h2 id=\"swarm集群初始化\"><a class=\"markdownIt-Anchor\" href=\"#swarm集群初始化\"></a> Swarm集群初始化</h2>\n<figure class=\"highlight docker\"><figcaption><span>swarm init [OPTIONS]```</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\">options:</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\">⋅⋅⋅*--advertise-addr: 多网卡的情况下，指定需要使用的ip</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">4</span></pre></td><td class=\"code\"><pre><span class=\"line\">⋅⋅⋅*--listen-addr: 指定监听的 ip 与端口</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">5</span></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!-- ⋅⋅⋅*--availability: 节点的有效性(<span class=\"string\">\"active\"</span>|<span class=\"string\">\"pause\"</span>|<span class=\"string\">\"drain\"</span>) --&gt;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">6</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">7</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">8</span></pre></td><td class=\"code\"><pre><span class=\"line\">```docker service``` 相当于docker container <span class=\"keyword\">run</span><span class=\"bash\">。区别在于这是给orchestration命令，让它放在queue里自动部署</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">9</span></pre></td><td class=\"code\"><pre><span class=\"line\">```docker service update```可以更新正在运行的services的一些参数，用于rolling update</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">10</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">11</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">12</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">13</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">## overlay network</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">14</span></pre></td><td class=\"code\"><pre><span class=\"line\">同一swarm下容器之间的访问。</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">15</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">16</span></pre></td><td class=\"code\"><pre><span class=\"line\">```docker network create --driver overlay NETWORK_NAME</span></pre></td></tr></table></figure>\n<p>然后用docker service部署在这个NETWORK_NAME网络中即可</p>\n<h2 id=\"routing-mesh\"><a class=\"markdownIt-Anchor\" href=\"#routing-mesh\"></a> Routing Mesh</h2>\n<p>Load balances Swarm services across their tasks<br />\n所以在公开接口上的请求都会被自动load balance到不同node上.<br />\n这个load balancer是在OSI Layer 3(TCP)上的，不是在Layer4(DNS)，并且是stateless<br />\n意思是只能在访问IP和port的时候才可以导流，如果一台服务器运行多个server并运行在一个swarm中，则需要在DNS的Layer上创建一个Nginx(stateful load balancers)</p>\n<p>在overlay network上，cluster中访问任意一个node的IP都可以得到相同的结果</p>\n<h2 id=\"docker-stack\"><a class=\"markdownIt-Anchor\" href=\"#docker-stack\"></a> Docker Stack</h2>\n<p>docker compose file for swarm</p>\n<figure class=\"highlight docker\"><figcaption><span>stack deploy```自动部署services，但deploy不支持build。需要把自己的image build一下并上传到repo中，在stack中换成repo中的image</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\">```yml</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\">version: <span class=\"string\">\"3\"</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">4</span></pre></td><td class=\"code\"><pre><span class=\"line\">services:</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">5</span></pre></td><td class=\"code\"><pre><span class=\"line\">  redis:</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">6</span></pre></td><td class=\"code\"><pre><span class=\"line\">    image: redis:alpine</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">7</span></pre></td><td class=\"code\"><pre><span class=\"line\">    ports:</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">8</span></pre></td><td class=\"code\"><pre><span class=\"line\">      - <span class=\"string\">\"6379\"</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">9</span></pre></td><td class=\"code\"><pre><span class=\"line\">    networks:</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">10</span></pre></td><td class=\"code\"><pre><span class=\"line\">      - frontend</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">11</span></pre></td><td class=\"code\"><pre><span class=\"line\">    deploy:</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">12</span></pre></td><td class=\"code\"><pre><span class=\"line\">      replicas: <span class=\"number\">2</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">13</span></pre></td><td class=\"code\"><pre><span class=\"line\">      update_config:</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">14</span></pre></td><td class=\"code\"><pre><span class=\"line\">        parallelism: <span class=\"number\">2</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">15</span></pre></td><td class=\"code\"><pre><span class=\"line\">        delay: <span class=\"number\">10</span>s</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">16</span></pre></td><td class=\"code\"><pre><span class=\"line\">      restart_policy:</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">17</span></pre></td><td class=\"code\"><pre><span class=\"line\">        condition: on-failure</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">18</span></pre></td><td class=\"code\"><pre><span class=\"line\">  db:</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">19</span></pre></td><td class=\"code\"><pre><span class=\"line\">    image: postgres:<span class=\"number\">9.4</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">20</span></pre></td><td class=\"code\"><pre><span class=\"line\">    volumes:</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">21</span></pre></td><td class=\"code\"><pre><span class=\"line\">      - db-data:/var/lib/postgresql/data</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">22</span></pre></td><td class=\"code\"><pre><span class=\"line\">    networks:</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">23</span></pre></td><td class=\"code\"><pre><span class=\"line\">      - backend</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">24</span></pre></td><td class=\"code\"><pre><span class=\"line\">    deploy:</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">25</span></pre></td><td class=\"code\"><pre><span class=\"line\">      placement:</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">26</span></pre></td><td class=\"code\"><pre><span class=\"line\">        constraints: [node.role == manager]</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">27</span></pre></td><td class=\"code\"><pre><span class=\"line\">  vote:</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">28</span></pre></td><td class=\"code\"><pre><span class=\"line\">    image: dockersamples/examplevotingapp_vote:before</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">29</span></pre></td><td class=\"code\"><pre><span class=\"line\">    ports:</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">30</span></pre></td><td class=\"code\"><pre><span class=\"line\">      - <span class=\"number\">5000</span>:<span class=\"number\">80</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">31</span></pre></td><td class=\"code\"><pre><span class=\"line\">    networks:</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">32</span></pre></td><td class=\"code\"><pre><span class=\"line\">      - frontend</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">33</span></pre></td><td class=\"code\"><pre><span class=\"line\">    depends_on:</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">34</span></pre></td><td class=\"code\"><pre><span class=\"line\">      - redis</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">35</span></pre></td><td class=\"code\"><pre><span class=\"line\">    deploy:</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">36</span></pre></td><td class=\"code\"><pre><span class=\"line\">      replicas: <span class=\"number\">2</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">37</span></pre></td><td class=\"code\"><pre><span class=\"line\">      update_config:</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">38</span></pre></td><td class=\"code\"><pre><span class=\"line\">        parallelism: <span class=\"number\">2</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">39</span></pre></td><td class=\"code\"><pre><span class=\"line\">      restart_policy:</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">40</span></pre></td><td class=\"code\"><pre><span class=\"line\">        condition: on-failure</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">41</span></pre></td><td class=\"code\"><pre><span class=\"line\">  result:</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">42</span></pre></td><td class=\"code\"><pre><span class=\"line\">    image: dockersamples/examplevotingapp_result:before</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">43</span></pre></td><td class=\"code\"><pre><span class=\"line\">    ports:</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">44</span></pre></td><td class=\"code\"><pre><span class=\"line\">      - <span class=\"number\">5001</span>:<span class=\"number\">80</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">45</span></pre></td><td class=\"code\"><pre><span class=\"line\">    networks:</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">46</span></pre></td><td class=\"code\"><pre><span class=\"line\">      - backend</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">47</span></pre></td><td class=\"code\"><pre><span class=\"line\">    depends_on:</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">48</span></pre></td><td class=\"code\"><pre><span class=\"line\">      - db</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">49</span></pre></td><td class=\"code\"><pre><span class=\"line\">    deploy:</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">50</span></pre></td><td class=\"code\"><pre><span class=\"line\">      replicas: <span class=\"number\">1</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">51</span></pre></td><td class=\"code\"><pre><span class=\"line\">      update_config:</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">52</span></pre></td><td class=\"code\"><pre><span class=\"line\">        parallelism: <span class=\"number\">2</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">53</span></pre></td><td class=\"code\"><pre><span class=\"line\">        delay: <span class=\"number\">10</span>s</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">54</span></pre></td><td class=\"code\"><pre><span class=\"line\">      restart_policy:</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">55</span></pre></td><td class=\"code\"><pre><span class=\"line\">        condition: on-failure</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">56</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">57</span></pre></td><td class=\"code\"><pre><span class=\"line\">  worker:</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">58</span></pre></td><td class=\"code\"><pre><span class=\"line\">    image: dockersamples/examplevotingapp_worker</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">59</span></pre></td><td class=\"code\"><pre><span class=\"line\">    networks:</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">60</span></pre></td><td class=\"code\"><pre><span class=\"line\">      - frontend</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">61</span></pre></td><td class=\"code\"><pre><span class=\"line\">      - backend</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">62</span></pre></td><td class=\"code\"><pre><span class=\"line\">    deploy:</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">63</span></pre></td><td class=\"code\"><pre><span class=\"line\">      mode: replicated</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">64</span></pre></td><td class=\"code\"><pre><span class=\"line\">      replicas: <span class=\"number\">5</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">65</span></pre></td><td class=\"code\"><pre><span class=\"line\">      labels: [APP=VOTING]</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">66</span></pre></td><td class=\"code\"><pre><span class=\"line\">      restart_policy:</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">67</span></pre></td><td class=\"code\"><pre><span class=\"line\">        condition: on-failure</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">68</span></pre></td><td class=\"code\"><pre><span class=\"line\">        delay: <span class=\"number\">10</span>s</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">69</span></pre></td><td class=\"code\"><pre><span class=\"line\">        max_attempts: <span class=\"number\">3</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">70</span></pre></td><td class=\"code\"><pre><span class=\"line\">        window: <span class=\"number\">120</span>s</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">71</span></pre></td><td class=\"code\"><pre><span class=\"line\">      placement:</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">72</span></pre></td><td class=\"code\"><pre><span class=\"line\">        constraints: [node.role == manager]</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">73</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">74</span></pre></td><td class=\"code\"><pre><span class=\"line\">  visualizer:</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">75</span></pre></td><td class=\"code\"><pre><span class=\"line\">    image: dockersamples/visualizer</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">76</span></pre></td><td class=\"code\"><pre><span class=\"line\">    ports:</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">77</span></pre></td><td class=\"code\"><pre><span class=\"line\">      - <span class=\"string\">\"8080:8080\"</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">78</span></pre></td><td class=\"code\"><pre><span class=\"line\">    stop_grace_period: <span class=\"number\">1</span>m30s</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">79</span></pre></td><td class=\"code\"><pre><span class=\"line\">    volumes:</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">80</span></pre></td><td class=\"code\"><pre><span class=\"line\">      - <span class=\"string\">\"/var/run/docker.sock:/var/run/docker.sock\"</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">81</span></pre></td><td class=\"code\"><pre><span class=\"line\">    deploy:</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">82</span></pre></td><td class=\"code\"><pre><span class=\"line\">      placement:</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">83</span></pre></td><td class=\"code\"><pre><span class=\"line\">        constraints: [node.role == manager]</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">84</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">85</span></pre></td><td class=\"code\"><pre><span class=\"line\">networks:</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">86</span></pre></td><td class=\"code\"><pre><span class=\"line\">  frontend:</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">87</span></pre></td><td class=\"code\"><pre><span class=\"line\">  backend:</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">88</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">89</span></pre></td><td class=\"code\"><pre><span class=\"line\">volumes:</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">90</span></pre></td><td class=\"code\"><pre><span class=\"line\">  db-data:</span></pre></td></tr></table></figure>\n<p>部署上面的代码：</p>\n<figure class=\"highlight docker\"><figcaption><span>stack deploy -c docker-stack.yml voteapp```</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\">```docker stack services STACK_NAME```可以查看此stack部署的services情况</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\">```docker stack ps STACK_NAME```可以查看这个stack怎样运行的</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">4</span></pre></td><td class=\"code\"><pre><span class=\"line\">基本和compose差不多，但是version要用<span class=\"number\">3</span>或以上.</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">5</span></pre></td><td class=\"code\"><pre><span class=\"line\">deploy可以设置部署多个实例，update时的设置之类的。</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">6</span></pre></td><td class=\"code\"><pre><span class=\"line\">deploy.placement.constraints可以说设置只部署在manager node上</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">7</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">8</span></pre></td><td class=\"code\"><pre><span class=\"line\">如果要update整个stack，最好先改stack file然后再运行```docker -c YML_FILE stack deploy```更新stack</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">9</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">10</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">11</span></pre></td><td class=\"code\"><pre><span class=\"line\">Swarm Secrect</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">12</span></pre></td><td class=\"code\"><pre><span class=\"line\">-----------</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">13</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#在service中</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">14</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">15</span></pre></td><td class=\"code\"><pre><span class=\"line\">Secrect会被加密储存在docker自己的Raft log中，并会分发给所有manager，当manager管理的worker需要secret时分发下去。</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">16</span></pre></td><td class=\"code\"><pre><span class=\"line\">所有的secrect都在/<span class=\"keyword\">run</span><span class=\"bash\">/secrets/的目录中, 作为一个file。</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">17</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">18</span></pre></td><td class=\"code\"><pre><span class=\"line\">如果在`docker service`中使用环境变量</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">19</span></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; docker service create -e ENV_VAR_FILE=/<span class=\"keyword\">run</span><span class=\"bash\">/secrets/SECRET_NAME SERVICE_NAME</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">20</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">21</span></pre></td><td class=\"code\"><pre><span class=\"line\">两种secret注入swarm的方法：</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">22</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">1</span>）文件注入:</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">23</span></pre></td><td class=\"code\"><pre><span class=\"line\">在当前目录创建包含secret的文件，运行</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">24</span></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; docker secret create SECRET_NAME SECRET_FILE.txt</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">25</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">26</span></pre></td><td class=\"code\"><pre><span class=\"line\">坏处：密码文件在服务器中，非常危险</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">27</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">28</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">2</span>）command line注入</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">29</span></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; echo <span class=\"string\">\"SECRET_NAME\"</span> | docker secret create SECRET_NAME -</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">30</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">31</span></pre></td><td class=\"code\"><pre><span class=\"line\">坏处：如果有人进去root，可以通过bash history查找到明文密码</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">32</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">33</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">34</span></pre></td><td class=\"code\"><pre><span class=\"line\">查看密码</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">35</span></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; docker secret inspect SECRET_NAME</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">36</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">37</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#在stack中</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">38</span></pre></td><td class=\"code\"><pre><span class=\"line\">stack yml file的version需要大于等于<span class=\"number\">3.1</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">39</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">40</span></pre></td><td class=\"code\"><pre><span class=\"line\">```yml</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">41</span></pre></td><td class=\"code\"><pre><span class=\"line\">version: <span class=\"string\">\"3.1\"</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">42</span></pre></td><td class=\"code\"><pre><span class=\"line\">  services:</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">43</span></pre></td><td class=\"code\"><pre><span class=\"line\">    psql:</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">44</span></pre></td><td class=\"code\"><pre><span class=\"line\">      image: postgres</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">45</span></pre></td><td class=\"code\"><pre><span class=\"line\">      secrets:</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">46</span></pre></td><td class=\"code\"><pre><span class=\"line\">        - psql_user</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">47</span></pre></td><td class=\"code\"><pre><span class=\"line\">        - psql_password</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">48</span></pre></td><td class=\"code\"><pre><span class=\"line\">      enviroment:</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">49</span></pre></td><td class=\"code\"><pre><span class=\"line\">        POSTGRES_PASSWORD_FILE: /<span class=\"keyword\">run</span><span class=\"bash\">/secrets/psql_password</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">50</span></pre></td><td class=\"code\"><pre><span class=\"line\">        POSTGRES_USER_FILE: /<span class=\"keyword\">run</span><span class=\"bash\">/secrets/psql_user</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">51</span></pre></td><td class=\"code\"><pre><span class=\"line\">secrets:</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">52</span></pre></td><td class=\"code\"><pre><span class=\"line\">  psql_user:</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">53</span></pre></td><td class=\"code\"><pre><span class=\"line\">    file: ./psql_user.txt</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">54</span></pre></td><td class=\"code\"><pre><span class=\"line\">  psql_password:</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">55</span></pre></td><td class=\"code\"><pre><span class=\"line\">    file: ./psql_password.txt</span></pre></td></tr></table></figure>\n<p>stack中secret同样有两种注入方法，一种是用file，第二中是先用command line提前注入<br />\n如果用CLI注入，需要用<code>external:</code>标签标明secrets来源</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">secrets:</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"attr\">psql_user:</span> </span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"attr\">external:</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">4</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"attr\">psql_password:</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">5</span></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"attr\">external:</span></span></pre></td></tr></table></figure>\n<p>secrets中还可以自定义permission，可以指定某系统用户才能使用secrets</p>\n<p><strong>当deploy完成之后，要及时清理bash history或secret file</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\">TCP port 2376 for secure Docker client communication. This port is required for Docker Machine to work. Docker Machine is used to orchestrate Docker hosts.</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\">TCP port 2377. This port is used for communication between the nodes of a Docker Swarm or cluster. It only needs to be opened on manager nodes.</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\">TCP and UDP port 7946 for communication among nodes (container network discovery).</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">4</span></pre></td><td class=\"code\"><pre><span class=\"line\">UDP port 4789 for overlay network traffic (container ingress networking).</span></pre></td></tr></table></figure>\n<p>CentOS7中防火墙默认关闭</p>\n<p>查看防火墙状态</p>\n<blockquote>\n<p>systemctl status firewalld</p>\n</blockquote>\n<p>开启防火墙</p>\n<blockquote>\n<p>systemctl start firewalld</p>\n</blockquote>\n<p>修改为默认开机启动</p>\n<blockquote>\n<p>systemctl enable firewalld</p>\n</blockquote>\n<p>【如果】在Manager的node上打开下列接口</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\">firewall-cmd --add-port&#x3D;2376&#x2F;tcp --permanent</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\">firewall-cmd --add-port&#x3D;2377&#x2F;tcp --permanent</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\">firewall-cmd --add-port&#x3D;7946&#x2F;tcp --permanent</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">4</span></pre></td><td class=\"code\"><pre><span class=\"line\">firewall-cmd --add-port&#x3D;7946&#x2F;udp --permanent</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">5</span></pre></td><td class=\"code\"><pre><span class=\"line\">firewall-cmd --add-port&#x3D;4789&#x2F;udp --permanent</span></pre></td></tr></table></figure>\n<p>【如果】<br />\n在worker的node上打开下列接口</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\">firewall-cmd --add-port&#x3D;2376&#x2F;tcp --permanent</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\">firewall-cmd --add-port&#x3D;7946&#x2F;tcp --permanent</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\">firewall-cmd --add-port&#x3D;7946&#x2F;udp --permanent</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">4</span></pre></td><td class=\"code\"><pre><span class=\"line\">firewall-cmd --add-port&#x3D;4789&#x2F;udp --permanent</span></pre></td></tr></table></figure>\n<p>重新加载防火墙</p>\n<blockquote>\n<p>firewall-cmd --reload</p>\n</blockquote>\n<p>重启Docker</p>\n<blockquote>\n<p>systemctl restart docker</p>\n</blockquote>\n<h2 id=\"docker-1809-版本更新\"><a class=\"markdownIt-Anchor\" href=\"#docker-1809-版本更新\"></a> Docker 18.09 版本更新</h2>\n<p>18.09以上的版本提供了ssh到docker的功能，具体方法是 <code>docker -H ssh://user@server</code> 然后再输入你想操作的docker指令。</p>\n<p>比如运行:<br />\n<code>docker -H ssh://user@server run -it --rm busybox</code></p>\n<p>这样我们就可以直接从本地SSH到服务器的docker，并把Secret传进去从而实现目前最安全的secret部署方法。</p>\n<p>首先授权给当前用户docker的使用权，我们就不需要每次都敲sudo了</p>\n<blockquote>\n<p>sudo usermod -aG docker USER_NAME</p>\n</blockquote>\n<p>然后打开terminal通过本地传secrete:</p>\n<blockquote>\n<p>echo “SECRET_NAME” | docker -H ssh://USER_NAME@YOUR_HOST secret create secret_name -<br />\n如果用file的当做secret的话<br />\ndocker -H ssh://USER_NAME@YOUR_HOST secret create secret_name.txt</p>\n</blockquote>\n<p>成功之后会打印出secret的ID<code>xtgwhpfr6cyvqp3gnmeevorws</code>，也可以ssh进服务器使用<code>docker secret ls</code>查看是否存在刚才注入的secret</p>\n<p>这样就在服务器中完全不留痕迹的注入了secret。</p>"}],"PostAsset":[{"_id":"source/_posts/happy-birthday-to-miemie/sheep_cake.jpg","slug":"sheep_cake.jpg","post":"ck4ddyite000cphvp0nny38n4","modified":1,"renderable":0},{"_id":"source/_posts/docker-note/docker-network.png","slug":"docker-network.png","post":"ck4ddyiug0012phvph6cc3yjv","modified":1,"renderable":0}],"PostCategory":[{"post_id":"ck4ddyisy0002phvpb1erbaur","category_id":"ck4ddyita0008phvpgfky77la","_id":"ck4ddyitf000dphvpfim98emc"},{"post_id":"ck4ddyit50006phvp8zx72kju","category_id":"ck4ddyitg000ephvpbr3o84rk","_id":"ck4ddyith000gphvpedvhgjnz"},{"post_id":"ck4ddyism0000phvpe2786d9p","category_id":"ck4ddyit20004phvphzo700nv","_id":"ck4ddyiti000iphvpfl0qhr86"},{"post_id":"ck4ddyism0000phvpe2786d9p","category_id":"ck4ddyith000fphvp7ltc14zk","_id":"ck4ddyitk000kphvp103qf0jj"},{"post_id":"ck4ddyit80007phvpa2es5oev","category_id":"ck4ddyith000hphvp07oi8338","_id":"ck4ddyitl000mphvpdhe8gvt5"},{"post_id":"ck4ddyitb0009phvp5ae4ajw9","category_id":"ck4ddyith000hphvp07oi8338","_id":"ck4ddyitl000nphvpc59j7yae"},{"post_id":"ck4ddyitc000aphvp517vbkg3","category_id":"ck4ddyitk000lphvpaofe916y","_id":"ck4ddyitn000qphvp8bt48gof"},{"post_id":"ck4ddyite000cphvp0nny38n4","category_id":"ck4ddyith000hphvp07oi8338","_id":"ck4ddyitn000rphvpf05k6td9"},{"post_id":"ck4ddyit30005phvpairohwf0","category_id":"ck4ddyitd000bphvpaeoqavoi","_id":"ck4ddyito000tphvpe53xexmn"},{"post_id":"ck4ddyit30005phvpairohwf0","category_id":"ck4ddyitm000pphvp8vgz52ab","_id":"ck4ddyito000uphvp507sejc2"},{"post_id":"ck4ddyit30005phvpairohwf0","category_id":"ck4ddyitn000sphvpac8udrid","_id":"ck4ddyito000vphvp8f30dg07"},{"post_id":"ck4ddyitx000wphvp3ut117au","category_id":"ck4ddyitz000xphvpgprrc49c","_id":"ck4ddyiu20010phvp06tq6nde"},{"post_id":"ck4ddyiuf0011phvp3puwf2pz","category_id":"ck4ddyiuh0013phvp8ysqehic","_id":"ck4ddyiur0017phvpesdw8ish"},{"post_id":"ck4ddyiuf0011phvp3puwf2pz","category_id":"ck4ddyiun0015phvp8k35eafr","_id":"ck4ddyiur0018phvpg0lb62fc"},{"post_id":"ck4ddyiug0012phvph6cc3yjv","category_id":"ck4ddyiuh0013phvp8ysqehic","_id":"ck4ddyiur0019phvp784978vp"},{"post_id":"ck4ddyiug0012phvph6cc3yjv","category_id":"ck4ddyiun0015phvp8k35eafr","_id":"ck4ddyiur001aphvp0qxy97fo"}],"PostTag":[{"post_id":"ck4ddyitx000wphvp3ut117au","tag_id":"ck4ddyiu0000yphvp7riac2rh","_id":"ck4ddyiu1000zphvpbitxcyym"}],"Tag":[{"name":"cos","_id":"ck4ddyiu0000yphvp7riac2rh"}]}}